{"version":3,"file":"527.js","mappings":"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","sources":["webpack://excel-custom-functions/./node_modules/openai/internal/tslib.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/utils/uuid.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/errors.mjs","webpack://excel-custom-functions/./node_modules/openai/core/error.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/utils/values.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/utils/sleep.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/utils/log.mjs","webpack://excel-custom-functions/./node_modules/openai/version.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/detect-platform.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/shims.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/request-options.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/qs/formats.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/qs/utils.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/qs/stringify.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/utils/bytes.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/decoders/line.mjs","webpack://excel-custom-functions/./node_modules/openai/core/api-promise.mjs","webpack://excel-custom-functions/./node_modules/openai/core/pagination.mjs","webpack://excel-custom-functions/./node_modules/openai/core/streaming.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/parse.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/uploads.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/to-file.mjs","webpack://excel-custom-functions/./node_modules/openai/core/resource.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/utils/path.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/chat/completions/messages.mjs","webpack://excel-custom-functions/./node_modules/openai/lib/RunnableFunction.mjs","webpack://excel-custom-functions/./node_modules/openai/lib/chatCompletionUtils.mjs","webpack://excel-custom-functions/./node_modules/openai/lib/EventStream.mjs","webpack://excel-custom-functions/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs","webpack://excel-custom-functions/./node_modules/openai/lib/parser.mjs","webpack://excel-custom-functions/./node_modules/openai/lib/ChatCompletionRunner.mjs","webpack://excel-custom-functions/./node_modules/openai/_vendor/partial-json-parser/parser.mjs","webpack://excel-custom-functions/./node_modules/openai/lib/ChatCompletionStream.mjs","webpack://excel-custom-functions/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/chat/completions/completions.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/chat/chat.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/headers.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/audio/speech.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/audio/transcriptions.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/audio/translations.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/audio/audio.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/batches.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/beta/assistants.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/beta/realtime/sessions.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/beta/realtime/transcription-sessions.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/beta/realtime/realtime.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/beta/threads/messages.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/beta/threads/runs/steps.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/utils/base64.mjs","webpack://excel-custom-functions/./node_modules/openai/internal/utils/env.mjs","webpack://excel-custom-functions/./node_modules/openai/lib/AssistantStream.mjs","webpack://excel-custom-functions/./node_modules/openai/lib/responses/ResponseStream.mjs","webpack://excel-custom-functions/./node_modules/openai/client.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/beta/threads/runs/runs.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/beta/threads/threads.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/beta/beta.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/completions.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/containers/files/content.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/containers/files/files.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/containers/containers.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/embeddings.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/evals/runs/output-items.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/evals/runs/runs.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/evals/evals.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/files.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/fine-tuning/methods.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/fine-tuning/alpha/graders.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/fine-tuning/alpha/alpha.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/fine-tuning/checkpoints/permissions.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/fine-tuning/checkpoints/checkpoints.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/fine-tuning/jobs/jobs.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/graders/grader-models.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/graders/graders.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/images.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/models.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/moderations.mjs","webpack://excel-custom-functions/./node_modules/openai/lib/ResponsesParser.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/responses/input-items.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/responses/responses.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/uploads/parts.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/uploads/uploads.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/vector-stores/file-batches.mjs","webpack://excel-custom-functions/./node_modules/openai/lib/Util.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/vector-stores/files.mjs","webpack://excel-custom-functions/./node_modules/openai/resources/vector-stores/vector-stores.mjs","webpack://excel-custom-functions/./node_modules/openai/azure.mjs"],"sourcesContent":["function __classPrivateFieldSet(receiver, state, value, kind, f) {\n    if (kind === \"m\")\n        throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f)\n        throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver))\n        throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? (f.value = value) : state.set(receiver, value), value;\n}\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n    if (kind === \"a\" && !f)\n        throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver))\n        throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nexport { __classPrivateFieldSet, __classPrivateFieldGet };\n","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n/**\n * https://stackoverflow.com/a/2117523\n */\nexport let uuid4 = function () {\n    const { crypto } = globalThis;\n    if (crypto?.randomUUID) {\n        uuid4 = crypto.randomUUID.bind(crypto);\n        return crypto.randomUUID();\n    }\n    const u8 = new Uint8Array(1);\n    const randomByte = crypto ? () => crypto.getRandomValues(u8)[0] : () => (Math.random() * 0xff) & 0xff;\n    return '10000000-1000-4000-8000-100000000000'.replace(/[018]/g, (c) => (+c ^ (randomByte() & (15 >> (+c / 4)))).toString(16));\n};\n//# sourceMappingURL=uuid.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport function isAbortError(err) {\n    return (typeof err === 'object' &&\n        err !== null &&\n        // Spec-compliant fetch implementations\n        (('name' in err && err.name === 'AbortError') ||\n            // Expo fetch\n            ('message' in err && String(err.message).includes('FetchRequestCanceledException'))));\n}\nexport const castToError = (err) => {\n    if (err instanceof Error)\n        return err;\n    if (typeof err === 'object' && err !== null) {\n        try {\n            if (Object.prototype.toString.call(err) === '[object Error]') {\n                // @ts-ignore - not all envs have native support for cause yet\n                const error = new Error(err.message, err.cause ? { cause: err.cause } : {});\n                if (err.stack)\n                    error.stack = err.stack;\n                // @ts-ignore - not all envs have native support for cause yet\n                if (err.cause && !error.cause)\n                    error.cause = err.cause;\n                if (err.name)\n                    error.name = err.name;\n                return error;\n            }\n        }\n        catch { }\n        try {\n            return new Error(JSON.stringify(err));\n        }\n        catch { }\n    }\n    return new Error(err);\n};\n//# sourceMappingURL=errors.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { castToError } from \"../internal/errors.mjs\";\nexport class OpenAIError extends Error {\n}\nexport class APIError extends OpenAIError {\n    constructor(status, error, message, headers) {\n        super(`${APIError.makeMessage(status, error, message)}`);\n        this.status = status;\n        this.headers = headers;\n        this.requestID = headers?.get('x-request-id');\n        this.error = error;\n        const data = error;\n        this.code = data?.['code'];\n        this.param = data?.['param'];\n        this.type = data?.['type'];\n    }\n    static makeMessage(status, error, message) {\n        const msg = error?.message ?\n            typeof error.message === 'string' ?\n                error.message\n                : JSON.stringify(error.message)\n            : error ? JSON.stringify(error)\n                : message;\n        if (status && msg) {\n            return `${status} ${msg}`;\n        }\n        if (status) {\n            return `${status} status code (no body)`;\n        }\n        if (msg) {\n            return msg;\n        }\n        return '(no status code or body)';\n    }\n    static generate(status, errorResponse, message, headers) {\n        if (!status || !headers) {\n            return new APIConnectionError({ message, cause: castToError(errorResponse) });\n        }\n        const error = errorResponse?.['error'];\n        if (status === 400) {\n            return new BadRequestError(status, error, message, headers);\n        }\n        if (status === 401) {\n            return new AuthenticationError(status, error, message, headers);\n        }\n        if (status === 403) {\n            return new PermissionDeniedError(status, error, message, headers);\n        }\n        if (status === 404) {\n            return new NotFoundError(status, error, message, headers);\n        }\n        if (status === 409) {\n            return new ConflictError(status, error, message, headers);\n        }\n        if (status === 422) {\n            return new UnprocessableEntityError(status, error, message, headers);\n        }\n        if (status === 429) {\n            return new RateLimitError(status, error, message, headers);\n        }\n        if (status >= 500) {\n            return new InternalServerError(status, error, message, headers);\n        }\n        return new APIError(status, error, message, headers);\n    }\n}\nexport class APIUserAbortError extends APIError {\n    constructor({ message } = {}) {\n        super(undefined, undefined, message || 'Request was aborted.', undefined);\n    }\n}\nexport class APIConnectionError extends APIError {\n    constructor({ message, cause }) {\n        super(undefined, undefined, message || 'Connection error.', undefined);\n        // in some environments the 'cause' property is already declared\n        // @ts-ignore\n        if (cause)\n            this.cause = cause;\n    }\n}\nexport class APIConnectionTimeoutError extends APIConnectionError {\n    constructor({ message } = {}) {\n        super({ message: message ?? 'Request timed out.' });\n    }\n}\nexport class BadRequestError extends APIError {\n}\nexport class AuthenticationError extends APIError {\n}\nexport class PermissionDeniedError extends APIError {\n}\nexport class NotFoundError extends APIError {\n}\nexport class ConflictError extends APIError {\n}\nexport class UnprocessableEntityError extends APIError {\n}\nexport class RateLimitError extends APIError {\n}\nexport class InternalServerError extends APIError {\n}\nexport class LengthFinishReasonError extends OpenAIError {\n    constructor() {\n        super(`Could not parse response content as the length limit was reached`);\n    }\n}\nexport class ContentFilterFinishReasonError extends OpenAIError {\n    constructor() {\n        super(`Could not parse response content as the request was rejected by the content filter`);\n    }\n}\n//# sourceMappingURL=error.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { OpenAIError } from \"../../core/error.mjs\";\n// https://url.spec.whatwg.org/#url-scheme-string\nconst startsWithSchemeRegexp = /^[a-z][a-z0-9+.-]*:/i;\nexport const isAbsoluteURL = (url) => {\n    return startsWithSchemeRegexp.test(url);\n};\n/** Returns an object if the given value isn't an object, otherwise returns as-is */\nexport function maybeObj(x) {\n    if (typeof x !== 'object') {\n        return {};\n    }\n    return x ?? {};\n}\n// https://stackoverflow.com/a/34491287\nexport function isEmptyObj(obj) {\n    if (!obj)\n        return true;\n    for (const _k in obj)\n        return false;\n    return true;\n}\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nexport function hasOwn(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nexport function isObj(obj) {\n    return obj != null && typeof obj === 'object' && !Array.isArray(obj);\n}\nexport const ensurePresent = (value) => {\n    if (value == null) {\n        throw new OpenAIError(`Expected a value to be given but received ${value} instead.`);\n    }\n    return value;\n};\nexport const validatePositiveInteger = (name, n) => {\n    if (typeof n !== 'number' || !Number.isInteger(n)) {\n        throw new OpenAIError(`${name} must be an integer`);\n    }\n    if (n < 0) {\n        throw new OpenAIError(`${name} must be a positive integer`);\n    }\n    return n;\n};\nexport const coerceInteger = (value) => {\n    if (typeof value === 'number')\n        return Math.round(value);\n    if (typeof value === 'string')\n        return parseInt(value, 10);\n    throw new OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nexport const coerceFloat = (value) => {\n    if (typeof value === 'number')\n        return value;\n    if (typeof value === 'string')\n        return parseFloat(value);\n    throw new OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nexport const coerceBoolean = (value) => {\n    if (typeof value === 'boolean')\n        return value;\n    if (typeof value === 'string')\n        return value === 'true';\n    return Boolean(value);\n};\nexport const maybeCoerceInteger = (value) => {\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceInteger(value);\n};\nexport const maybeCoerceFloat = (value) => {\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceFloat(value);\n};\nexport const maybeCoerceBoolean = (value) => {\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceBoolean(value);\n};\nexport const safeJSON = (text) => {\n    try {\n        return JSON.parse(text);\n    }\n    catch (err) {\n        return undefined;\n    }\n};\n//# sourceMappingURL=values.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n//# sourceMappingURL=sleep.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { hasOwn } from \"./values.mjs\";\nconst levelNumbers = {\n    off: 0,\n    error: 200,\n    warn: 300,\n    info: 400,\n    debug: 500,\n};\nexport const parseLogLevel = (maybeLevel, sourceName, client) => {\n    if (!maybeLevel) {\n        return undefined;\n    }\n    if (hasOwn(levelNumbers, maybeLevel)) {\n        return maybeLevel;\n    }\n    loggerFor(client).warn(`${sourceName} was set to ${JSON.stringify(maybeLevel)}, expected one of ${JSON.stringify(Object.keys(levelNumbers))}`);\n    return undefined;\n};\nfunction noop() { }\nfunction makeLogFn(fnLevel, logger, logLevel) {\n    if (!logger || levelNumbers[fnLevel] > levelNumbers[logLevel]) {\n        return noop;\n    }\n    else {\n        // Don't wrap logger functions, we want the stacktrace intact!\n        return logger[fnLevel].bind(logger);\n    }\n}\nconst noopLogger = {\n    error: noop,\n    warn: noop,\n    info: noop,\n    debug: noop,\n};\nlet cachedLoggers = new WeakMap();\nexport function loggerFor(client) {\n    const logger = client.logger;\n    const logLevel = client.logLevel ?? 'off';\n    if (!logger) {\n        return noopLogger;\n    }\n    const cachedLogger = cachedLoggers.get(logger);\n    if (cachedLogger && cachedLogger[0] === logLevel) {\n        return cachedLogger[1];\n    }\n    const levelLogger = {\n        error: makeLogFn('error', logger, logLevel),\n        warn: makeLogFn('warn', logger, logLevel),\n        info: makeLogFn('info', logger, logLevel),\n        debug: makeLogFn('debug', logger, logLevel),\n    };\n    cachedLoggers.set(logger, [logLevel, levelLogger]);\n    return levelLogger;\n}\nexport const formatRequestDetails = (details) => {\n    if (details.options) {\n        details.options = { ...details.options };\n        delete details.options['headers']; // redundant + leaks internals\n    }\n    if (details.headers) {\n        details.headers = Object.fromEntries((details.headers instanceof Headers ? [...details.headers] : Object.entries(details.headers)).map(([name, value]) => [\n            name,\n            (name.toLowerCase() === 'authorization' ||\n                name.toLowerCase() === 'cookie' ||\n                name.toLowerCase() === 'set-cookie') ?\n                '***'\n                : value,\n        ]));\n    }\n    if ('retryOfRequestLogID' in details) {\n        if (details.retryOfRequestLogID) {\n            details.retryOf = details.retryOfRequestLogID;\n        }\n        delete details.retryOfRequestLogID;\n    }\n    return details;\n};\n//# sourceMappingURL=log.mjs.map","export const VERSION = '5.1.1'; // x-release-please-version\n//# sourceMappingURL=version.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { VERSION } from \"../version.mjs\";\nexport const isRunningInBrowser = () => {\n    return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n        // @ts-ignore\n        typeof window.document !== 'undefined' &&\n        // @ts-ignore\n        typeof navigator !== 'undefined');\n};\n/**\n * Note this does not detect 'browser'; for that, use getBrowserInfo().\n */\nfunction getDetectedPlatform() {\n    if (typeof Deno !== 'undefined' && Deno.build != null) {\n        return 'deno';\n    }\n    if (typeof EdgeRuntime !== 'undefined') {\n        return 'edge';\n    }\n    if (Object.prototype.toString.call(typeof globalThis.process !== 'undefined' ? globalThis.process : 0) === '[object process]') {\n        return 'node';\n    }\n    return 'unknown';\n}\nconst getPlatformProperties = () => {\n    const detectedPlatform = getDetectedPlatform();\n    if (detectedPlatform === 'deno') {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': normalizePlatform(Deno.build.os),\n            'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n            'X-Stainless-Runtime': 'deno',\n            'X-Stainless-Runtime-Version': typeof Deno.version === 'string' ? Deno.version : Deno.version?.deno ?? 'unknown',\n        };\n    }\n    if (typeof EdgeRuntime !== 'undefined') {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': 'Unknown',\n            'X-Stainless-Arch': `other:${EdgeRuntime}`,\n            'X-Stainless-Runtime': 'edge',\n            'X-Stainless-Runtime-Version': globalThis.process.version,\n        };\n    }\n    // Check if Node.js\n    if (detectedPlatform === 'node') {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': normalizePlatform(globalThis.process.platform ?? 'unknown'),\n            'X-Stainless-Arch': normalizeArch(globalThis.process.arch ?? 'unknown'),\n            'X-Stainless-Runtime': 'node',\n            'X-Stainless-Runtime-Version': globalThis.process.version ?? 'unknown',\n        };\n    }\n    const browserInfo = getBrowserInfo();\n    if (browserInfo) {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': 'Unknown',\n            'X-Stainless-Arch': 'unknown',\n            'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n            'X-Stainless-Runtime-Version': browserInfo.version,\n        };\n    }\n    // TODO add support for Cloudflare workers, etc.\n    return {\n        'X-Stainless-Lang': 'js',\n        'X-Stainless-Package-Version': VERSION,\n        'X-Stainless-OS': 'Unknown',\n        'X-Stainless-Arch': 'unknown',\n        'X-Stainless-Runtime': 'unknown',\n        'X-Stainless-Runtime-Version': 'unknown',\n    };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n    if (typeof navigator === 'undefined' || !navigator) {\n        return null;\n    }\n    // NOTE: The order matters here!\n    const browserPatterns = [\n        { key: 'edge', pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'ie', pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'ie', pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'chrome', pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'firefox', pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'safari', pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ },\n    ];\n    // Find the FIRST matching browser\n    for (const { key, pattern } of browserPatterns) {\n        const match = pattern.exec(navigator.userAgent);\n        if (match) {\n            const major = match[1] || 0;\n            const minor = match[2] || 0;\n            const patch = match[3] || 0;\n            return { browser: key, version: `${major}.${minor}.${patch}` };\n        }\n    }\n    return null;\n}\nconst normalizeArch = (arch) => {\n    // Node docs:\n    // - https://nodejs.org/api/process.html#processarch\n    // Deno docs:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    if (arch === 'x32')\n        return 'x32';\n    if (arch === 'x86_64' || arch === 'x64')\n        return 'x64';\n    if (arch === 'arm')\n        return 'arm';\n    if (arch === 'aarch64' || arch === 'arm64')\n        return 'arm64';\n    if (arch)\n        return `other:${arch}`;\n    return 'unknown';\n};\nconst normalizePlatform = (platform) => {\n    // Node platforms:\n    // - https://nodejs.org/api/process.html#processplatform\n    // Deno platforms:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    // - https://github.com/denoland/deno/issues/14799\n    platform = platform.toLowerCase();\n    // NOTE: this iOS check is untested and may not work\n    // Node does not work natively on IOS, there is a fork at\n    // https://github.com/nodejs-mobile/nodejs-mobile\n    // however it is unknown at the time of writing how to detect if it is running\n    if (platform.includes('ios'))\n        return 'iOS';\n    if (platform === 'android')\n        return 'Android';\n    if (platform === 'darwin')\n        return 'MacOS';\n    if (platform === 'win32')\n        return 'Windows';\n    if (platform === 'freebsd')\n        return 'FreeBSD';\n    if (platform === 'openbsd')\n        return 'OpenBSD';\n    if (platform === 'linux')\n        return 'Linux';\n    if (platform)\n        return `Other:${platform}`;\n    return 'Unknown';\n};\nlet _platformHeaders;\nexport const getPlatformHeaders = () => {\n    return (_platformHeaders ?? (_platformHeaders = getPlatformProperties()));\n};\n//# sourceMappingURL=detect-platform.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport function getDefaultFetch() {\n    if (typeof fetch !== 'undefined') {\n        return fetch;\n    }\n    throw new Error('`fetch` is not defined as a global; Either pass `fetch` to the client, `new OpenAI({ fetch })` or polyfill the global, `globalThis.fetch = fetch`');\n}\nexport function makeReadableStream(...args) {\n    const ReadableStream = globalThis.ReadableStream;\n    if (typeof ReadableStream === 'undefined') {\n        // Note: All of the platforms / runtimes we officially support already define\n        // `ReadableStream` as a global, so this should only ever be hit on unsupported runtimes.\n        throw new Error('`ReadableStream` is not defined as a global; You will need to polyfill it, `globalThis.ReadableStream = ReadableStream`');\n    }\n    return new ReadableStream(...args);\n}\nexport function ReadableStreamFrom(iterable) {\n    let iter = Symbol.asyncIterator in iterable ? iterable[Symbol.asyncIterator]() : iterable[Symbol.iterator]();\n    return makeReadableStream({\n        start() { },\n        async pull(controller) {\n            const { done, value } = await iter.next();\n            if (done) {\n                controller.close();\n            }\n            else {\n                controller.enqueue(value);\n            }\n        },\n        async cancel() {\n            await iter.return?.();\n        },\n    });\n}\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nexport function ReadableStreamToAsyncIterable(stream) {\n    if (stream[Symbol.asyncIterator])\n        return stream;\n    const reader = stream.getReader();\n    return {\n        async next() {\n            try {\n                const result = await reader.read();\n                if (result?.done)\n                    reader.releaseLock(); // release lock when stream becomes closed\n                return result;\n            }\n            catch (e) {\n                reader.releaseLock(); // release lock when stream becomes errored\n                throw e;\n            }\n        },\n        async return() {\n            const cancelPromise = reader.cancel();\n            reader.releaseLock();\n            await cancelPromise;\n            return { done: true, value: undefined };\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n    };\n}\n/**\n * Cancels a ReadableStream we don't need to consume.\n * See https://undici.nodejs.org/#/?id=garbage-collection\n */\nexport async function CancelReadableStream(stream) {\n    if (stream === null || typeof stream !== 'object')\n        return;\n    if (stream[Symbol.asyncIterator]) {\n        await stream[Symbol.asyncIterator]().return?.();\n        return;\n    }\n    const reader = stream.getReader();\n    const cancelPromise = reader.cancel();\n    reader.releaseLock();\n    await cancelPromise;\n}\n//# sourceMappingURL=shims.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport const FallbackEncoder = ({ headers, body }) => {\n    return {\n        bodyHeaders: {\n            'content-type': 'application/json',\n        },\n        body: JSON.stringify(body),\n    };\n};\n//# sourceMappingURL=request-options.mjs.map","export const default_format = 'RFC3986';\nexport const formatters = {\n    RFC1738: (v) => String(v).replace(/%20/g, '+'),\n    RFC3986: (v) => String(v),\n};\nexport const RFC1738 = 'RFC1738';\nexport const RFC3986 = 'RFC3986';\n//# sourceMappingURL=formats.mjs.map","import { RFC1738 } from \"./formats.mjs\";\nconst has = Object.prototype.hasOwnProperty;\nconst is_array = Array.isArray;\nconst hex_table = (() => {\n    const array = [];\n    for (let i = 0; i < 256; ++i) {\n        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n    }\n    return array;\n})();\nfunction compact_queue(queue) {\n    while (queue.length > 1) {\n        const item = queue.pop();\n        if (!item)\n            continue;\n        const obj = item.obj[item.prop];\n        if (is_array(obj)) {\n            const compacted = [];\n            for (let j = 0; j < obj.length; ++j) {\n                if (typeof obj[j] !== 'undefined') {\n                    compacted.push(obj[j]);\n                }\n            }\n            // @ts-ignore\n            item.obj[item.prop] = compacted;\n        }\n    }\n}\nfunction array_to_object(source, options) {\n    const obj = options && options.plainObjects ? Object.create(null) : {};\n    for (let i = 0; i < source.length; ++i) {\n        if (typeof source[i] !== 'undefined') {\n            obj[i] = source[i];\n        }\n    }\n    return obj;\n}\nexport function merge(target, source, options = {}) {\n    if (!source) {\n        return target;\n    }\n    if (typeof source !== 'object') {\n        if (is_array(target)) {\n            target.push(source);\n        }\n        else if (target && typeof target === 'object') {\n            if ((options && (options.plainObjects || options.allowPrototypes)) ||\n                !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        }\n        else {\n            return [target, source];\n        }\n        return target;\n    }\n    if (!target || typeof target !== 'object') {\n        return [target].concat(source);\n    }\n    let mergeTarget = target;\n    if (is_array(target) && !is_array(source)) {\n        // @ts-ignore\n        mergeTarget = array_to_object(target, options);\n    }\n    if (is_array(target) && is_array(source)) {\n        source.forEach(function (item, i) {\n            if (has.call(target, i)) {\n                const targetItem = target[i];\n                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n                    target[i] = merge(targetItem, item, options);\n                }\n                else {\n                    target.push(item);\n                }\n            }\n            else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n    return Object.keys(source).reduce(function (acc, key) {\n        const value = source[key];\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        }\n        else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n}\nexport function assign_single_source(target, source) {\n    return Object.keys(source).reduce(function (acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n}\nexport function decode(str, _, charset) {\n    const strWithoutPlus = str.replace(/\\+/g, ' ');\n    if (charset === 'iso-8859-1') {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    }\n    catch (e) {\n        return strWithoutPlus;\n    }\n}\nconst limit = 1024;\nexport const encode = (str, _defaultEncoder, charset, _kind, format) => {\n    // This code was originally written by Brian White for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n    let string = str;\n    if (typeof str === 'symbol') {\n        string = Symbol.prototype.toString.call(str);\n    }\n    else if (typeof str !== 'string') {\n        string = String(str);\n    }\n    if (charset === 'iso-8859-1') {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n        });\n    }\n    let out = '';\n    for (let j = 0; j < string.length; j += limit) {\n        const segment = string.length >= limit ? string.slice(j, j + limit) : string;\n        const arr = [];\n        for (let i = 0; i < segment.length; ++i) {\n            let c = segment.charCodeAt(i);\n            if (c === 0x2d || // -\n                c === 0x2e || // .\n                c === 0x5f || // _\n                c === 0x7e || // ~\n                (c >= 0x30 && c <= 0x39) || // 0-9\n                (c >= 0x41 && c <= 0x5a) || // a-z\n                (c >= 0x61 && c <= 0x7a) || // A-Z\n                (format === RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n            ) {\n                arr[arr.length] = segment.charAt(i);\n                continue;\n            }\n            if (c < 0x80) {\n                arr[arr.length] = hex_table[c];\n                continue;\n            }\n            if (c < 0x800) {\n                arr[arr.length] = hex_table[0xc0 | (c >> 6)] + hex_table[0x80 | (c & 0x3f)];\n                continue;\n            }\n            if (c < 0xd800 || c >= 0xe000) {\n                arr[arr.length] =\n                    hex_table[0xe0 | (c >> 12)] + hex_table[0x80 | ((c >> 6) & 0x3f)] + hex_table[0x80 | (c & 0x3f)];\n                continue;\n            }\n            i += 1;\n            c = 0x10000 + (((c & 0x3ff) << 10) | (segment.charCodeAt(i) & 0x3ff));\n            arr[arr.length] =\n                hex_table[0xf0 | (c >> 18)] +\n                    hex_table[0x80 | ((c >> 12) & 0x3f)] +\n                    hex_table[0x80 | ((c >> 6) & 0x3f)] +\n                    hex_table[0x80 | (c & 0x3f)];\n        }\n        out += arr.join('');\n    }\n    return out;\n};\nexport function compact(value) {\n    const queue = [{ obj: { o: value }, prop: 'o' }];\n    const refs = [];\n    for (let i = 0; i < queue.length; ++i) {\n        const item = queue[i];\n        // @ts-ignore\n        const obj = item.obj[item.prop];\n        const keys = Object.keys(obj);\n        for (let j = 0; j < keys.length; ++j) {\n            const key = keys[j];\n            const val = obj[key];\n            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n                queue.push({ obj: obj, prop: key });\n                refs.push(val);\n            }\n        }\n    }\n    compact_queue(queue);\n    return value;\n}\nexport function is_regexp(obj) {\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\nexport function is_buffer(obj) {\n    if (!obj || typeof obj !== 'object') {\n        return false;\n    }\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n}\nexport function combine(a, b) {\n    return [].concat(a, b);\n}\nexport function maybe_map(val, fn) {\n    if (is_array(val)) {\n        const mapped = [];\n        for (let i = 0; i < val.length; i += 1) {\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n}\n//# sourceMappingURL=utils.mjs.map","import { encode, is_buffer, maybe_map } from \"./utils.mjs\";\nimport { default_format, formatters } from \"./formats.mjs\";\nconst has = Object.prototype.hasOwnProperty;\nconst array_prefix_generators = {\n    brackets(prefix) {\n        return String(prefix) + '[]';\n    },\n    comma: 'comma',\n    indices(prefix, key) {\n        return String(prefix) + '[' + key + ']';\n    },\n    repeat(prefix) {\n        return String(prefix);\n    },\n};\nconst is_array = Array.isArray;\nconst push = Array.prototype.push;\nconst push_to_array = function (arr, value_or_array) {\n    push.apply(arr, is_array(value_or_array) ? value_or_array : [value_or_array]);\n};\nconst to_ISO = Date.prototype.toISOString;\nconst defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    allowEmptyArrays: false,\n    arrayFormat: 'indices',\n    charset: 'utf-8',\n    charsetSentinel: false,\n    delimiter: '&',\n    encode: true,\n    encodeDotInKeys: false,\n    encoder: encode,\n    encodeValuesOnly: false,\n    format: default_format,\n    formatter: formatters[default_format],\n    /** @deprecated */\n    indices: false,\n    serializeDate(date) {\n        return to_ISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false,\n};\nfunction is_non_nullish_primitive(v) {\n    return (typeof v === 'string' ||\n        typeof v === 'number' ||\n        typeof v === 'boolean' ||\n        typeof v === 'symbol' ||\n        typeof v === 'bigint');\n}\nconst sentinel = {};\nfunction inner_stringify(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {\n    let obj = object;\n    let tmp_sc = sideChannel;\n    let step = 0;\n    let find_flag = false;\n    while ((tmp_sc = tmp_sc.get(sentinel)) !== void undefined && !find_flag) {\n        // Where object last appeared in the ref tree\n        const pos = tmp_sc.get(object);\n        step += 1;\n        if (typeof pos !== 'undefined') {\n            if (pos === step) {\n                throw new RangeError('Cyclic object value');\n            }\n            else {\n                find_flag = true; // Break while\n            }\n        }\n        if (typeof tmp_sc.get(sentinel) === 'undefined') {\n            step = 0;\n        }\n    }\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    }\n    else if (obj instanceof Date) {\n        obj = serializeDate?.(obj);\n    }\n    else if (generateArrayPrefix === 'comma' && is_array(obj)) {\n        obj = maybe_map(obj, function (value) {\n            if (value instanceof Date) {\n                return serializeDate?.(value);\n            }\n            return value;\n        });\n    }\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ?\n                // @ts-expect-error\n                encoder(prefix, defaults.encoder, charset, 'key', format)\n                : prefix;\n        }\n        obj = '';\n    }\n    if (is_non_nullish_primitive(obj) || is_buffer(obj)) {\n        if (encoder) {\n            const key_value = encodeValuesOnly ? prefix\n                // @ts-expect-error\n                : encoder(prefix, defaults.encoder, charset, 'key', format);\n            return [\n                formatter?.(key_value) +\n                    '=' +\n                    // @ts-expect-error\n                    formatter?.(encoder(obj, defaults.encoder, charset, 'value', format)),\n            ];\n        }\n        return [formatter?.(prefix) + '=' + formatter?.(String(obj))];\n    }\n    const values = [];\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n    let obj_keys;\n    if (generateArrayPrefix === 'comma' && is_array(obj)) {\n        // we need to join elements in\n        if (encodeValuesOnly && encoder) {\n            // @ts-expect-error values only\n            obj = maybe_map(obj, encoder);\n        }\n        obj_keys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\n    }\n    else if (is_array(filter)) {\n        obj_keys = filter;\n    }\n    else {\n        const keys = Object.keys(obj);\n        obj_keys = sort ? keys.sort(sort) : keys;\n    }\n    const encoded_prefix = encodeDotInKeys ? String(prefix).replace(/\\./g, '%2E') : String(prefix);\n    const adjusted_prefix = commaRoundTrip && is_array(obj) && obj.length === 1 ? encoded_prefix + '[]' : encoded_prefix;\n    if (allowEmptyArrays && is_array(obj) && obj.length === 0) {\n        return adjusted_prefix + '[]';\n    }\n    for (let j = 0; j < obj_keys.length; ++j) {\n        const key = obj_keys[j];\n        const value = \n        // @ts-ignore\n        typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];\n        if (skipNulls && value === null) {\n            continue;\n        }\n        // @ts-ignore\n        const encoded_key = allowDots && encodeDotInKeys ? key.replace(/\\./g, '%2E') : key;\n        const key_prefix = is_array(obj) ?\n            typeof generateArrayPrefix === 'function' ?\n                generateArrayPrefix(adjusted_prefix, encoded_key)\n                : adjusted_prefix\n            : adjusted_prefix + (allowDots ? '.' + encoded_key : '[' + encoded_key + ']');\n        sideChannel.set(object, step);\n        const valueSideChannel = new WeakMap();\n        valueSideChannel.set(sentinel, sideChannel);\n        push_to_array(values, inner_stringify(value, key_prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, \n        // @ts-ignore\n        generateArrayPrefix === 'comma' && encodeValuesOnly && is_array(obj) ? null : encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));\n    }\n    return values;\n}\nfunction normalize_stringify_options(opts = defaults) {\n    if (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n        throw new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n    }\n    if (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {\n        throw new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');\n    }\n    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n        throw new TypeError('Encoder has to be a function.');\n    }\n    const charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n    let format = default_format;\n    if (typeof opts.format !== 'undefined') {\n        if (!has.call(formatters, opts.format)) {\n            throw new TypeError('Unknown format option provided.');\n        }\n        format = opts.format;\n    }\n    const formatter = formatters[format];\n    let filter = defaults.filter;\n    if (typeof opts.filter === 'function' || is_array(opts.filter)) {\n        filter = opts.filter;\n    }\n    let arrayFormat;\n    if (opts.arrayFormat && opts.arrayFormat in array_prefix_generators) {\n        arrayFormat = opts.arrayFormat;\n    }\n    else if ('indices' in opts) {\n        arrayFormat = opts.indices ? 'indices' : 'repeat';\n    }\n    else {\n        arrayFormat = defaults.arrayFormat;\n    }\n    if ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n        throw new TypeError('`commaRoundTrip` must be a boolean, or absent');\n    }\n    const allowDots = typeof opts.allowDots === 'undefined' ?\n        !!opts.encodeDotInKeys === true ?\n            true\n            : defaults.allowDots\n        : !!opts.allowDots;\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        // @ts-ignore\n        allowDots: allowDots,\n        allowEmptyArrays: typeof opts.allowEmptyArrays === 'boolean' ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,\n        arrayFormat: arrayFormat,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        commaRoundTrip: !!opts.commaRoundTrip,\n        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n        encodeDotInKeys: typeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n        // @ts-ignore\n        sort: typeof opts.sort === 'function' ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling,\n    };\n}\nexport function stringify(object, opts = {}) {\n    let obj = object;\n    const options = normalize_stringify_options(opts);\n    let obj_keys;\n    let filter;\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    }\n    else if (is_array(options.filter)) {\n        filter = options.filter;\n        obj_keys = filter;\n    }\n    const keys = [];\n    if (typeof obj !== 'object' || obj === null) {\n        return '';\n    }\n    const generateArrayPrefix = array_prefix_generators[options.arrayFormat];\n    const commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;\n    if (!obj_keys) {\n        obj_keys = Object.keys(obj);\n    }\n    if (options.sort) {\n        obj_keys.sort(options.sort);\n    }\n    const sideChannel = new WeakMap();\n    for (let i = 0; i < obj_keys.length; ++i) {\n        const key = obj_keys[i];\n        if (options.skipNulls && obj[key] === null) {\n            continue;\n        }\n        push_to_array(keys, inner_stringify(obj[key], key, \n        // @ts-expect-error\n        generateArrayPrefix, commaRoundTrip, options.allowEmptyArrays, options.strictNullHandling, options.skipNulls, options.encodeDotInKeys, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));\n    }\n    const joined = keys.join(options.delimiter);\n    let prefix = options.addQueryPrefix === true ? '?' : '';\n    if (options.charsetSentinel) {\n        if (options.charset === 'iso-8859-1') {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += 'utf8=%26%2310003%3B&';\n        }\n        else {\n            // encodeURIComponent('✓')\n            prefix += 'utf8=%E2%9C%93&';\n        }\n    }\n    return joined.length > 0 ? prefix + joined : '';\n}\n//# sourceMappingURL=stringify.mjs.map","export function concatBytes(buffers) {\n    let length = 0;\n    for (const buffer of buffers) {\n        length += buffer.length;\n    }\n    const output = new Uint8Array(length);\n    let index = 0;\n    for (const buffer of buffers) {\n        output.set(buffer, index);\n        index += buffer.length;\n    }\n    return output;\n}\nlet encodeUTF8_;\nexport function encodeUTF8(str) {\n    let encoder;\n    return (encodeUTF8_ ??\n        ((encoder = new globalThis.TextEncoder()), (encodeUTF8_ = encoder.encode.bind(encoder))))(str);\n}\nlet decodeUTF8_;\nexport function decodeUTF8(bytes) {\n    let decoder;\n    return (decodeUTF8_ ??\n        ((decoder = new globalThis.TextDecoder()), (decodeUTF8_ = decoder.decode.bind(decoder))))(bytes);\n}\n//# sourceMappingURL=bytes.mjs.map","var _LineDecoder_buffer, _LineDecoder_carriageReturnIndex;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"../tslib.mjs\";\nimport { concatBytes, decodeUTF8, encodeUTF8 } from \"../utils/bytes.mjs\";\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nexport class LineDecoder {\n    constructor() {\n        _LineDecoder_buffer.set(this, void 0);\n        _LineDecoder_carriageReturnIndex.set(this, void 0);\n        __classPrivateFieldSet(this, _LineDecoder_buffer, new Uint8Array(), \"f\");\n        __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n    }\n    decode(chunk) {\n        if (chunk == null) {\n            return [];\n        }\n        const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk)\n            : typeof chunk === 'string' ? encodeUTF8(chunk)\n                : chunk;\n        __classPrivateFieldSet(this, _LineDecoder_buffer, concatBytes([__classPrivateFieldGet(this, _LineDecoder_buffer, \"f\"), binaryChunk]), \"f\");\n        const lines = [];\n        let patternIndex;\n        while ((patternIndex = findNewlineIndex(__classPrivateFieldGet(this, _LineDecoder_buffer, \"f\"), __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\"))) != null) {\n            if (patternIndex.carriage && __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") == null) {\n                // skip until we either get a corresponding `\\n`, a new `\\r` or nothing\n                __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, patternIndex.index, \"f\");\n                continue;\n            }\n            // we got double \\r or \\rtext\\n\n            if (__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") != null &&\n                (patternIndex.index !== __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") + 1 || patternIndex.carriage)) {\n                lines.push(decodeUTF8(__classPrivateFieldGet(this, _LineDecoder_buffer, \"f\").subarray(0, __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") - 1)));\n                __classPrivateFieldSet(this, _LineDecoder_buffer, __classPrivateFieldGet(this, _LineDecoder_buffer, \"f\").subarray(__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\")), \"f\");\n                __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n                continue;\n            }\n            const endIndex = __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, \"f\") !== null ? patternIndex.preceding - 1 : patternIndex.preceding;\n            const line = decodeUTF8(__classPrivateFieldGet(this, _LineDecoder_buffer, \"f\").subarray(0, endIndex));\n            lines.push(line);\n            __classPrivateFieldSet(this, _LineDecoder_buffer, __classPrivateFieldGet(this, _LineDecoder_buffer, \"f\").subarray(patternIndex.index), \"f\");\n            __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, \"f\");\n        }\n        return lines;\n    }\n    flush() {\n        if (!__classPrivateFieldGet(this, _LineDecoder_buffer, \"f\").length) {\n            return [];\n        }\n        return this.decode('\\n');\n    }\n}\n_LineDecoder_buffer = new WeakMap(), _LineDecoder_carriageReturnIndex = new WeakMap();\n// prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set(['\\n', '\\r']);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r]/g;\n/**\n * This function searches the buffer for the end patterns, (\\r or \\n)\n * and returns an object with the index preceding the matched newline and the\n * index after the newline char. `null` is returned if no new line is found.\n *\n * ```ts\n * findNewLineIndex('abc\\ndef') -> { preceding: 2, index: 3 }\n * ```\n */\nfunction findNewlineIndex(buffer, startIndex) {\n    const newline = 0x0a; // \\n\n    const carriage = 0x0d; // \\r\n    for (let i = startIndex ?? 0; i < buffer.length; i++) {\n        if (buffer[i] === newline) {\n            return { preceding: i, index: i + 1, carriage: false };\n        }\n        if (buffer[i] === carriage) {\n            return { preceding: i, index: i + 1, carriage: true };\n        }\n    }\n    return null;\n}\nexport function findDoubleNewlineIndex(buffer) {\n    // This function searches the buffer for the end patterns (\\r\\r, \\n\\n, \\r\\n\\r\\n)\n    // and returns the index right after the first occurrence of any pattern,\n    // or -1 if none of the patterns are found.\n    const newline = 0x0a; // \\n\n    const carriage = 0x0d; // \\r\n    for (let i = 0; i < buffer.length - 1; i++) {\n        if (buffer[i] === newline && buffer[i + 1] === newline) {\n            // \\n\\n\n            return i + 2;\n        }\n        if (buffer[i] === carriage && buffer[i + 1] === carriage) {\n            // \\r\\r\n            return i + 2;\n        }\n        if (buffer[i] === carriage &&\n            buffer[i + 1] === newline &&\n            i + 3 < buffer.length &&\n            buffer[i + 2] === carriage &&\n            buffer[i + 3] === newline) {\n            // \\r\\n\\r\\n\n            return i + 4;\n        }\n    }\n    return -1;\n}\n//# sourceMappingURL=line.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _APIPromise_client;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"../internal/tslib.mjs\";\nimport { defaultParseResponse, addRequestID, } from \"../internal/parse.mjs\";\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class APIPromise extends Promise {\n    constructor(client, responsePromise, parseResponse = defaultParseResponse) {\n        super((resolve) => {\n            // this is maybe a bit weird but this has to be a no-op to not implicitly\n            // parse the response body; instead .then, .catch, .finally are overridden\n            // to parse the response\n            resolve(null);\n        });\n        this.responsePromise = responsePromise;\n        this.parseResponse = parseResponse;\n        _APIPromise_client.set(this, void 0);\n        __classPrivateFieldSet(this, _APIPromise_client, client, \"f\");\n    }\n    _thenUnwrap(transform) {\n        return new APIPromise(__classPrivateFieldGet(this, _APIPromise_client, \"f\"), this.responsePromise, async (client, props) => addRequestID(transform(await this.parseResponse(client, props), props), props.response));\n    }\n    /**\n     * Gets the raw `Response` instance instead of parsing the response\n     * data.\n     *\n     * If you want to parse the response body but still get the `Response`\n     * instance, you can use {@link withResponse()}.\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` or add `\"lib\": [\"DOM\"]`\n     * to your `tsconfig.json`.\n     */\n    asResponse() {\n        return this.responsePromise.then((p) => p.response);\n    }\n    /**\n     * Gets the parsed response data, the raw `Response` instance and the ID of the request,\n     * returned via the X-Request-ID header which is useful for debugging requests and reporting\n     * issues to OpenAI.\n     *\n     * If you just want to get the raw `Response` instance without parsing it,\n     * you can use {@link asResponse()}.\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` or add `\"lib\": [\"DOM\"]`\n     * to your `tsconfig.json`.\n     */\n    async withResponse() {\n        const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n        return { data, response, request_id: response.headers.get('x-request-id') };\n    }\n    parse() {\n        if (!this.parsedPromise) {\n            this.parsedPromise = this.responsePromise.then((data) => this.parseResponse(__classPrivateFieldGet(this, _APIPromise_client, \"f\"), data));\n        }\n        return this.parsedPromise;\n    }\n    then(onfulfilled, onrejected) {\n        return this.parse().then(onfulfilled, onrejected);\n    }\n    catch(onrejected) {\n        return this.parse().catch(onrejected);\n    }\n    finally(onfinally) {\n        return this.parse().finally(onfinally);\n    }\n}\n_APIPromise_client = new WeakMap();\n//# sourceMappingURL=api-promise.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _AbstractPage_client;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"../internal/tslib.mjs\";\nimport { OpenAIError } from \"./error.mjs\";\nimport { defaultParseResponse } from \"../internal/parse.mjs\";\nimport { APIPromise } from \"./api-promise.mjs\";\nimport { maybeObj } from \"../internal/utils/values.mjs\";\nexport class AbstractPage {\n    constructor(client, response, body, options) {\n        _AbstractPage_client.set(this, void 0);\n        __classPrivateFieldSet(this, _AbstractPage_client, client, \"f\");\n        this.options = options;\n        this.response = response;\n        this.body = body;\n    }\n    hasNextPage() {\n        const items = this.getPaginatedItems();\n        if (!items.length)\n            return false;\n        return this.nextPageRequestOptions() != null;\n    }\n    async getNextPage() {\n        const nextOptions = this.nextPageRequestOptions();\n        if (!nextOptions) {\n            throw new OpenAIError('No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.');\n        }\n        return await __classPrivateFieldGet(this, _AbstractPage_client, \"f\").requestAPIList(this.constructor, nextOptions);\n    }\n    async *iterPages() {\n        let page = this;\n        yield page;\n        while (page.hasNextPage()) {\n            page = await page.getNextPage();\n            yield page;\n        }\n    }\n    async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\n        for await (const page of this.iterPages()) {\n            for (const item of page.getPaginatedItems()) {\n                yield item;\n            }\n        }\n    }\n}\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nexport class PagePromise extends APIPromise {\n    constructor(client, request, Page) {\n        super(client, request, async (client, props) => new Page(client, props.response, await defaultParseResponse(client, props), props.options));\n    }\n    /**\n     * Allow auto-paginating iteration on an unawaited list call, eg:\n     *\n     *    for await (const item of client.items.list()) {\n     *      console.log(item)\n     *    }\n     */\n    async *[Symbol.asyncIterator]() {\n        const page = await this;\n        for await (const item of page) {\n            yield item;\n        }\n    }\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */\nexport class Page extends AbstractPage {\n    constructor(client, response, body, options) {\n        super(client, response, body, options);\n        this.data = body.data || [];\n        this.object = body.object;\n    }\n    getPaginatedItems() {\n        return this.data ?? [];\n    }\n    nextPageRequestOptions() {\n        return null;\n    }\n}\nexport class CursorPage extends AbstractPage {\n    constructor(client, response, body, options) {\n        super(client, response, body, options);\n        this.data = body.data || [];\n        this.has_more = body.has_more || false;\n    }\n    getPaginatedItems() {\n        return this.data ?? [];\n    }\n    hasNextPage() {\n        if (this.has_more === false) {\n            return false;\n        }\n        return super.hasNextPage();\n    }\n    nextPageRequestOptions() {\n        const data = this.getPaginatedItems();\n        const id = data[data.length - 1]?.id;\n        if (!id) {\n            return null;\n        }\n        return {\n            ...this.options,\n            query: {\n                ...maybeObj(this.options.query),\n                after: id,\n            },\n        };\n    }\n}\n//# sourceMappingURL=pagination.mjs.map","import { OpenAIError } from \"./error.mjs\";\nimport { makeReadableStream } from \"../internal/shims.mjs\";\nimport { findDoubleNewlineIndex, LineDecoder } from \"../internal/decoders/line.mjs\";\nimport { ReadableStreamToAsyncIterable } from \"../internal/shims.mjs\";\nimport { isAbortError } from \"../internal/errors.mjs\";\nimport { encodeUTF8 } from \"../internal/utils/bytes.mjs\";\nimport { APIError } from \"./error.mjs\";\nexport class Stream {\n    constructor(iterator, controller) {\n        this.iterator = iterator;\n        this.controller = controller;\n    }\n    static fromSSEResponse(response, controller) {\n        let consumed = false;\n        async function* iterator() {\n            if (consumed) {\n                throw new OpenAIError('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const sse of _iterSSEMessages(response, controller)) {\n                    if (done)\n                        continue;\n                    if (sse.data.startsWith('[DONE]')) {\n                        done = true;\n                        continue;\n                    }\n                    if (sse.event === null ||\n                        sse.event.startsWith('response.') ||\n                        sse.event.startsWith('transcript.')) {\n                        let data;\n                        try {\n                            data = JSON.parse(sse.data);\n                        }\n                        catch (e) {\n                            console.error(`Could not parse message into JSON:`, sse.data);\n                            console.error(`From chunk:`, sse.raw);\n                            throw e;\n                        }\n                        if (data && data.error) {\n                            throw new APIError(undefined, data.error, undefined, response.headers);\n                        }\n                        yield data;\n                    }\n                    else {\n                        let data;\n                        try {\n                            data = JSON.parse(sse.data);\n                        }\n                        catch (e) {\n                            console.error(`Could not parse message into JSON:`, sse.data);\n                            console.error(`From chunk:`, sse.raw);\n                            throw e;\n                        }\n                        // TODO: Is this where the error should be thrown?\n                        if (sse.event == 'error') {\n                            throw new APIError(undefined, data.error, data.message, undefined);\n                        }\n                        yield { event: sse.event, data: data };\n                    }\n                }\n                done = true;\n            }\n            catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if (isAbortError(e))\n                    return;\n                throw e;\n            }\n            finally {\n                // If the user `break`s, abort the ongoing request.\n                if (!done)\n                    controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    /**\n     * Generates a Stream from a newline-separated ReadableStream\n     * where each item is a JSON value.\n     */\n    static fromReadableStream(readableStream, controller) {\n        let consumed = false;\n        async function* iterLines() {\n            const lineDecoder = new LineDecoder();\n            const iter = ReadableStreamToAsyncIterable(readableStream);\n            for await (const chunk of iter) {\n                for (const line of lineDecoder.decode(chunk)) {\n                    yield line;\n                }\n            }\n            for (const line of lineDecoder.flush()) {\n                yield line;\n            }\n        }\n        async function* iterator() {\n            if (consumed) {\n                throw new OpenAIError('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const line of iterLines()) {\n                    if (done)\n                        continue;\n                    if (line)\n                        yield JSON.parse(line);\n                }\n                done = true;\n            }\n            catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if (isAbortError(e))\n                    return;\n                throw e;\n            }\n            finally {\n                // If the user `break`s, abort the ongoing request.\n                if (!done)\n                    controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    [Symbol.asyncIterator]() {\n        return this.iterator();\n    }\n    /**\n     * Splits the stream into two streams which can be\n     * independently read from at different speeds.\n     */\n    tee() {\n        const left = [];\n        const right = [];\n        const iterator = this.iterator();\n        const teeIterator = (queue) => {\n            return {\n                next: () => {\n                    if (queue.length === 0) {\n                        const result = iterator.next();\n                        left.push(result);\n                        right.push(result);\n                    }\n                    return queue.shift();\n                },\n            };\n        };\n        return [\n            new Stream(() => teeIterator(left), this.controller),\n            new Stream(() => teeIterator(right), this.controller),\n        ];\n    }\n    /**\n     * Converts this stream to a newline-separated ReadableStream of\n     * JSON stringified values in the stream\n     * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n     */\n    toReadableStream() {\n        const self = this;\n        let iter;\n        return makeReadableStream({\n            async start() {\n                iter = self[Symbol.asyncIterator]();\n            },\n            async pull(ctrl) {\n                try {\n                    const { value, done } = await iter.next();\n                    if (done)\n                        return ctrl.close();\n                    const bytes = encodeUTF8(JSON.stringify(value) + '\\n');\n                    ctrl.enqueue(bytes);\n                }\n                catch (err) {\n                    ctrl.error(err);\n                }\n            },\n            async cancel() {\n                await iter.return?.();\n            },\n        });\n    }\n}\nexport async function* _iterSSEMessages(response, controller) {\n    if (!response.body) {\n        controller.abort();\n        if (typeof globalThis.navigator !== 'undefined' &&\n            globalThis.navigator.product === 'ReactNative') {\n            throw new OpenAIError(`The default react-native fetch implementation does not support streaming. Please use expo/fetch: https://docs.expo.dev/versions/latest/sdk/expo/#expofetch-api`);\n        }\n        throw new OpenAIError(`Attempted to iterate over a response with no body`);\n    }\n    const sseDecoder = new SSEDecoder();\n    const lineDecoder = new LineDecoder();\n    const iter = ReadableStreamToAsyncIterable(response.body);\n    for await (const sseChunk of iterSSEChunks(iter)) {\n        for (const line of lineDecoder.decode(sseChunk)) {\n            const sse = sseDecoder.decode(line);\n            if (sse)\n                yield sse;\n        }\n    }\n    for (const line of lineDecoder.flush()) {\n        const sse = sseDecoder.decode(line);\n        if (sse)\n            yield sse;\n    }\n}\n/**\n * Given an async iterable iterator, iterates over it and yields full\n * SSE chunks, i.e. yields when a double new-line is encountered.\n */\nasync function* iterSSEChunks(iterator) {\n    let data = new Uint8Array();\n    for await (const chunk of iterator) {\n        if (chunk == null) {\n            continue;\n        }\n        const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk)\n            : typeof chunk === 'string' ? encodeUTF8(chunk)\n                : chunk;\n        let newData = new Uint8Array(data.length + binaryChunk.length);\n        newData.set(data);\n        newData.set(binaryChunk, data.length);\n        data = newData;\n        let patternIndex;\n        while ((patternIndex = findDoubleNewlineIndex(data)) !== -1) {\n            yield data.slice(0, patternIndex);\n            data = data.slice(patternIndex);\n        }\n    }\n    if (data.length > 0) {\n        yield data;\n    }\n}\nclass SSEDecoder {\n    constructor() {\n        this.event = null;\n        this.data = [];\n        this.chunks = [];\n    }\n    decode(line) {\n        if (line.endsWith('\\r')) {\n            line = line.substring(0, line.length - 1);\n        }\n        if (!line) {\n            // empty line and we didn't previously encounter any messages\n            if (!this.event && !this.data.length)\n                return null;\n            const sse = {\n                event: this.event,\n                data: this.data.join('\\n'),\n                raw: this.chunks,\n            };\n            this.event = null;\n            this.data = [];\n            this.chunks = [];\n            return sse;\n        }\n        this.chunks.push(line);\n        if (line.startsWith(':')) {\n            return null;\n        }\n        let [fieldname, _, value] = partition(line, ':');\n        if (value.startsWith(' ')) {\n            value = value.substring(1);\n        }\n        if (fieldname === 'event') {\n            this.event = value;\n        }\n        else if (fieldname === 'data') {\n            this.data.push(value);\n        }\n        return null;\n    }\n}\nfunction partition(str, delimiter) {\n    const index = str.indexOf(delimiter);\n    if (index !== -1) {\n        return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n    }\n    return [str, '', ''];\n}\n//# sourceMappingURL=streaming.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { Stream } from \"../core/streaming.mjs\";\nimport { formatRequestDetails, loggerFor } from \"./utils/log.mjs\";\nexport async function defaultParseResponse(client, props) {\n    const { response, requestLogID, retryOfRequestLogID, startTime } = props;\n    const body = await (async () => {\n        if (props.options.stream) {\n            loggerFor(client).debug('response', response.status, response.url, response.headers, response.body);\n            // Note: there is an invariant here that isn't represented in the type system\n            // that if you set `stream: true` the response type must also be `Stream<T>`\n            if (props.options.__streamClass) {\n                return props.options.__streamClass.fromSSEResponse(response, props.controller);\n            }\n            return Stream.fromSSEResponse(response, props.controller);\n        }\n        // fetch refuses to read the body when the status code is 204.\n        if (response.status === 204) {\n            return null;\n        }\n        if (props.options.__binaryResponse) {\n            return response;\n        }\n        const contentType = response.headers.get('content-type');\n        const mediaType = contentType?.split(';')[0]?.trim();\n        const isJSON = mediaType?.includes('application/json') || mediaType?.endsWith('+json');\n        if (isJSON) {\n            const json = await response.json();\n            return addRequestID(json, response);\n        }\n        const text = await response.text();\n        return text;\n    })();\n    loggerFor(client).debug(`[${requestLogID}] response parsed`, formatRequestDetails({\n        retryOfRequestLogID,\n        url: response.url,\n        status: response.status,\n        body,\n        durationMs: Date.now() - startTime,\n    }));\n    return body;\n}\nexport function addRequestID(value, response) {\n    if (!value || typeof value !== 'object' || Array.isArray(value)) {\n        return value;\n    }\n    return Object.defineProperty(value, '_request_id', {\n        value: response.headers.get('x-request-id'),\n        enumerable: false,\n    });\n}\n//# sourceMappingURL=parse.mjs.map","import { ReadableStreamFrom } from \"./shims.mjs\";\nexport const checkFileSupport = () => {\n    if (typeof File === 'undefined') {\n        const { process } = globalThis;\n        const isOldNode = typeof process?.versions?.node === 'string' && parseInt(process.versions.node.split('.')) < 20;\n        throw new Error('`File` is not defined as a global, which is required for file uploads.' +\n            (isOldNode ?\n                \" Update to Node 20 LTS or newer, or set `globalThis.File` to `import('node:buffer').File`.\"\n                : ''));\n    }\n};\n/**\n * Construct a `File` instance. This is used to ensure a helpful error is thrown\n * for environments that don't define a global `File` yet.\n */\nexport function makeFile(fileBits, fileName, options) {\n    checkFileSupport();\n    return new File(fileBits, fileName ?? 'unknown_file', options);\n}\nexport function getName(value) {\n    return (((typeof value === 'object' &&\n        value !== null &&\n        (('name' in value && value.name && String(value.name)) ||\n            ('url' in value && value.url && String(value.url)) ||\n            ('filename' in value && value.filename && String(value.filename)) ||\n            ('path' in value && value.path && String(value.path)))) ||\n        '')\n        .split(/[\\\\/]/)\n        .pop() || undefined);\n}\nexport const isAsyncIterable = (value) => value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nexport const maybeMultipartFormRequestOptions = async (opts, fetch) => {\n    if (!hasUploadableValue(opts.body))\n        return opts;\n    return { ...opts, body: await createForm(opts.body, fetch) };\n};\nexport const multipartFormRequestOptions = async (opts, fetch) => {\n    return { ...opts, body: await createForm(opts.body, fetch) };\n};\nconst supportsFormDataMap = new WeakMap();\n/**\n * node-fetch doesn't support the global FormData object in recent node versions. Instead of sending\n * properly-encoded form data, it just stringifies the object, resulting in a request body of \"[object FormData]\".\n * This function detects if the fetch function provided supports the global FormData object to avoid\n * confusing error messages later on.\n */\nfunction supportsFormData(fetchObject) {\n    const fetch = typeof fetchObject === 'function' ? fetchObject : fetchObject.fetch;\n    const cached = supportsFormDataMap.get(fetch);\n    if (cached)\n        return cached;\n    const promise = (async () => {\n        try {\n            const FetchResponse = ('Response' in fetch ?\n                fetch.Response\n                : (await fetch('data:,')).constructor);\n            const data = new FormData();\n            if (data.toString() === (await new FetchResponse(data).text())) {\n                return false;\n            }\n            return true;\n        }\n        catch {\n            // avoid false negatives\n            return true;\n        }\n    })();\n    supportsFormDataMap.set(fetch, promise);\n    return promise;\n}\nexport const createForm = async (body, fetch) => {\n    if (!(await supportsFormData(fetch))) {\n        throw new TypeError('The provided fetch function does not support file uploads with the current global FormData class.');\n    }\n    const form = new FormData();\n    await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\n    return form;\n};\n// We check for Blob not File because Bun.File doesn't inherit from File,\n// but they both inherit from Blob and have a `name` property at runtime.\nconst isNamedBlob = (value) => value instanceof Blob && 'name' in value;\nconst isUploadable = (value) => typeof value === 'object' &&\n    value !== null &&\n    (value instanceof Response || isAsyncIterable(value) || isNamedBlob(value));\nconst hasUploadableValue = (value) => {\n    if (isUploadable(value))\n        return true;\n    if (Array.isArray(value))\n        return value.some(hasUploadableValue);\n    if (value && typeof value === 'object') {\n        for (const k in value) {\n            if (hasUploadableValue(value[k]))\n                return true;\n        }\n    }\n    return false;\n};\nconst addFormValue = async (form, key, value) => {\n    if (value === undefined)\n        return;\n    if (value == null) {\n        throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\n    }\n    // TODO: make nested formats configurable\n    if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        form.append(key, String(value));\n    }\n    else if (value instanceof Response) {\n        form.append(key, makeFile([await value.blob()], getName(value)));\n    }\n    else if (isAsyncIterable(value)) {\n        form.append(key, makeFile([await new Response(ReadableStreamFrom(value)).blob()], getName(value)));\n    }\n    else if (isNamedBlob(value)) {\n        form.append(key, value, getName(value));\n    }\n    else if (Array.isArray(value)) {\n        await Promise.all(value.map((entry) => addFormValue(form, key + '[]', entry)));\n    }\n    else if (typeof value === 'object') {\n        await Promise.all(Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)));\n    }\n    else {\n        throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);\n    }\n};\n//# sourceMappingURL=uploads.mjs.map","import { getName, makeFile, isAsyncIterable } from \"./uploads.mjs\";\nimport { checkFileSupport } from \"./uploads.mjs\";\n/**\n * This check adds the arrayBuffer() method type because it is available and used at runtime\n */\nconst isBlobLike = (value) => value != null &&\n    typeof value === 'object' &&\n    typeof value.size === 'number' &&\n    typeof value.type === 'string' &&\n    typeof value.text === 'function' &&\n    typeof value.slice === 'function' &&\n    typeof value.arrayBuffer === 'function';\n/**\n * This check adds the arrayBuffer() method type because it is available and used at runtime\n */\nconst isFileLike = (value) => value != null &&\n    typeof value === 'object' &&\n    typeof value.name === 'string' &&\n    typeof value.lastModified === 'number' &&\n    isBlobLike(value);\nconst isResponseLike = (value) => value != null &&\n    typeof value === 'object' &&\n    typeof value.url === 'string' &&\n    typeof value.blob === 'function';\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nexport async function toFile(value, name, options) {\n    checkFileSupport();\n    // If it's a promise, resolve it.\n    value = await value;\n    // If we've been given a `File` we don't need to do anything\n    if (isFileLike(value)) {\n        if (value instanceof File) {\n            return value;\n        }\n        return makeFile([await value.arrayBuffer()], value.name);\n    }\n    if (isResponseLike(value)) {\n        const blob = await value.blob();\n        name || (name = new URL(value.url).pathname.split(/[\\\\/]/).pop());\n        return makeFile(await getBytes(blob), name, options);\n    }\n    const parts = await getBytes(value);\n    name || (name = getName(value));\n    if (!options?.type) {\n        const type = parts.find((part) => typeof part === 'object' && 'type' in part && part.type);\n        if (typeof type === 'string') {\n            options = { ...options, type };\n        }\n    }\n    return makeFile(parts, name, options);\n}\nasync function getBytes(value) {\n    let parts = [];\n    if (typeof value === 'string' ||\n        ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n        value instanceof ArrayBuffer) {\n        parts.push(value);\n    }\n    else if (isBlobLike(value)) {\n        parts.push(value instanceof Blob ? value : await value.arrayBuffer());\n    }\n    else if (isAsyncIterable(value) // includes Readable, ReadableStream, etc.\n    ) {\n        for await (const chunk of value) {\n            parts.push(...(await getBytes(chunk))); // TODO, consider validating?\n        }\n    }\n    else {\n        const constructor = value?.constructor?.name;\n        throw new Error(`Unexpected data type: ${typeof value}${constructor ? `; constructor: ${constructor}` : ''}${propsForError(value)}`);\n    }\n    return parts;\n}\nfunction propsForError(value) {\n    if (typeof value !== 'object' || value === null)\n        return '';\n    const props = Object.getOwnPropertyNames(value);\n    return `; props: [${props.map((p) => `\"${p}\"`).join(', ')}]`;\n}\n//# sourceMappingURL=to-file.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport class APIResource {\n    constructor(client) {\n        this._client = client;\n    }\n}\n//# sourceMappingURL=resource.mjs.map","import { OpenAIError } from \"../../core/error.mjs\";\n/**\n * Percent-encode everything that isn't safe to have in a path without encoding safe chars.\n *\n * Taken from https://datatracker.ietf.org/doc/html/rfc3986#section-3.3:\n * > unreserved  = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n * > sub-delims  = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n * > pchar       = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n */\nexport function encodeURIPath(str) {\n    return str.replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]+/g, encodeURIComponent);\n}\nexport const createPathTagFunction = (pathEncoder = encodeURIPath) => function path(statics, ...params) {\n    // If there are no params, no processing is needed.\n    if (statics.length === 1)\n        return statics[0];\n    let postPath = false;\n    const path = statics.reduce((previousValue, currentValue, index) => {\n        if (/[?#]/.test(currentValue)) {\n            postPath = true;\n        }\n        return (previousValue +\n            currentValue +\n            (index === params.length ? '' : (postPath ? encodeURIComponent : pathEncoder)(String(params[index]))));\n    }, '');\n    const pathOnly = path.split(/[?#]/, 1)[0];\n    const invalidSegments = [];\n    const invalidSegmentPattern = /(?<=^|\\/)(?:\\.|%2e){1,2}(?=\\/|$)/gi;\n    let match;\n    // Find all invalid segments\n    while ((match = invalidSegmentPattern.exec(pathOnly)) !== null) {\n        invalidSegments.push({\n            start: match.index,\n            length: match[0].length,\n        });\n    }\n    if (invalidSegments.length > 0) {\n        let lastEnd = 0;\n        const underline = invalidSegments.reduce((acc, segment) => {\n            const spaces = ' '.repeat(segment.start - lastEnd);\n            const arrows = '^'.repeat(segment.length);\n            lastEnd = segment.start + segment.length;\n            return acc + spaces + arrows;\n        }, '');\n        throw new OpenAIError(`Path parameters result in path with invalid segments:\\n${path}\\n${underline}`);\n    }\n    return path;\n};\n/**\n * URI-encodes path params and ensures no unsafe /./ or /../ path segments are introduced.\n */\nexport const path = createPathTagFunction(encodeURIPath);\n//# sourceMappingURL=path.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class Messages extends APIResource {\n    /**\n     * Get the messages in a stored chat completion. Only Chat Completions that have\n     * been created with the `store` parameter set to `true` will be returned.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const chatCompletionStoreMessage of client.chat.completions.messages.list(\n     *   'completion_id',\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(completionID, query = {}, options) {\n        return this._client.getAPIList(path `/chat/completions/${completionID}/messages`, (CursorPage), { query, ...options });\n    }\n}\n//# sourceMappingURL=messages.mjs.map","export function isRunnableFunctionWithParse(fn) {\n    return typeof fn.parse === 'function';\n}\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n */\nexport class ParsingToolFunction {\n    constructor(input) {\n        this.type = 'function';\n        this.function = input;\n    }\n}\n//# sourceMappingURL=RunnableFunction.mjs.map","export const isAssistantMessage = (message) => {\n    return message?.role === 'assistant';\n};\nexport const isToolMessage = (message) => {\n    return message?.role === 'tool';\n};\nexport function isPresent(obj) {\n    return obj != null;\n}\n//# sourceMappingURL=chatCompletionUtils.mjs.map","var _EventStream_instances, _EventStream_connectedPromise, _EventStream_resolveConnectedPromise, _EventStream_rejectConnectedPromise, _EventStream_endPromise, _EventStream_resolveEndPromise, _EventStream_rejectEndPromise, _EventStream_listeners, _EventStream_ended, _EventStream_errored, _EventStream_aborted, _EventStream_catchingPromiseCreated, _EventStream_handleError;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"../internal/tslib.mjs\";\nimport { APIUserAbortError, OpenAIError } from \"../error.mjs\";\nexport class EventStream {\n    constructor() {\n        _EventStream_instances.add(this);\n        this.controller = new AbortController();\n        _EventStream_connectedPromise.set(this, void 0);\n        _EventStream_resolveConnectedPromise.set(this, () => { });\n        _EventStream_rejectConnectedPromise.set(this, () => { });\n        _EventStream_endPromise.set(this, void 0);\n        _EventStream_resolveEndPromise.set(this, () => { });\n        _EventStream_rejectEndPromise.set(this, () => { });\n        _EventStream_listeners.set(this, {});\n        _EventStream_ended.set(this, false);\n        _EventStream_errored.set(this, false);\n        _EventStream_aborted.set(this, false);\n        _EventStream_catchingPromiseCreated.set(this, false);\n        __classPrivateFieldSet(this, _EventStream_connectedPromise, new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _EventStream_resolveConnectedPromise, resolve, \"f\");\n            __classPrivateFieldSet(this, _EventStream_rejectConnectedPromise, reject, \"f\");\n        }), \"f\");\n        __classPrivateFieldSet(this, _EventStream_endPromise, new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _EventStream_resolveEndPromise, resolve, \"f\");\n            __classPrivateFieldSet(this, _EventStream_rejectEndPromise, reject, \"f\");\n        }), \"f\");\n        // Don't let these promises cause unhandled rejection errors.\n        // we will manually cause an unhandled rejection error later\n        // if the user hasn't registered any error listener or called\n        // any promise-returning method.\n        __classPrivateFieldGet(this, _EventStream_connectedPromise, \"f\").catch(() => { });\n        __classPrivateFieldGet(this, _EventStream_endPromise, \"f\").catch(() => { });\n    }\n    _run(executor) {\n        // Unfortunately if we call `executor()` immediately we get runtime errors about\n        // references to `this` before the `super()` constructor call returns.\n        setTimeout(() => {\n            executor().then(() => {\n                this._emitFinal();\n                this._emit('end');\n            }, __classPrivateFieldGet(this, _EventStream_instances, \"m\", _EventStream_handleError).bind(this));\n        }, 0);\n    }\n    _connected() {\n        if (this.ended)\n            return;\n        __classPrivateFieldGet(this, _EventStream_resolveConnectedPromise, \"f\").call(this);\n        this._emit('connect');\n    }\n    get ended() {\n        return __classPrivateFieldGet(this, _EventStream_ended, \"f\");\n    }\n    get errored() {\n        return __classPrivateFieldGet(this, _EventStream_errored, \"f\");\n    }\n    get aborted() {\n        return __classPrivateFieldGet(this, _EventStream_aborted, \"f\");\n    }\n    abort() {\n        this.controller.abort();\n    }\n    /**\n     * Adds the listener function to the end of the listeners array for the event.\n     * No checks are made to see if the listener has already been added. Multiple calls passing\n     * the same combination of event and listener will result in the listener being added, and\n     * called, multiple times.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */\n    on(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] = []);\n        listeners.push({ listener });\n        return this;\n    }\n    /**\n     * Removes the specified listener from the listener array for the event.\n     * off() will remove, at most, one instance of a listener from the listener array. If any single\n     * listener has been added multiple times to the listener array for the specified event, then\n     * off() must be called multiple times to remove each instance.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */\n    off(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event];\n        if (!listeners)\n            return this;\n        const index = listeners.findIndex((l) => l.listener === listener);\n        if (index >= 0)\n            listeners.splice(index, 1);\n        return this;\n    }\n    /**\n     * Adds a one-time listener function for the event. The next time the event is triggered,\n     * this listener is removed and then invoked.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */\n    once(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] = []);\n        listeners.push({ listener, once: true });\n        return this;\n    }\n    /**\n     * This is similar to `.once()`, but returns a Promise that resolves the next time\n     * the event is triggered, instead of calling a listener callback.\n     * @returns a Promise that resolves the next time given event is triggered,\n     * or rejects if an error is emitted.  (If you request the 'error' event,\n     * returns a promise that resolves with the error).\n     *\n     * Example:\n     *\n     *   const message = await stream.emitted('message') // rejects if the stream errors\n     */\n    emitted(event) {\n        return new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _EventStream_catchingPromiseCreated, true, \"f\");\n            if (event !== 'error')\n                this.once('error', reject);\n            this.once(event, resolve);\n        });\n    }\n    async done() {\n        __classPrivateFieldSet(this, _EventStream_catchingPromiseCreated, true, \"f\");\n        await __classPrivateFieldGet(this, _EventStream_endPromise, \"f\");\n    }\n    _emit(event, ...args) {\n        // make sure we don't emit any events after end\n        if (__classPrivateFieldGet(this, _EventStream_ended, \"f\")) {\n            return;\n        }\n        if (event === 'end') {\n            __classPrivateFieldSet(this, _EventStream_ended, true, \"f\");\n            __classPrivateFieldGet(this, _EventStream_resolveEndPromise, \"f\").call(this);\n        }\n        const listeners = __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event];\n        if (listeners) {\n            __classPrivateFieldGet(this, _EventStream_listeners, \"f\")[event] = listeners.filter((l) => !l.once);\n            listeners.forEach(({ listener }) => listener(...args));\n        }\n        if (event === 'abort') {\n            const error = args[0];\n            if (!__classPrivateFieldGet(this, _EventStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                Promise.reject(error);\n            }\n            __classPrivateFieldGet(this, _EventStream_rejectConnectedPromise, \"f\").call(this, error);\n            __classPrivateFieldGet(this, _EventStream_rejectEndPromise, \"f\").call(this, error);\n            this._emit('end');\n            return;\n        }\n        if (event === 'error') {\n            // NOTE: _emit('error', error) should only be called from #handleError().\n            const error = args[0];\n            if (!__classPrivateFieldGet(this, _EventStream_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n                // If you are seeing stack traces here, make sure to handle errors via either:\n                // - runner.on('error', () => ...)\n                // - await runner.done()\n                // - await runner.finalChatCompletion()\n                // - etc.\n                Promise.reject(error);\n            }\n            __classPrivateFieldGet(this, _EventStream_rejectConnectedPromise, \"f\").call(this, error);\n            __classPrivateFieldGet(this, _EventStream_rejectEndPromise, \"f\").call(this, error);\n            this._emit('end');\n        }\n    }\n    _emitFinal() { }\n}\n_EventStream_connectedPromise = new WeakMap(), _EventStream_resolveConnectedPromise = new WeakMap(), _EventStream_rejectConnectedPromise = new WeakMap(), _EventStream_endPromise = new WeakMap(), _EventStream_resolveEndPromise = new WeakMap(), _EventStream_rejectEndPromise = new WeakMap(), _EventStream_listeners = new WeakMap(), _EventStream_ended = new WeakMap(), _EventStream_errored = new WeakMap(), _EventStream_aborted = new WeakMap(), _EventStream_catchingPromiseCreated = new WeakMap(), _EventStream_instances = new WeakSet(), _EventStream_handleError = function _EventStream_handleError(error) {\n    __classPrivateFieldSet(this, _EventStream_errored, true, \"f\");\n    if (error instanceof Error && error.name === 'AbortError') {\n        error = new APIUserAbortError();\n    }\n    if (error instanceof APIUserAbortError) {\n        __classPrivateFieldSet(this, _EventStream_aborted, true, \"f\");\n        return this._emit('abort', error);\n    }\n    if (error instanceof OpenAIError) {\n        return this._emit('error', error);\n    }\n    if (error instanceof Error) {\n        const openAIError = new OpenAIError(error.message);\n        // @ts-ignore\n        openAIError.cause = error;\n        return this._emit('error', openAIError);\n    }\n    return this._emit('error', new OpenAIError(String(error)));\n};\n//# sourceMappingURL=EventStream.mjs.map","var _AbstractChatCompletionRunner_instances, _AbstractChatCompletionRunner_getFinalContent, _AbstractChatCompletionRunner_getFinalMessage, _AbstractChatCompletionRunner_getFinalFunctionToolCall, _AbstractChatCompletionRunner_getFinalFunctionToolCallResult, _AbstractChatCompletionRunner_calculateTotalUsage, _AbstractChatCompletionRunner_validateParams, _AbstractChatCompletionRunner_stringifyFunctionCallResult;\nimport { __classPrivateFieldGet } from \"../internal/tslib.mjs\";\nimport { OpenAIError } from \"../error.mjs\";\nimport { isRunnableFunctionWithParse, } from \"./RunnableFunction.mjs\";\nimport { isAssistantMessage, isToolMessage } from \"./chatCompletionUtils.mjs\";\nimport { EventStream } from \"./EventStream.mjs\";\nimport { isAutoParsableTool, parseChatCompletion } from \"../lib/parser.mjs\";\nconst DEFAULT_MAX_CHAT_COMPLETIONS = 10;\nexport class AbstractChatCompletionRunner extends EventStream {\n    constructor() {\n        super(...arguments);\n        _AbstractChatCompletionRunner_instances.add(this);\n        this._chatCompletions = [];\n        this.messages = [];\n    }\n    _addChatCompletion(chatCompletion) {\n        this._chatCompletions.push(chatCompletion);\n        this._emit('chatCompletion', chatCompletion);\n        const message = chatCompletion.choices[0]?.message;\n        if (message)\n            this._addMessage(message);\n        return chatCompletion;\n    }\n    _addMessage(message, emit = true) {\n        if (!('content' in message))\n            message.content = null;\n        this.messages.push(message);\n        if (emit) {\n            this._emit('message', message);\n            if (isToolMessage(message) && message.content) {\n                // Note, this assumes that {role: 'tool', content: …} is always the result of a call of tool of type=function.\n                this._emit('functionToolCallResult', message.content);\n            }\n            else if (isAssistantMessage(message) && message.tool_calls) {\n                for (const tool_call of message.tool_calls) {\n                    if (tool_call.type === 'function') {\n                        this._emit('functionToolCall', tool_call.function);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * @returns a promise that resolves with the final ChatCompletion, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n     */\n    async finalChatCompletion() {\n        await this.done();\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\n        if (!completion)\n            throw new OpenAIError('stream ended without producing a ChatCompletion');\n        return completion;\n    }\n    /**\n     * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */\n    async finalContent() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\n     * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */\n    async finalMessage() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */\n    async finalFunctionToolCall() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionToolCall).call(this);\n    }\n    async finalFunctionToolCallResult() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionToolCallResult).call(this);\n    }\n    async totalUsage() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);\n    }\n    allChatCompletions() {\n        return [...this._chatCompletions];\n    }\n    _emitFinal() {\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\n        if (completion)\n            this._emit('finalChatCompletion', completion);\n        const finalMessage = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n        if (finalMessage)\n            this._emit('finalMessage', finalMessage);\n        const finalContent = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n        if (finalContent)\n            this._emit('finalContent', finalContent);\n        const finalFunctionCall = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionToolCall).call(this);\n        if (finalFunctionCall)\n            this._emit('finalFunctionToolCall', finalFunctionCall);\n        const finalFunctionCallResult = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionToolCallResult).call(this);\n        if (finalFunctionCallResult != null)\n            this._emit('finalFunctionToolCallResult', finalFunctionCallResult);\n        if (this._chatCompletions.some((c) => c.usage)) {\n            this._emit('totalUsage', __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));\n        }\n    }\n    async _createChatCompletion(client, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_validateParams).call(this, params);\n        const chatCompletion = await client.chat.completions.create({ ...params, stream: false }, { ...options, signal: this.controller.signal });\n        this._connected();\n        return this._addChatCompletion(parseChatCompletion(chatCompletion, params));\n    }\n    async _runChatCompletion(client, params, options) {\n        for (const message of params.messages) {\n            this._addMessage(message, false);\n        }\n        return await this._createChatCompletion(client, params, options);\n    }\n    async _runTools(client, params, options) {\n        const role = 'tool';\n        const { tool_choice = 'auto', stream, ...restParams } = params;\n        const singleFunctionToCall = typeof tool_choice !== 'string' && tool_choice?.function?.name;\n        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n        // TODO(someday): clean this logic up\n        const inputTools = params.tools.map((tool) => {\n            if (isAutoParsableTool(tool)) {\n                if (!tool.$callback) {\n                    throw new OpenAIError('Tool given to `.runTools()` that does not have an associated function');\n                }\n                return {\n                    type: 'function',\n                    function: {\n                        function: tool.$callback,\n                        name: tool.function.name,\n                        description: tool.function.description || '',\n                        parameters: tool.function.parameters,\n                        parse: tool.$parseRaw,\n                        strict: true,\n                    },\n                };\n            }\n            return tool;\n        });\n        const functionsByName = {};\n        for (const f of inputTools) {\n            if (f.type === 'function') {\n                functionsByName[f.function.name || f.function.function.name] = f.function;\n            }\n        }\n        const tools = 'tools' in params ?\n            inputTools.map((t) => t.type === 'function' ?\n                {\n                    type: 'function',\n                    function: {\n                        name: t.function.name || t.function.function.name,\n                        parameters: t.function.parameters,\n                        description: t.function.description,\n                        strict: t.function.strict,\n                    },\n                }\n                : t)\n            : undefined;\n        for (const message of params.messages) {\n            this._addMessage(message, false);\n        }\n        for (let i = 0; i < maxChatCompletions; ++i) {\n            const chatCompletion = await this._createChatCompletion(client, {\n                ...restParams,\n                tool_choice,\n                tools,\n                messages: [...this.messages],\n            }, options);\n            const message = chatCompletion.choices[0]?.message;\n            if (!message) {\n                throw new OpenAIError(`missing message in ChatCompletion response`);\n            }\n            if (!message.tool_calls?.length) {\n                return;\n            }\n            for (const tool_call of message.tool_calls) {\n                if (tool_call.type !== 'function')\n                    continue;\n                const tool_call_id = tool_call.id;\n                const { name, arguments: args } = tool_call.function;\n                const fn = functionsByName[name];\n                if (!fn) {\n                    const content = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${Object.keys(functionsByName)\n                        .map((name) => JSON.stringify(name))\n                        .join(', ')}. Please try again`;\n                    this._addMessage({ role, tool_call_id, content });\n                    continue;\n                }\n                else if (singleFunctionToCall && singleFunctionToCall !== name) {\n                    const content = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;\n                    this._addMessage({ role, tool_call_id, content });\n                    continue;\n                }\n                let parsed;\n                try {\n                    parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n                }\n                catch (error) {\n                    const content = error instanceof Error ? error.message : String(error);\n                    this._addMessage({ role, tool_call_id, content });\n                    continue;\n                }\n                // @ts-expect-error it can't rule out `never` type.\n                const rawContent = await fn.function(parsed, this);\n                const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n                this._addMessage({ role, tool_call_id, content });\n                if (singleFunctionToCall) {\n                    return;\n                }\n            }\n        }\n        return;\n    }\n}\n_AbstractChatCompletionRunner_instances = new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent() {\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this).content ?? null;\n}, _AbstractChatCompletionRunner_getFinalMessage = function _AbstractChatCompletionRunner_getFinalMessage() {\n    let i = this.messages.length;\n    while (i-- > 0) {\n        const message = this.messages[i];\n        if (isAssistantMessage(message)) {\n            // TODO: support audio here\n            const ret = {\n                ...message,\n                content: message.content ?? null,\n                refusal: message.refusal ?? null,\n            };\n            return ret;\n        }\n    }\n    throw new OpenAIError('stream ended without producing a ChatCompletionMessage with role=assistant');\n}, _AbstractChatCompletionRunner_getFinalFunctionToolCall = function _AbstractChatCompletionRunner_getFinalFunctionToolCall() {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n        const message = this.messages[i];\n        if (isAssistantMessage(message) && message?.tool_calls?.length) {\n            return message.tool_calls.at(-1)?.function;\n        }\n    }\n    return;\n}, _AbstractChatCompletionRunner_getFinalFunctionToolCallResult = function _AbstractChatCompletionRunner_getFinalFunctionToolCallResult() {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n        const message = this.messages[i];\n        if (isToolMessage(message) &&\n            message.content != null &&\n            typeof message.content === 'string' &&\n            this.messages.some((x) => x.role === 'assistant' &&\n                x.tool_calls?.some((y) => y.type === 'function' && y.id === message.tool_call_id))) {\n            return message.content;\n        }\n    }\n    return;\n}, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage() {\n    const total = {\n        completion_tokens: 0,\n        prompt_tokens: 0,\n        total_tokens: 0,\n    };\n    for (const { usage } of this._chatCompletions) {\n        if (usage) {\n            total.completion_tokens += usage.completion_tokens;\n            total.prompt_tokens += usage.prompt_tokens;\n            total.total_tokens += usage.total_tokens;\n        }\n    }\n    return total;\n}, _AbstractChatCompletionRunner_validateParams = function _AbstractChatCompletionRunner_validateParams(params) {\n    if (params.n != null && params.n > 1) {\n        throw new OpenAIError('ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.');\n    }\n}, _AbstractChatCompletionRunner_stringifyFunctionCallResult = function _AbstractChatCompletionRunner_stringifyFunctionCallResult(rawContent) {\n    return (typeof rawContent === 'string' ? rawContent\n        : rawContent === undefined ? 'undefined'\n            : JSON.stringify(rawContent));\n};\n//# sourceMappingURL=AbstractChatCompletionRunner.mjs.map","import { ContentFilterFinishReasonError, LengthFinishReasonError, OpenAIError } from \"../error.mjs\";\nexport function makeParseableResponseFormat(response_format, parser) {\n    const obj = { ...response_format };\n    Object.defineProperties(obj, {\n        $brand: {\n            value: 'auto-parseable-response-format',\n            enumerable: false,\n        },\n        $parseRaw: {\n            value: parser,\n            enumerable: false,\n        },\n    });\n    return obj;\n}\nexport function makeParseableTextFormat(response_format, parser) {\n    const obj = { ...response_format };\n    Object.defineProperties(obj, {\n        $brand: {\n            value: 'auto-parseable-response-format',\n            enumerable: false,\n        },\n        $parseRaw: {\n            value: parser,\n            enumerable: false,\n        },\n    });\n    return obj;\n}\nexport function isAutoParsableResponseFormat(response_format) {\n    return response_format?.['$brand'] === 'auto-parseable-response-format';\n}\nexport function makeParseableTool(tool, { parser, callback, }) {\n    const obj = { ...tool };\n    Object.defineProperties(obj, {\n        $brand: {\n            value: 'auto-parseable-tool',\n            enumerable: false,\n        },\n        $parseRaw: {\n            value: parser,\n            enumerable: false,\n        },\n        $callback: {\n            value: callback,\n            enumerable: false,\n        },\n    });\n    return obj;\n}\nexport function isAutoParsableTool(tool) {\n    return tool?.['$brand'] === 'auto-parseable-tool';\n}\nexport function maybeParseChatCompletion(completion, params) {\n    if (!params || !hasAutoParseableInput(params)) {\n        return {\n            ...completion,\n            choices: completion.choices.map((choice) => ({\n                ...choice,\n                message: {\n                    ...choice.message,\n                    parsed: null,\n                    ...(choice.message.tool_calls ?\n                        {\n                            tool_calls: choice.message.tool_calls,\n                        }\n                        : undefined),\n                },\n            })),\n        };\n    }\n    return parseChatCompletion(completion, params);\n}\nexport function parseChatCompletion(completion, params) {\n    const choices = completion.choices.map((choice) => {\n        if (choice.finish_reason === 'length') {\n            throw new LengthFinishReasonError();\n        }\n        if (choice.finish_reason === 'content_filter') {\n            throw new ContentFilterFinishReasonError();\n        }\n        return {\n            ...choice,\n            message: {\n                ...choice.message,\n                ...(choice.message.tool_calls ?\n                    {\n                        tool_calls: choice.message.tool_calls?.map((toolCall) => parseToolCall(params, toolCall)) ?? undefined,\n                    }\n                    : undefined),\n                parsed: choice.message.content && !choice.message.refusal ?\n                    parseResponseFormat(params, choice.message.content)\n                    : null,\n            },\n        };\n    });\n    return { ...completion, choices };\n}\nfunction parseResponseFormat(params, content) {\n    if (params.response_format?.type !== 'json_schema') {\n        return null;\n    }\n    if (params.response_format?.type === 'json_schema') {\n        if ('$parseRaw' in params.response_format) {\n            const response_format = params.response_format;\n            return response_format.$parseRaw(content);\n        }\n        return JSON.parse(content);\n    }\n    return null;\n}\nfunction parseToolCall(params, toolCall) {\n    const inputTool = params.tools?.find((inputTool) => inputTool.function?.name === toolCall.function.name);\n    return {\n        ...toolCall,\n        function: {\n            ...toolCall.function,\n            parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.function.arguments)\n                : inputTool?.function.strict ? JSON.parse(toolCall.function.arguments)\n                    : null,\n        },\n    };\n}\nexport function shouldParseToolCall(params, toolCall) {\n    if (!params) {\n        return false;\n    }\n    const inputTool = params.tools?.find((inputTool) => inputTool.function?.name === toolCall.function.name);\n    return isAutoParsableTool(inputTool) || inputTool?.function.strict || false;\n}\nexport function hasAutoParseableInput(params) {\n    if (isAutoParsableResponseFormat(params.response_format)) {\n        return true;\n    }\n    return (params.tools?.some((t) => isAutoParsableTool(t) || (t.type === 'function' && t.function.strict === true)) ?? false);\n}\nexport function validateInputTools(tools) {\n    for (const tool of tools ?? []) {\n        if (tool.type !== 'function') {\n            throw new OpenAIError(`Currently only \\`function\\` tool types support auto-parsing; Received \\`${tool.type}\\``);\n        }\n        if (tool.function.strict !== true) {\n            throw new OpenAIError(`The \\`${tool.function.name}\\` tool is not marked with \\`strict: true\\`. Only strict function tools can be auto-parsed`);\n        }\n    }\n}\n//# sourceMappingURL=parser.mjs.map","import { AbstractChatCompletionRunner, } from \"./AbstractChatCompletionRunner.mjs\";\nimport { isAssistantMessage } from \"./chatCompletionUtils.mjs\";\nexport class ChatCompletionRunner extends AbstractChatCompletionRunner {\n    static runTools(client, params, options) {\n        const runner = new ChatCompletionRunner();\n        const opts = {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },\n        };\n        runner._run(() => runner._runTools(client, params, opts));\n        return runner;\n    }\n    _addMessage(message, emit = true) {\n        super._addMessage(message, emit);\n        if (isAssistantMessage(message) && message.content) {\n            this._emit('content', message.content);\n        }\n    }\n}\n//# sourceMappingURL=ChatCompletionRunner.mjs.map","const STR = 0b000000001;\nconst NUM = 0b000000010;\nconst ARR = 0b000000100;\nconst OBJ = 0b000001000;\nconst NULL = 0b000010000;\nconst BOOL = 0b000100000;\nconst NAN = 0b001000000;\nconst INFINITY = 0b010000000;\nconst MINUS_INFINITY = 0b100000000;\nconst INF = INFINITY | MINUS_INFINITY;\nconst SPECIAL = NULL | BOOL | INF | NAN;\nconst ATOM = STR | NUM | SPECIAL;\nconst COLLECTION = ARR | OBJ;\nconst ALL = ATOM | COLLECTION;\nconst Allow = {\n    STR,\n    NUM,\n    ARR,\n    OBJ,\n    NULL,\n    BOOL,\n    NAN,\n    INFINITY,\n    MINUS_INFINITY,\n    INF,\n    SPECIAL,\n    ATOM,\n    COLLECTION,\n    ALL,\n};\n// The JSON string segment was unable to be parsed completely\nclass PartialJSON extends Error {\n}\nclass MalformedJSON extends Error {\n}\n/**\n * Parse incomplete JSON\n * @param {string} jsonString Partial JSON to be parsed\n * @param {number} allowPartial Specify what types are allowed to be partial, see {@link Allow} for details\n * @returns The parsed JSON\n * @throws {PartialJSON} If the JSON is incomplete (related to the `allow` parameter)\n * @throws {MalformedJSON} If the JSON is malformed\n */\nfunction parseJSON(jsonString, allowPartial = Allow.ALL) {\n    if (typeof jsonString !== 'string') {\n        throw new TypeError(`expecting str, got ${typeof jsonString}`);\n    }\n    if (!jsonString.trim()) {\n        throw new Error(`${jsonString} is empty`);\n    }\n    return _parseJSON(jsonString.trim(), allowPartial);\n}\nconst _parseJSON = (jsonString, allow) => {\n    const length = jsonString.length;\n    let index = 0;\n    const markPartialJSON = (msg) => {\n        throw new PartialJSON(`${msg} at position ${index}`);\n    };\n    const throwMalformedError = (msg) => {\n        throw new MalformedJSON(`${msg} at position ${index}`);\n    };\n    const parseAny = () => {\n        skipBlank();\n        if (index >= length)\n            markPartialJSON('Unexpected end of input');\n        if (jsonString[index] === '\"')\n            return parseStr();\n        if (jsonString[index] === '{')\n            return parseObj();\n        if (jsonString[index] === '[')\n            return parseArr();\n        if (jsonString.substring(index, index + 4) === 'null' ||\n            (Allow.NULL & allow && length - index < 4 && 'null'.startsWith(jsonString.substring(index)))) {\n            index += 4;\n            return null;\n        }\n        if (jsonString.substring(index, index + 4) === 'true' ||\n            (Allow.BOOL & allow && length - index < 4 && 'true'.startsWith(jsonString.substring(index)))) {\n            index += 4;\n            return true;\n        }\n        if (jsonString.substring(index, index + 5) === 'false' ||\n            (Allow.BOOL & allow && length - index < 5 && 'false'.startsWith(jsonString.substring(index)))) {\n            index += 5;\n            return false;\n        }\n        if (jsonString.substring(index, index + 8) === 'Infinity' ||\n            (Allow.INFINITY & allow && length - index < 8 && 'Infinity'.startsWith(jsonString.substring(index)))) {\n            index += 8;\n            return Infinity;\n        }\n        if (jsonString.substring(index, index + 9) === '-Infinity' ||\n            (Allow.MINUS_INFINITY & allow &&\n                1 < length - index &&\n                length - index < 9 &&\n                '-Infinity'.startsWith(jsonString.substring(index)))) {\n            index += 9;\n            return -Infinity;\n        }\n        if (jsonString.substring(index, index + 3) === 'NaN' ||\n            (Allow.NAN & allow && length - index < 3 && 'NaN'.startsWith(jsonString.substring(index)))) {\n            index += 3;\n            return NaN;\n        }\n        return parseNum();\n    };\n    const parseStr = () => {\n        const start = index;\n        let escape = false;\n        index++; // skip initial quote\n        while (index < length && (jsonString[index] !== '\"' || (escape && jsonString[index - 1] === '\\\\'))) {\n            escape = jsonString[index] === '\\\\' ? !escape : false;\n            index++;\n        }\n        if (jsonString.charAt(index) == '\"') {\n            try {\n                return JSON.parse(jsonString.substring(start, ++index - Number(escape)));\n            }\n            catch (e) {\n                throwMalformedError(String(e));\n            }\n        }\n        else if (Allow.STR & allow) {\n            try {\n                return JSON.parse(jsonString.substring(start, index - Number(escape)) + '\"');\n            }\n            catch (e) {\n                // SyntaxError: Invalid escape sequence\n                return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf('\\\\')) + '\"');\n            }\n        }\n        markPartialJSON('Unterminated string literal');\n    };\n    const parseObj = () => {\n        index++; // skip initial brace\n        skipBlank();\n        const obj = {};\n        try {\n            while (jsonString[index] !== '}') {\n                skipBlank();\n                if (index >= length && Allow.OBJ & allow)\n                    return obj;\n                const key = parseStr();\n                skipBlank();\n                index++; // skip colon\n                try {\n                    const value = parseAny();\n                    Object.defineProperty(obj, key, { value, writable: true, enumerable: true, configurable: true });\n                }\n                catch (e) {\n                    if (Allow.OBJ & allow)\n                        return obj;\n                    else\n                        throw e;\n                }\n                skipBlank();\n                if (jsonString[index] === ',')\n                    index++; // skip comma\n            }\n        }\n        catch (e) {\n            if (Allow.OBJ & allow)\n                return obj;\n            else\n                markPartialJSON(\"Expected '}' at end of object\");\n        }\n        index++; // skip final brace\n        return obj;\n    };\n    const parseArr = () => {\n        index++; // skip initial bracket\n        const arr = [];\n        try {\n            while (jsonString[index] !== ']') {\n                arr.push(parseAny());\n                skipBlank();\n                if (jsonString[index] === ',') {\n                    index++; // skip comma\n                }\n            }\n        }\n        catch (e) {\n            if (Allow.ARR & allow) {\n                return arr;\n            }\n            markPartialJSON(\"Expected ']' at end of array\");\n        }\n        index++; // skip final bracket\n        return arr;\n    };\n    const parseNum = () => {\n        if (index === 0) {\n            if (jsonString === '-' && Allow.NUM & allow)\n                markPartialJSON(\"Not sure what '-' is\");\n            try {\n                return JSON.parse(jsonString);\n            }\n            catch (e) {\n                if (Allow.NUM & allow) {\n                    try {\n                        if ('.' === jsonString[jsonString.length - 1])\n                            return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf('.')));\n                        return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf('e')));\n                    }\n                    catch (e) { }\n                }\n                throwMalformedError(String(e));\n            }\n        }\n        const start = index;\n        if (jsonString[index] === '-')\n            index++;\n        while (jsonString[index] && !',]}'.includes(jsonString[index]))\n            index++;\n        if (index == length && !(Allow.NUM & allow))\n            markPartialJSON('Unterminated number literal');\n        try {\n            return JSON.parse(jsonString.substring(start, index));\n        }\n        catch (e) {\n            if (jsonString.substring(start, index) === '-' && Allow.NUM & allow)\n                markPartialJSON(\"Not sure what '-' is\");\n            try {\n                return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf('e')));\n            }\n            catch (e) {\n                throwMalformedError(String(e));\n            }\n        }\n    };\n    const skipBlank = () => {\n        while (index < length && ' \\n\\r\\t'.includes(jsonString[index])) {\n            index++;\n        }\n    };\n    return parseAny();\n};\n// using this function with malformed JSON is undefined behavior\nconst partialParse = (input) => parseJSON(input, Allow.ALL ^ Allow.NUM);\nexport { partialParse, PartialJSON, MalformedJSON };\n//# sourceMappingURL=parser.mjs.map","var _ChatCompletionStream_instances, _ChatCompletionStream_params, _ChatCompletionStream_choiceEventStates, _ChatCompletionStream_currentChatCompletionSnapshot, _ChatCompletionStream_beginRequest, _ChatCompletionStream_getChoiceEventState, _ChatCompletionStream_addChunk, _ChatCompletionStream_emitToolCallDoneEvent, _ChatCompletionStream_emitContentDoneEvents, _ChatCompletionStream_endRequest, _ChatCompletionStream_getAutoParseableResponseFormat, _ChatCompletionStream_accumulateChatCompletion;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"../internal/tslib.mjs\";\nimport { OpenAIError, APIUserAbortError, LengthFinishReasonError, ContentFilterFinishReasonError, } from \"../error.mjs\";\nimport { AbstractChatCompletionRunner, } from \"./AbstractChatCompletionRunner.mjs\";\nimport { Stream } from \"../streaming.mjs\";\nimport { hasAutoParseableInput, isAutoParsableResponseFormat, isAutoParsableTool, maybeParseChatCompletion, shouldParseToolCall, } from \"../lib/parser.mjs\";\nimport { partialParse } from \"../_vendor/partial-json-parser/parser.mjs\";\nexport class ChatCompletionStream extends AbstractChatCompletionRunner {\n    constructor(params) {\n        super();\n        _ChatCompletionStream_instances.add(this);\n        _ChatCompletionStream_params.set(this, void 0);\n        _ChatCompletionStream_choiceEventStates.set(this, void 0);\n        _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);\n        __classPrivateFieldSet(this, _ChatCompletionStream_params, params, \"f\");\n        __classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], \"f\");\n    }\n    get currentChatCompletionSnapshot() {\n        return __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n    }\n    /**\n     * Intended for use on the frontend, consuming a stream produced with\n     * `.toReadableStream()` on the backend.\n     *\n     * Note that messages sent to the model do not appear in `.on('message')`\n     * in this context.\n     */\n    static fromReadableStream(stream) {\n        const runner = new ChatCompletionStream(null);\n        runner._run(() => runner._fromReadableStream(stream));\n        return runner;\n    }\n    static createChatCompletion(client, params, options) {\n        const runner = new ChatCompletionStream(params);\n        runner._run(() => runner._runChatCompletion(client, { ...params, stream: true }, { ...options, headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' } }));\n        return runner;\n    }\n    async _createChatCompletion(client, params, options) {\n        super._createChatCompletion;\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n        const stream = await client.chat.completions.create({ ...params, stream: true }, { ...options, signal: this.controller.signal });\n        this._connected();\n        for await (const chunk of stream) {\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n    }\n    async _fromReadableStream(readableStream, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n        this._connected();\n        const stream = Stream.fromReadableStream(readableStream, this.controller);\n        let chatId;\n        for await (const chunk of stream) {\n            if (chatId && chatId !== chunk.id) {\n                // A new request has been made.\n                this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n            }\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n            chatId = chunk.id;\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n    }\n    [(_ChatCompletionStream_params = new WeakMap(), _ChatCompletionStream_choiceEventStates = new WeakMap(), _ChatCompletionStream_currentChatCompletionSnapshot = new WeakMap(), _ChatCompletionStream_instances = new WeakSet(), _ChatCompletionStream_beginRequest = function _ChatCompletionStream_beginRequest() {\n        if (this.ended)\n            return;\n        __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n    }, _ChatCompletionStream_getChoiceEventState = function _ChatCompletionStream_getChoiceEventState(choice) {\n        let state = __classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, \"f\")[choice.index];\n        if (state) {\n            return state;\n        }\n        state = {\n            content_done: false,\n            refusal_done: false,\n            logprobs_content_done: false,\n            logprobs_refusal_done: false,\n            done_tool_calls: new Set(),\n            current_tool_call_index: null,\n        };\n        __classPrivateFieldGet(this, _ChatCompletionStream_choiceEventStates, \"f\")[choice.index] = state;\n        return state;\n    }, _ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk(chunk) {\n        if (this.ended)\n            return;\n        const completion = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_accumulateChatCompletion).call(this, chunk);\n        this._emit('chunk', chunk, completion);\n        for (const choice of chunk.choices) {\n            const choiceSnapshot = completion.choices[choice.index];\n            if (choice.delta.content != null &&\n                choiceSnapshot.message?.role === 'assistant' &&\n                choiceSnapshot.message?.content) {\n                this._emit('content', choice.delta.content, choiceSnapshot.message.content);\n                this._emit('content.delta', {\n                    delta: choice.delta.content,\n                    snapshot: choiceSnapshot.message.content,\n                    parsed: choiceSnapshot.message.parsed,\n                });\n            }\n            if (choice.delta.refusal != null &&\n                choiceSnapshot.message?.role === 'assistant' &&\n                choiceSnapshot.message?.refusal) {\n                this._emit('refusal.delta', {\n                    delta: choice.delta.refusal,\n                    snapshot: choiceSnapshot.message.refusal,\n                });\n            }\n            if (choice.logprobs?.content != null && choiceSnapshot.message?.role === 'assistant') {\n                this._emit('logprobs.content.delta', {\n                    content: choice.logprobs?.content,\n                    snapshot: choiceSnapshot.logprobs?.content ?? [],\n                });\n            }\n            if (choice.logprobs?.refusal != null && choiceSnapshot.message?.role === 'assistant') {\n                this._emit('logprobs.refusal.delta', {\n                    refusal: choice.logprobs?.refusal,\n                    snapshot: choiceSnapshot.logprobs?.refusal ?? [],\n                });\n            }\n            const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n            if (choiceSnapshot.finish_reason) {\n                __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);\n                if (state.current_tool_call_index != null) {\n                    __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);\n                }\n            }\n            for (const toolCall of choice.delta.tool_calls ?? []) {\n                if (state.current_tool_call_index !== toolCall.index) {\n                    __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);\n                    // new tool call started, the previous one is done\n                    if (state.current_tool_call_index != null) {\n                        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);\n                    }\n                }\n                state.current_tool_call_index = toolCall.index;\n            }\n            for (const toolCallDelta of choice.delta.tool_calls ?? []) {\n                const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallDelta.index];\n                if (!toolCallSnapshot?.type) {\n                    continue;\n                }\n                if (toolCallSnapshot?.type === 'function') {\n                    this._emit('tool_calls.function.arguments.delta', {\n                        name: toolCallSnapshot.function?.name,\n                        index: toolCallDelta.index,\n                        arguments: toolCallSnapshot.function.arguments,\n                        parsed_arguments: toolCallSnapshot.function.parsed_arguments,\n                        arguments_delta: toolCallDelta.function?.arguments ?? '',\n                    });\n                }\n                else {\n                    assertNever(toolCallSnapshot?.type);\n                }\n            }\n        }\n    }, _ChatCompletionStream_emitToolCallDoneEvent = function _ChatCompletionStream_emitToolCallDoneEvent(choiceSnapshot, toolCallIndex) {\n        const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n        if (state.done_tool_calls.has(toolCallIndex)) {\n            // we've already fired the done event\n            return;\n        }\n        const toolCallSnapshot = choiceSnapshot.message.tool_calls?.[toolCallIndex];\n        if (!toolCallSnapshot) {\n            throw new Error('no tool call snapshot');\n        }\n        if (!toolCallSnapshot.type) {\n            throw new Error('tool call snapshot missing `type`');\n        }\n        if (toolCallSnapshot.type === 'function') {\n            const inputTool = __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\")?.tools?.find((tool) => tool.type === 'function' && tool.function.name === toolCallSnapshot.function.name);\n            this._emit('tool_calls.function.arguments.done', {\n                name: toolCallSnapshot.function.name,\n                index: toolCallIndex,\n                arguments: toolCallSnapshot.function.arguments,\n                parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCallSnapshot.function.arguments)\n                    : inputTool?.function.strict ? JSON.parse(toolCallSnapshot.function.arguments)\n                        : null,\n            });\n        }\n        else {\n            assertNever(toolCallSnapshot.type);\n        }\n    }, _ChatCompletionStream_emitContentDoneEvents = function _ChatCompletionStream_emitContentDoneEvents(choiceSnapshot) {\n        const state = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);\n        if (choiceSnapshot.message.content && !state.content_done) {\n            state.content_done = true;\n            const responseFormat = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getAutoParseableResponseFormat).call(this);\n            this._emit('content.done', {\n                content: choiceSnapshot.message.content,\n                parsed: responseFormat ? responseFormat.$parseRaw(choiceSnapshot.message.content) : null,\n            });\n        }\n        if (choiceSnapshot.message.refusal && !state.refusal_done) {\n            state.refusal_done = true;\n            this._emit('refusal.done', { refusal: choiceSnapshot.message.refusal });\n        }\n        if (choiceSnapshot.logprobs?.content && !state.logprobs_content_done) {\n            state.logprobs_content_done = true;\n            this._emit('logprobs.content.done', { content: choiceSnapshot.logprobs.content });\n        }\n        if (choiceSnapshot.logprobs?.refusal && !state.logprobs_refusal_done) {\n            state.logprobs_refusal_done = true;\n            this._emit('logprobs.refusal.done', { refusal: choiceSnapshot.logprobs.refusal });\n        }\n    }, _ChatCompletionStream_endRequest = function _ChatCompletionStream_endRequest() {\n        if (this.ended) {\n            throw new OpenAIError(`stream has ended, this shouldn't happen`);\n        }\n        const snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n        if (!snapshot) {\n            throw new OpenAIError(`request ended without sending any chunks`);\n        }\n        __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n        __classPrivateFieldSet(this, _ChatCompletionStream_choiceEventStates, [], \"f\");\n        return finalizeChatCompletion(snapshot, __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"));\n    }, _ChatCompletionStream_getAutoParseableResponseFormat = function _ChatCompletionStream_getAutoParseableResponseFormat() {\n        const responseFormat = __classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\")?.response_format;\n        if (isAutoParsableResponseFormat(responseFormat)) {\n            return responseFormat;\n        }\n        return null;\n    }, _ChatCompletionStream_accumulateChatCompletion = function _ChatCompletionStream_accumulateChatCompletion(chunk) {\n        var _a, _b, _c, _d;\n        let snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n        const { choices, ...rest } = chunk;\n        if (!snapshot) {\n            snapshot = __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, {\n                ...rest,\n                choices: [],\n            }, \"f\");\n        }\n        else {\n            Object.assign(snapshot, rest);\n        }\n        for (const { delta, finish_reason, index, logprobs = null, ...other } of chunk.choices) {\n            let choice = snapshot.choices[index];\n            if (!choice) {\n                choice = snapshot.choices[index] = { finish_reason, index, message: {}, logprobs, ...other };\n            }\n            if (logprobs) {\n                if (!choice.logprobs) {\n                    choice.logprobs = Object.assign({}, logprobs);\n                }\n                else {\n                    const { content, refusal, ...rest } = logprobs;\n                    assertIsEmpty(rest);\n                    Object.assign(choice.logprobs, rest);\n                    if (content) {\n                        (_a = choice.logprobs).content ?? (_a.content = []);\n                        choice.logprobs.content.push(...content);\n                    }\n                    if (refusal) {\n                        (_b = choice.logprobs).refusal ?? (_b.refusal = []);\n                        choice.logprobs.refusal.push(...refusal);\n                    }\n                }\n            }\n            if (finish_reason) {\n                choice.finish_reason = finish_reason;\n                if (__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\") && hasAutoParseableInput(__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"))) {\n                    if (finish_reason === 'length') {\n                        throw new LengthFinishReasonError();\n                    }\n                    if (finish_reason === 'content_filter') {\n                        throw new ContentFilterFinishReasonError();\n                    }\n                }\n            }\n            Object.assign(choice, other);\n            if (!delta)\n                continue; // Shouldn't happen; just in case.\n            const { content, refusal, function_call, role, tool_calls, ...rest } = delta;\n            assertIsEmpty(rest);\n            Object.assign(choice.message, rest);\n            if (refusal) {\n                choice.message.refusal = (choice.message.refusal || '') + refusal;\n            }\n            if (role)\n                choice.message.role = role;\n            if (function_call) {\n                if (!choice.message.function_call) {\n                    choice.message.function_call = function_call;\n                }\n                else {\n                    if (function_call.name)\n                        choice.message.function_call.name = function_call.name;\n                    if (function_call.arguments) {\n                        (_c = choice.message.function_call).arguments ?? (_c.arguments = '');\n                        choice.message.function_call.arguments += function_call.arguments;\n                    }\n                }\n            }\n            if (content) {\n                choice.message.content = (choice.message.content || '') + content;\n                if (!choice.message.refusal && __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_getAutoParseableResponseFormat).call(this)) {\n                    choice.message.parsed = partialParse(choice.message.content);\n                }\n            }\n            if (tool_calls) {\n                if (!choice.message.tool_calls)\n                    choice.message.tool_calls = [];\n                for (const { index, id, type, function: fn, ...rest } of tool_calls) {\n                    const tool_call = ((_d = choice.message.tool_calls)[index] ?? (_d[index] = {}));\n                    Object.assign(tool_call, rest);\n                    if (id)\n                        tool_call.id = id;\n                    if (type)\n                        tool_call.type = type;\n                    if (fn)\n                        tool_call.function ?? (tool_call.function = { name: fn.name ?? '', arguments: '' });\n                    if (fn?.name)\n                        tool_call.function.name = fn.name;\n                    if (fn?.arguments) {\n                        tool_call.function.arguments += fn.arguments;\n                        if (shouldParseToolCall(__classPrivateFieldGet(this, _ChatCompletionStream_params, \"f\"), tool_call)) {\n                            tool_call.function.parsed_arguments = partialParse(tool_call.function.arguments);\n                        }\n                    }\n                }\n            }\n        }\n        return snapshot;\n    }, Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        this.on('chunk', (chunk) => {\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(chunk);\n            }\n            else {\n                pushQueue.push(chunk);\n            }\n        });\n        this.on('end', () => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on('abort', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on('error', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async () => {\n                if (!pushQueue.length) {\n                    if (done) {\n                        return { value: undefined, done: true };\n                    }\n                    return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));\n                }\n                const chunk = pushQueue.shift();\n                return { value: chunk, done: false };\n            },\n            return: async () => {\n                this.abort();\n                return { value: undefined, done: true };\n            },\n        };\n    }\n    toReadableStream() {\n        const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n        return stream.toReadableStream();\n    }\n}\nfunction finalizeChatCompletion(snapshot, params) {\n    const { id, choices, created, model, system_fingerprint, ...rest } = snapshot;\n    const completion = {\n        ...rest,\n        id,\n        choices: choices.map(({ message, finish_reason, index, logprobs, ...choiceRest }) => {\n            if (!finish_reason) {\n                throw new OpenAIError(`missing finish_reason for choice ${index}`);\n            }\n            const { content = null, function_call, tool_calls, ...messageRest } = message;\n            const role = message.role; // this is what we expect; in theory it could be different which would make our types a slight lie but would be fine.\n            if (!role) {\n                throw new OpenAIError(`missing role for choice ${index}`);\n            }\n            if (function_call) {\n                const { arguments: args, name } = function_call;\n                if (args == null) {\n                    throw new OpenAIError(`missing function_call.arguments for choice ${index}`);\n                }\n                if (!name) {\n                    throw new OpenAIError(`missing function_call.name for choice ${index}`);\n                }\n                return {\n                    ...choiceRest,\n                    message: {\n                        content,\n                        function_call: { arguments: args, name },\n                        role,\n                        refusal: message.refusal ?? null,\n                    },\n                    finish_reason,\n                    index,\n                    logprobs,\n                };\n            }\n            if (tool_calls) {\n                return {\n                    ...choiceRest,\n                    index,\n                    finish_reason,\n                    logprobs,\n                    message: {\n                        ...messageRest,\n                        role,\n                        content,\n                        refusal: message.refusal ?? null,\n                        tool_calls: tool_calls.map((tool_call, i) => {\n                            const { function: fn, type, id, ...toolRest } = tool_call;\n                            const { arguments: args, name, ...fnRest } = fn || {};\n                            if (id == null) {\n                                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].id\\n${str(snapshot)}`);\n                            }\n                            if (type == null) {\n                                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].type\\n${str(snapshot)}`);\n                            }\n                            if (name == null) {\n                                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].function.name\\n${str(snapshot)}`);\n                            }\n                            if (args == null) {\n                                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].function.arguments\\n${str(snapshot)}`);\n                            }\n                            return { ...toolRest, id, type, function: { ...fnRest, name, arguments: args } };\n                        }),\n                    },\n                };\n            }\n            return {\n                ...choiceRest,\n                message: { ...messageRest, content, role, refusal: message.refusal ?? null },\n                finish_reason,\n                index,\n                logprobs,\n            };\n        }),\n        created,\n        model,\n        object: 'chat.completion',\n        ...(system_fingerprint ? { system_fingerprint } : {}),\n    };\n    return maybeParseChatCompletion(completion, params);\n}\nfunction str(x) {\n    return JSON.stringify(x);\n}\n/**\n * Ensures the given argument is an empty object, useful for\n * asserting that all known properties on an object have been\n * destructured.\n */\nfunction assertIsEmpty(obj) {\n    return;\n}\nfunction assertNever(_x) { }\n//# sourceMappingURL=ChatCompletionStream.mjs.map","import { ChatCompletionStream } from \"./ChatCompletionStream.mjs\";\nexport class ChatCompletionStreamingRunner extends ChatCompletionStream {\n    static fromReadableStream(stream) {\n        const runner = new ChatCompletionStreamingRunner(null);\n        runner._run(() => runner._fromReadableStream(stream));\n        return runner;\n    }\n    static runTools(client, params, options) {\n        const runner = new ChatCompletionStreamingRunner(\n        // @ts-expect-error TODO these types are incompatible\n        params);\n        const opts = {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },\n        };\n        runner._run(() => runner._runTools(client, params, opts));\n        return runner;\n    }\n}\n//# sourceMappingURL=ChatCompletionStreamingRunner.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport * as MessagesAPI from \"./messages.mjs\";\nimport { Messages } from \"./messages.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nimport { ChatCompletionRunner } from \"../../../lib/ChatCompletionRunner.mjs\";\nimport { ChatCompletionStreamingRunner } from \"../../../lib/ChatCompletionStreamingRunner.mjs\";\nimport { ChatCompletionStream } from \"../../../lib/ChatCompletionStream.mjs\";\nimport { parseChatCompletion, validateInputTools } from \"../../../lib/parser.mjs\";\nexport class Completions extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.messages = new MessagesAPI.Messages(this._client);\n    }\n    create(body, options) {\n        return this._client.post('/chat/completions', { body, ...options, stream: body.stream ?? false });\n    }\n    /**\n     * Get a stored chat completion. Only Chat Completions that have been created with\n     * the `store` parameter set to `true` will be returned.\n     *\n     * @example\n     * ```ts\n     * const chatCompletion =\n     *   await client.chat.completions.retrieve('completion_id');\n     * ```\n     */\n    retrieve(completionID, options) {\n        return this._client.get(path `/chat/completions/${completionID}`, options);\n    }\n    /**\n     * Modify a stored chat completion. Only Chat Completions that have been created\n     * with the `store` parameter set to `true` can be modified. Currently, the only\n     * supported modification is to update the `metadata` field.\n     *\n     * @example\n     * ```ts\n     * const chatCompletion = await client.chat.completions.update(\n     *   'completion_id',\n     *   { metadata: { foo: 'string' } },\n     * );\n     * ```\n     */\n    update(completionID, body, options) {\n        return this._client.post(path `/chat/completions/${completionID}`, { body, ...options });\n    }\n    /**\n     * List stored Chat Completions. Only Chat Completions that have been stored with\n     * the `store` parameter set to `true` will be returned.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const chatCompletion of client.chat.completions.list()) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(query = {}, options) {\n        return this._client.getAPIList('/chat/completions', (CursorPage), { query, ...options });\n    }\n    /**\n     * Delete a stored chat completion. Only Chat Completions that have been created\n     * with the `store` parameter set to `true` can be deleted.\n     *\n     * @example\n     * ```ts\n     * const chatCompletionDeleted =\n     *   await client.chat.completions.delete('completion_id');\n     * ```\n     */\n    delete(completionID, options) {\n        return this._client.delete(path `/chat/completions/${completionID}`, options);\n    }\n    parse(body, options) {\n        validateInputTools(body.tools);\n        return this._client.chat.completions\n            .create(body, {\n            ...options,\n            headers: {\n                ...options?.headers,\n                'X-Stainless-Helper-Method': 'chat.completions.parse',\n            },\n        })\n            ._thenUnwrap((completion) => parseChatCompletion(completion, body));\n    }\n    runTools(body, options) {\n        if (body.stream) {\n            return ChatCompletionStreamingRunner.runTools(this._client, body, options);\n        }\n        return ChatCompletionRunner.runTools(this._client, body, options);\n    }\n    /**\n     * Creates a chat completion stream\n     */\n    stream(body, options) {\n        return ChatCompletionStream.createChatCompletion(this._client, body, options);\n    }\n}\nexport { ChatCompletionStreamingRunner } from \"../../../lib/ChatCompletionStreamingRunner.mjs\";\nexport { ParsingToolFunction, } from \"../../../lib/RunnableFunction.mjs\";\nexport { ChatCompletionStream } from \"../../../lib/ChatCompletionStream.mjs\";\nexport { ChatCompletionRunner } from \"../../../lib/ChatCompletionRunner.mjs\";\nCompletions.Messages = Messages;\n//# sourceMappingURL=completions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as CompletionsAPI from \"./completions/completions.mjs\";\nimport { Completions, } from \"./completions/completions.mjs\";\nexport class Chat extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.completions = new CompletionsAPI.Completions(this._client);\n    }\n}\nChat.Completions = Completions;\n//# sourceMappingURL=chat.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nconst brand_privateNullableHeaders = Symbol('brand.privateNullableHeaders');\nconst isArray = Array.isArray;\nfunction* iterateHeaders(headers) {\n    if (!headers)\n        return;\n    if (brand_privateNullableHeaders in headers) {\n        const { values, nulls } = headers;\n        yield* values.entries();\n        for (const name of nulls) {\n            yield [name, null];\n        }\n        return;\n    }\n    let shouldClear = false;\n    let iter;\n    if (headers instanceof Headers) {\n        iter = headers.entries();\n    }\n    else if (isArray(headers)) {\n        iter = headers;\n    }\n    else {\n        shouldClear = true;\n        iter = Object.entries(headers ?? {});\n    }\n    for (let row of iter) {\n        const name = row[0];\n        if (typeof name !== 'string')\n            throw new TypeError('expected header name to be a string');\n        const values = isArray(row[1]) ? row[1] : [row[1]];\n        let didClear = false;\n        for (const value of values) {\n            if (value === undefined)\n                continue;\n            // Objects keys always overwrite older headers, they never append.\n            // Yield a null to clear the header before adding the new values.\n            if (shouldClear && !didClear) {\n                didClear = true;\n                yield [name, null];\n            }\n            yield [name, value];\n        }\n    }\n}\nexport const buildHeaders = (newHeaders) => {\n    const targetHeaders = new Headers();\n    const nullHeaders = new Set();\n    for (const headers of newHeaders) {\n        const seenHeaders = new Set();\n        for (const [name, value] of iterateHeaders(headers)) {\n            const lowerName = name.toLowerCase();\n            if (!seenHeaders.has(lowerName)) {\n                targetHeaders.delete(name);\n                seenHeaders.add(lowerName);\n            }\n            if (value === null) {\n                targetHeaders.delete(name);\n                nullHeaders.add(lowerName);\n            }\n            else {\n                targetHeaders.append(name, value);\n                nullHeaders.delete(lowerName);\n            }\n        }\n    }\n    return { [brand_privateNullableHeaders]: true, values: targetHeaders, nulls: nullHeaders };\n};\nexport const isEmptyHeaders = (headers) => {\n    for (const _ of iterateHeaders(headers))\n        return false;\n    return true;\n};\n//# sourceMappingURL=headers.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { buildHeaders } from \"../../internal/headers.mjs\";\nexport class Speech extends APIResource {\n    /**\n     * Generates audio from the input text.\n     *\n     * @example\n     * ```ts\n     * const speech = await client.audio.speech.create({\n     *   input: 'input',\n     *   model: 'string',\n     *   voice: 'ash',\n     * });\n     *\n     * const content = await speech.blob();\n     * console.log(content);\n     * ```\n     */\n    create(body, options) {\n        return this._client.post('/audio/speech', {\n            body,\n            ...options,\n            headers: buildHeaders([{ Accept: 'application/octet-stream' }, options?.headers]),\n            __binaryResponse: true,\n        });\n    }\n}\n//# sourceMappingURL=speech.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { multipartFormRequestOptions } from \"../../internal/uploads.mjs\";\nexport class Transcriptions extends APIResource {\n    create(body, options) {\n        return this._client.post('/audio/transcriptions', multipartFormRequestOptions({\n            body,\n            ...options,\n            stream: body.stream ?? false,\n            __metadata: { model: body.model },\n        }, this._client));\n    }\n}\n//# sourceMappingURL=transcriptions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { multipartFormRequestOptions } from \"../../internal/uploads.mjs\";\nexport class Translations extends APIResource {\n    create(body, options) {\n        return this._client.post('/audio/translations', multipartFormRequestOptions({ body, ...options, __metadata: { model: body.model } }, this._client));\n    }\n}\n//# sourceMappingURL=translations.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as SpeechAPI from \"./speech.mjs\";\nimport { Speech } from \"./speech.mjs\";\nimport * as TranscriptionsAPI from \"./transcriptions.mjs\";\nimport { Transcriptions, } from \"./transcriptions.mjs\";\nimport * as TranslationsAPI from \"./translations.mjs\";\nimport { Translations, } from \"./translations.mjs\";\nexport class Audio extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.transcriptions = new TranscriptionsAPI.Transcriptions(this._client);\n        this.translations = new TranslationsAPI.Translations(this._client);\n        this.speech = new SpeechAPI.Speech(this._client);\n    }\n}\nAudio.Transcriptions = Transcriptions;\nAudio.Translations = Translations;\nAudio.Speech = Speech;\n//# sourceMappingURL=audio.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../core/resource.mjs\";\nimport { CursorPage } from \"../core/pagination.mjs\";\nimport { path } from \"../internal/utils/path.mjs\";\nexport class Batches extends APIResource {\n    /**\n     * Creates and executes a batch from an uploaded file of requests\n     */\n    create(body, options) {\n        return this._client.post('/batches', { body, ...options });\n    }\n    /**\n     * Retrieves a batch.\n     */\n    retrieve(batchID, options) {\n        return this._client.get(path `/batches/${batchID}`, options);\n    }\n    /**\n     * List your organization's batches.\n     */\n    list(query = {}, options) {\n        return this._client.getAPIList('/batches', (CursorPage), { query, ...options });\n    }\n    /**\n     * Cancels an in-progress batch. The batch will be in status `cancelling` for up to\n     * 10 minutes, before changing to `cancelled`, where it will have partial results\n     * (if any) available in the output file.\n     */\n    cancel(batchID, options) {\n        return this._client.post(path `/batches/${batchID}/cancel`, options);\n    }\n}\n//# sourceMappingURL=batches.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { CursorPage } from \"../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../internal/headers.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class Assistants extends APIResource {\n    /**\n     * Create an assistant with a model and instructions.\n     *\n     * @example\n     * ```ts\n     * const assistant = await client.beta.assistants.create({\n     *   model: 'gpt-4o',\n     * });\n     * ```\n     */\n    create(body, options) {\n        return this._client.post('/assistants', {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Retrieves an assistant.\n     *\n     * @example\n     * ```ts\n     * const assistant = await client.beta.assistants.retrieve(\n     *   'assistant_id',\n     * );\n     * ```\n     */\n    retrieve(assistantID, options) {\n        return this._client.get(path `/assistants/${assistantID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Modifies an assistant.\n     *\n     * @example\n     * ```ts\n     * const assistant = await client.beta.assistants.update(\n     *   'assistant_id',\n     * );\n     * ```\n     */\n    update(assistantID, body, options) {\n        return this._client.post(path `/assistants/${assistantID}`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Returns a list of assistants.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const assistant of client.beta.assistants.list()) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(query = {}, options) {\n        return this._client.getAPIList('/assistants', (CursorPage), {\n            query,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Delete an assistant.\n     *\n     * @example\n     * ```ts\n     * const assistantDeleted =\n     *   await client.beta.assistants.delete('assistant_id');\n     * ```\n     */\n    delete(assistantID, options) {\n        return this._client.delete(path `/assistants/${assistantID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n}\n//# sourceMappingURL=assistants.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { buildHeaders } from \"../../../internal/headers.mjs\";\nexport class Sessions extends APIResource {\n    /**\n     * Create an ephemeral API token for use in client-side applications with the\n     * Realtime API. Can be configured with the same session parameters as the\n     * `session.update` client event.\n     *\n     * It responds with a session object, plus a `client_secret` key which contains a\n     * usable ephemeral API token that can be used to authenticate browser clients for\n     * the Realtime API.\n     *\n     * @example\n     * ```ts\n     * const session =\n     *   await client.beta.realtime.sessions.create();\n     * ```\n     */\n    create(body, options) {\n        return this._client.post('/realtime/sessions', {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n}\n//# sourceMappingURL=sessions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { buildHeaders } from \"../../../internal/headers.mjs\";\nexport class TranscriptionSessions extends APIResource {\n    /**\n     * Create an ephemeral API token for use in client-side applications with the\n     * Realtime API specifically for realtime transcriptions. Can be configured with\n     * the same session parameters as the `transcription_session.update` client event.\n     *\n     * It responds with a session object, plus a `client_secret` key which contains a\n     * usable ephemeral API token that can be used to authenticate browser clients for\n     * the Realtime API.\n     *\n     * @example\n     * ```ts\n     * const transcriptionSession =\n     *   await client.beta.realtime.transcriptionSessions.create();\n     * ```\n     */\n    create(body, options) {\n        return this._client.post('/realtime/transcription_sessions', {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n}\n//# sourceMappingURL=transcription-sessions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport * as SessionsAPI from \"./sessions.mjs\";\nimport { Sessions, } from \"./sessions.mjs\";\nimport * as TranscriptionSessionsAPI from \"./transcription-sessions.mjs\";\nimport { TranscriptionSessions, } from \"./transcription-sessions.mjs\";\nexport class Realtime extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.sessions = new SessionsAPI.Sessions(this._client);\n        this.transcriptionSessions = new TranscriptionSessionsAPI.TranscriptionSessions(this._client);\n    }\n}\nRealtime.Sessions = Sessions;\nRealtime.TranscriptionSessions = TranscriptionSessions;\n//# sourceMappingURL=realtime.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../../internal/headers.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\n/**\n * @deprecated The Assistants API is deprecated in favor of the Responses API\n */\nexport class Messages extends APIResource {\n    /**\n     * Create a message.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    create(threadID, body, options) {\n        return this._client.post(path `/threads/${threadID}/messages`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Retrieve a message.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    retrieve(messageID, params, options) {\n        const { thread_id } = params;\n        return this._client.get(path `/threads/${thread_id}/messages/${messageID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Modifies a message.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    update(messageID, params, options) {\n        const { thread_id, ...body } = params;\n        return this._client.post(path `/threads/${thread_id}/messages/${messageID}`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Returns a list of messages for a given thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    list(threadID, query = {}, options) {\n        return this._client.getAPIList(path `/threads/${threadID}/messages`, (CursorPage), {\n            query,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Deletes a message.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    delete(messageID, params, options) {\n        const { thread_id } = params;\n        return this._client.delete(path `/threads/${thread_id}/messages/${messageID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n}\n//# sourceMappingURL=messages.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../core/resource.mjs\";\nimport { CursorPage } from \"../../../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../../../internal/headers.mjs\";\nimport { path } from \"../../../../internal/utils/path.mjs\";\n/**\n * @deprecated The Assistants API is deprecated in favor of the Responses API\n */\nexport class Steps extends APIResource {\n    /**\n     * Retrieves a run step.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    retrieve(stepID, params, options) {\n        const { thread_id, run_id, ...query } = params;\n        return this._client.get(path `/threads/${thread_id}/runs/${run_id}/steps/${stepID}`, {\n            query,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Returns a list of run steps belonging to a run.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    list(runID, params, options) {\n        const { thread_id, ...query } = params;\n        return this._client.getAPIList(path `/threads/${thread_id}/runs/${runID}/steps`, (CursorPage), {\n            query,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n}\n//# sourceMappingURL=steps.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { OpenAIError } from \"../../core/error.mjs\";\nimport { encodeUTF8 } from \"./bytes.mjs\";\nexport const toBase64 = (data) => {\n    if (!data)\n        return '';\n    if (typeof globalThis.Buffer !== 'undefined') {\n        return globalThis.Buffer.from(data).toString('base64');\n    }\n    if (typeof data === 'string') {\n        data = encodeUTF8(data);\n    }\n    if (typeof btoa !== 'undefined') {\n        return btoa(String.fromCharCode.apply(null, data));\n    }\n    throw new OpenAIError('Cannot generate base64 string; Expected `Buffer` or `btoa` to be defined');\n};\nexport const fromBase64 = (str) => {\n    if (typeof globalThis.Buffer !== 'undefined') {\n        const buf = globalThis.Buffer.from(str, 'base64');\n        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n    if (typeof atob !== 'undefined') {\n        const bstr = atob(str);\n        const buf = new Uint8Array(bstr.length);\n        for (let i = 0; i < bstr.length; i++) {\n            buf[i] = bstr.charCodeAt(i);\n        }\n        return buf;\n    }\n    throw new OpenAIError('Cannot decode base64 string; Expected `Buffer` or `atob` to be defined');\n};\n/**\n * Converts a Base64 encoded string to a Float32Array.\n * @param base64Str - The Base64 encoded string.\n * @returns An Array of numbers interpreted as Float32 values.\n */\nexport const toFloat32Array = (base64Str) => {\n    if (typeof Buffer !== 'undefined') {\n        // for Node.js environment\n        const buf = Buffer.from(base64Str, 'base64');\n        return Array.from(new Float32Array(buf.buffer, buf.byteOffset, buf.length / Float32Array.BYTES_PER_ELEMENT));\n    }\n    else {\n        // for legacy web platform APIs\n        const binaryStr = atob(base64Str);\n        const len = binaryStr.length;\n        const bytes = new Uint8Array(len);\n        for (let i = 0; i < len; i++) {\n            bytes[i] = binaryStr.charCodeAt(i);\n        }\n        return Array.from(new Float32Array(bytes.buffer));\n    }\n};\n//# sourceMappingURL=base64.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n/**\n * Read an environment variable.\n *\n * Trims beginning and trailing whitespace.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nexport const readEnv = (env) => {\n    if (typeof globalThis.process !== 'undefined') {\n        return globalThis.process.env?.[env]?.trim() ?? undefined;\n    }\n    if (typeof globalThis.Deno !== 'undefined') {\n        return globalThis.Deno.env?.get?.(env)?.trim();\n    }\n    return undefined;\n};\n//# sourceMappingURL=env.mjs.map","var _AssistantStream_instances, _a, _AssistantStream_events, _AssistantStream_runStepSnapshots, _AssistantStream_messageSnapshots, _AssistantStream_messageSnapshot, _AssistantStream_finalRun, _AssistantStream_currentContentIndex, _AssistantStream_currentContent, _AssistantStream_currentToolCallIndex, _AssistantStream_currentToolCall, _AssistantStream_currentEvent, _AssistantStream_currentRunSnapshot, _AssistantStream_currentRunStepSnapshot, _AssistantStream_addEvent, _AssistantStream_endRequest, _AssistantStream_handleMessage, _AssistantStream_handleRunStep, _AssistantStream_handleEvent, _AssistantStream_accumulateRunStep, _AssistantStream_accumulateMessage, _AssistantStream_accumulateContent, _AssistantStream_handleRun;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"../internal/tslib.mjs\";\nimport { Stream } from \"../streaming.mjs\";\nimport { APIUserAbortError, OpenAIError } from \"../error.mjs\";\nimport { EventStream } from \"./EventStream.mjs\";\nimport { isObj } from \"../internal/utils.mjs\";\nexport class AssistantStream extends EventStream {\n    constructor() {\n        super(...arguments);\n        _AssistantStream_instances.add(this);\n        //Track all events in a single list for reference\n        _AssistantStream_events.set(this, []);\n        //Used to accumulate deltas\n        //We are accumulating many types so the value here is not strict\n        _AssistantStream_runStepSnapshots.set(this, {});\n        _AssistantStream_messageSnapshots.set(this, {});\n        _AssistantStream_messageSnapshot.set(this, void 0);\n        _AssistantStream_finalRun.set(this, void 0);\n        _AssistantStream_currentContentIndex.set(this, void 0);\n        _AssistantStream_currentContent.set(this, void 0);\n        _AssistantStream_currentToolCallIndex.set(this, void 0);\n        _AssistantStream_currentToolCall.set(this, void 0);\n        //For current snapshot methods\n        _AssistantStream_currentEvent.set(this, void 0);\n        _AssistantStream_currentRunSnapshot.set(this, void 0);\n        _AssistantStream_currentRunStepSnapshot.set(this, void 0);\n    }\n    [(_AssistantStream_events = new WeakMap(), _AssistantStream_runStepSnapshots = new WeakMap(), _AssistantStream_messageSnapshots = new WeakMap(), _AssistantStream_messageSnapshot = new WeakMap(), _AssistantStream_finalRun = new WeakMap(), _AssistantStream_currentContentIndex = new WeakMap(), _AssistantStream_currentContent = new WeakMap(), _AssistantStream_currentToolCallIndex = new WeakMap(), _AssistantStream_currentToolCall = new WeakMap(), _AssistantStream_currentEvent = new WeakMap(), _AssistantStream_currentRunSnapshot = new WeakMap(), _AssistantStream_currentRunStepSnapshot = new WeakMap(), _AssistantStream_instances = new WeakSet(), Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        //Catch all for passing along all events\n        this.on('event', (event) => {\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(event);\n            }\n            else {\n                pushQueue.push(event);\n            }\n        });\n        this.on('end', () => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on('abort', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on('error', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async () => {\n                if (!pushQueue.length) {\n                    if (done) {\n                        return { value: undefined, done: true };\n                    }\n                    return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));\n                }\n                const chunk = pushQueue.shift();\n                return { value: chunk, done: false };\n            },\n            return: async () => {\n                this.abort();\n                return { value: undefined, done: true };\n            },\n        };\n    }\n    static fromReadableStream(stream) {\n        const runner = new _a();\n        runner._run(() => runner._fromReadableStream(stream));\n        return runner;\n    }\n    async _fromReadableStream(readableStream, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        this._connected();\n        const stream = Stream.fromReadableStream(readableStream, this.controller);\n        for await (const event of stream) {\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    toReadableStream() {\n        const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n        return stream.toReadableStream();\n    }\n    static createToolAssistantStream(runId, runs, params, options) {\n        const runner = new _a();\n        runner._run(() => runner._runToolAssistantStream(runId, runs, params, {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n        }));\n        return runner;\n    }\n    async _createToolAssistantStream(run, runId, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        const body = { ...params, stream: true };\n        const stream = await run.submitToolOutputs(runId, body, {\n            ...options,\n            signal: this.controller.signal,\n        });\n        this._connected();\n        for await (const event of stream) {\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    static createThreadAssistantStream(params, thread, options) {\n        const runner = new _a();\n        runner._run(() => runner._threadAssistantStream(params, thread, {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n        }));\n        return runner;\n    }\n    static createAssistantStream(threadId, runs, params, options) {\n        const runner = new _a();\n        runner._run(() => runner._runAssistantStream(threadId, runs, params, {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n        }));\n        return runner;\n    }\n    currentEvent() {\n        return __classPrivateFieldGet(this, _AssistantStream_currentEvent, \"f\");\n    }\n    currentRun() {\n        return __classPrivateFieldGet(this, _AssistantStream_currentRunSnapshot, \"f\");\n    }\n    currentMessageSnapshot() {\n        return __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\");\n    }\n    currentRunStepSnapshot() {\n        return __classPrivateFieldGet(this, _AssistantStream_currentRunStepSnapshot, \"f\");\n    }\n    async finalRunSteps() {\n        await this.done();\n        return Object.values(__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\"));\n    }\n    async finalMessages() {\n        await this.done();\n        return Object.values(__classPrivateFieldGet(this, _AssistantStream_messageSnapshots, \"f\"));\n    }\n    async finalRun() {\n        await this.done();\n        if (!__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\"))\n            throw Error('Final run was not received.');\n        return __classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\");\n    }\n    async _createThreadAssistantStream(thread, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        const body = { ...params, stream: true };\n        const stream = await thread.createAndRun(body, { ...options, signal: this.controller.signal });\n        this._connected();\n        for await (const event of stream) {\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    async _createAssistantStream(run, threadId, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        const body = { ...params, stream: true };\n        const stream = await run.create(threadId, body, { ...options, signal: this.controller.signal });\n        this._connected();\n        for await (const event of stream) {\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_addEvent).call(this, event);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addRun(__classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_endRequest).call(this));\n    }\n    static accumulateDelta(acc, delta) {\n        for (const [key, deltaValue] of Object.entries(delta)) {\n            if (!acc.hasOwnProperty(key)) {\n                acc[key] = deltaValue;\n                continue;\n            }\n            let accValue = acc[key];\n            if (accValue === null || accValue === undefined) {\n                acc[key] = deltaValue;\n                continue;\n            }\n            // We don't accumulate these special properties\n            if (key === 'index' || key === 'type') {\n                acc[key] = deltaValue;\n                continue;\n            }\n            // Type-specific accumulation logic\n            if (typeof accValue === 'string' && typeof deltaValue === 'string') {\n                accValue += deltaValue;\n            }\n            else if (typeof accValue === 'number' && typeof deltaValue === 'number') {\n                accValue += deltaValue;\n            }\n            else if (isObj(accValue) && isObj(deltaValue)) {\n                accValue = this.accumulateDelta(accValue, deltaValue);\n            }\n            else if (Array.isArray(accValue) && Array.isArray(deltaValue)) {\n                if (accValue.every((x) => typeof x === 'string' || typeof x === 'number')) {\n                    accValue.push(...deltaValue); // Use spread syntax for efficient addition\n                    continue;\n                }\n                for (const deltaEntry of deltaValue) {\n                    if (!isObj(deltaEntry)) {\n                        throw new Error(`Expected array delta entry to be an object but got: ${deltaEntry}`);\n                    }\n                    const index = deltaEntry['index'];\n                    if (index == null) {\n                        console.error(deltaEntry);\n                        throw new Error('Expected array delta entry to have an `index` property');\n                    }\n                    if (typeof index !== 'number') {\n                        throw new Error(`Expected array delta entry \\`index\\` property to be a number but got ${index}`);\n                    }\n                    const accEntry = accValue[index];\n                    if (accEntry == null) {\n                        accValue.push(deltaEntry);\n                    }\n                    else {\n                        accValue[index] = this.accumulateDelta(accEntry, deltaEntry);\n                    }\n                }\n                continue;\n            }\n            else {\n                throw Error(`Unhandled record type: ${key}, deltaValue: ${deltaValue}, accValue: ${accValue}`);\n            }\n            acc[key] = accValue;\n        }\n        return acc;\n    }\n    _addRun(run) {\n        return run;\n    }\n    async _threadAssistantStream(params, thread, options) {\n        return await this._createThreadAssistantStream(thread, params, options);\n    }\n    async _runAssistantStream(threadId, runs, params, options) {\n        return await this._createAssistantStream(runs, threadId, params, options);\n    }\n    async _runToolAssistantStream(runId, runs, params, options) {\n        return await this._createToolAssistantStream(runs, runId, params, options);\n    }\n}\n_a = AssistantStream, _AssistantStream_addEvent = function _AssistantStream_addEvent(event) {\n    if (this.ended)\n        return;\n    __classPrivateFieldSet(this, _AssistantStream_currentEvent, event, \"f\");\n    __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleEvent).call(this, event);\n    switch (event.event) {\n        case 'thread.created':\n            //No action on this event.\n            break;\n        case 'thread.run.created':\n        case 'thread.run.queued':\n        case 'thread.run.in_progress':\n        case 'thread.run.requires_action':\n        case 'thread.run.completed':\n        case 'thread.run.incomplete':\n        case 'thread.run.failed':\n        case 'thread.run.cancelling':\n        case 'thread.run.cancelled':\n        case 'thread.run.expired':\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRun).call(this, event);\n            break;\n        case 'thread.run.step.created':\n        case 'thread.run.step.in_progress':\n        case 'thread.run.step.delta':\n        case 'thread.run.step.completed':\n        case 'thread.run.step.failed':\n        case 'thread.run.step.cancelled':\n        case 'thread.run.step.expired':\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleRunStep).call(this, event);\n            break;\n        case 'thread.message.created':\n        case 'thread.message.in_progress':\n        case 'thread.message.delta':\n        case 'thread.message.completed':\n        case 'thread.message.incomplete':\n            __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_handleMessage).call(this, event);\n            break;\n        case 'error':\n            //This is included for completeness, but errors are processed in the SSE event processing so this should not occur\n            throw new Error('Encountered an error event in event processing - errors should be processed earlier');\n        default:\n            assertNever(event);\n    }\n}, _AssistantStream_endRequest = function _AssistantStream_endRequest() {\n    if (this.ended) {\n        throw new OpenAIError(`stream has ended, this shouldn't happen`);\n    }\n    if (!__classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\"))\n        throw Error('Final run has not been received');\n    return __classPrivateFieldGet(this, _AssistantStream_finalRun, \"f\");\n}, _AssistantStream_handleMessage = function _AssistantStream_handleMessage(event) {\n    const [accumulatedMessage, newContent] = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateMessage).call(this, event, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n    __classPrivateFieldSet(this, _AssistantStream_messageSnapshot, accumulatedMessage, \"f\");\n    __classPrivateFieldGet(this, _AssistantStream_messageSnapshots, \"f\")[accumulatedMessage.id] = accumulatedMessage;\n    for (const content of newContent) {\n        const snapshotContent = accumulatedMessage.content[content.index];\n        if (snapshotContent?.type == 'text') {\n            this._emit('textCreated', snapshotContent.text);\n        }\n    }\n    switch (event.event) {\n        case 'thread.message.created':\n            this._emit('messageCreated', event.data);\n            break;\n        case 'thread.message.in_progress':\n            break;\n        case 'thread.message.delta':\n            this._emit('messageDelta', event.data.delta, accumulatedMessage);\n            if (event.data.delta.content) {\n                for (const content of event.data.delta.content) {\n                    //If it is text delta, emit a text delta event\n                    if (content.type == 'text' && content.text) {\n                        let textDelta = content.text;\n                        let snapshot = accumulatedMessage.content[content.index];\n                        if (snapshot && snapshot.type == 'text') {\n                            this._emit('textDelta', textDelta, snapshot.text);\n                        }\n                        else {\n                            throw Error('The snapshot associated with this text delta is not text or missing');\n                        }\n                    }\n                    if (content.index != __classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\")) {\n                        //See if we have in progress content\n                        if (__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\")) {\n                            switch (__classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").type) {\n                                case 'text':\n                                    this._emit('textDone', __classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").text, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                                    break;\n                                case 'image_file':\n                                    this._emit('imageFileDone', __classPrivateFieldGet(this, _AssistantStream_currentContent, \"f\").image_file, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                                    break;\n                            }\n                        }\n                        __classPrivateFieldSet(this, _AssistantStream_currentContentIndex, content.index, \"f\");\n                    }\n                    __classPrivateFieldSet(this, _AssistantStream_currentContent, accumulatedMessage.content[content.index], \"f\");\n                }\n            }\n            break;\n        case 'thread.message.completed':\n        case 'thread.message.incomplete':\n            //We emit the latest content we were working on on completion (including incomplete)\n            if (__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\") !== undefined) {\n                const currentContent = event.data.content[__classPrivateFieldGet(this, _AssistantStream_currentContentIndex, \"f\")];\n                if (currentContent) {\n                    switch (currentContent.type) {\n                        case 'image_file':\n                            this._emit('imageFileDone', currentContent.image_file, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                            break;\n                        case 'text':\n                            this._emit('textDone', currentContent.text, __classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\"));\n                            break;\n                    }\n                }\n            }\n            if (__classPrivateFieldGet(this, _AssistantStream_messageSnapshot, \"f\")) {\n                this._emit('messageDone', event.data);\n            }\n            __classPrivateFieldSet(this, _AssistantStream_messageSnapshot, undefined, \"f\");\n    }\n}, _AssistantStream_handleRunStep = function _AssistantStream_handleRunStep(event) {\n    const accumulatedRunStep = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateRunStep).call(this, event);\n    __classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, accumulatedRunStep, \"f\");\n    switch (event.event) {\n        case 'thread.run.step.created':\n            this._emit('runStepCreated', event.data);\n            break;\n        case 'thread.run.step.delta':\n            const delta = event.data.delta;\n            if (delta.step_details &&\n                delta.step_details.type == 'tool_calls' &&\n                delta.step_details.tool_calls &&\n                accumulatedRunStep.step_details.type == 'tool_calls') {\n                for (const toolCall of delta.step_details.tool_calls) {\n                    if (toolCall.index == __classPrivateFieldGet(this, _AssistantStream_currentToolCallIndex, \"f\")) {\n                        this._emit('toolCallDelta', toolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index]);\n                    }\n                    else {\n                        if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n                            this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n                        }\n                        __classPrivateFieldSet(this, _AssistantStream_currentToolCallIndex, toolCall.index, \"f\");\n                        __classPrivateFieldSet(this, _AssistantStream_currentToolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index], \"f\");\n                        if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"))\n                            this._emit('toolCallCreated', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n                    }\n                }\n            }\n            this._emit('runStepDelta', event.data.delta, accumulatedRunStep);\n            break;\n        case 'thread.run.step.completed':\n        case 'thread.run.step.failed':\n        case 'thread.run.step.cancelled':\n        case 'thread.run.step.expired':\n            __classPrivateFieldSet(this, _AssistantStream_currentRunStepSnapshot, undefined, \"f\");\n            const details = event.data.step_details;\n            if (details.type == 'tool_calls') {\n                if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n                    this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n                    __classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, \"f\");\n                }\n            }\n            this._emit('runStepDone', event.data, accumulatedRunStep);\n            break;\n        case 'thread.run.step.in_progress':\n            break;\n    }\n}, _AssistantStream_handleEvent = function _AssistantStream_handleEvent(event) {\n    __classPrivateFieldGet(this, _AssistantStream_events, \"f\").push(event);\n    this._emit('event', event);\n}, _AssistantStream_accumulateRunStep = function _AssistantStream_accumulateRunStep(event) {\n    switch (event.event) {\n        case 'thread.run.step.created':\n            __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\n            return event.data;\n        case 'thread.run.step.delta':\n            let snapshot = __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n            if (!snapshot) {\n                throw Error('Received a RunStepDelta before creation of a snapshot');\n            }\n            let data = event.data;\n            if (data.delta) {\n                const accumulated = _a.accumulateDelta(snapshot, data.delta);\n                __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = accumulated;\n            }\n            return __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n        case 'thread.run.step.completed':\n        case 'thread.run.step.failed':\n        case 'thread.run.step.cancelled':\n        case 'thread.run.step.expired':\n        case 'thread.run.step.in_progress':\n            __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id] = event.data;\n            break;\n    }\n    if (__classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id])\n        return __classPrivateFieldGet(this, _AssistantStream_runStepSnapshots, \"f\")[event.data.id];\n    throw new Error('No snapshot available');\n}, _AssistantStream_accumulateMessage = function _AssistantStream_accumulateMessage(event, snapshot) {\n    let newContent = [];\n    switch (event.event) {\n        case 'thread.message.created':\n            //On creation the snapshot is just the initial message\n            return [event.data, newContent];\n        case 'thread.message.delta':\n            if (!snapshot) {\n                throw Error('Received a delta with no existing snapshot (there should be one from message creation)');\n            }\n            let data = event.data;\n            //If this delta does not have content, nothing to process\n            if (data.delta.content) {\n                for (const contentElement of data.delta.content) {\n                    if (contentElement.index in snapshot.content) {\n                        let currentContent = snapshot.content[contentElement.index];\n                        snapshot.content[contentElement.index] = __classPrivateFieldGet(this, _AssistantStream_instances, \"m\", _AssistantStream_accumulateContent).call(this, contentElement, currentContent);\n                    }\n                    else {\n                        snapshot.content[contentElement.index] = contentElement;\n                        // This is a new element\n                        newContent.push(contentElement);\n                    }\n                }\n            }\n            return [snapshot, newContent];\n        case 'thread.message.in_progress':\n        case 'thread.message.completed':\n        case 'thread.message.incomplete':\n            //No changes on other thread events\n            if (snapshot) {\n                return [snapshot, newContent];\n            }\n            else {\n                throw Error('Received thread message event with no existing snapshot');\n            }\n    }\n    throw Error('Tried to accumulate a non-message event');\n}, _AssistantStream_accumulateContent = function _AssistantStream_accumulateContent(contentElement, currentContent) {\n    return _a.accumulateDelta(currentContent, contentElement);\n}, _AssistantStream_handleRun = function _AssistantStream_handleRun(event) {\n    __classPrivateFieldSet(this, _AssistantStream_currentRunSnapshot, event.data, \"f\");\n    switch (event.event) {\n        case 'thread.run.created':\n            break;\n        case 'thread.run.queued':\n            break;\n        case 'thread.run.in_progress':\n            break;\n        case 'thread.run.requires_action':\n        case 'thread.run.cancelled':\n        case 'thread.run.failed':\n        case 'thread.run.completed':\n        case 'thread.run.expired':\n        case 'thread.run.incomplete':\n            __classPrivateFieldSet(this, _AssistantStream_finalRun, event.data, \"f\");\n            if (__classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\")) {\n                this._emit('toolCallDone', __classPrivateFieldGet(this, _AssistantStream_currentToolCall, \"f\"));\n                __classPrivateFieldSet(this, _AssistantStream_currentToolCall, undefined, \"f\");\n            }\n            break;\n        case 'thread.run.cancelling':\n            break;\n    }\n};\nfunction assertNever(_x) { }\n//# sourceMappingURL=AssistantStream.mjs.map","var _ResponseStream_instances, _ResponseStream_params, _ResponseStream_currentResponseSnapshot, _ResponseStream_finalResponse, _ResponseStream_beginRequest, _ResponseStream_addEvent, _ResponseStream_endRequest, _ResponseStream_accumulateResponse;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"../../internal/tslib.mjs\";\nimport { APIUserAbortError, OpenAIError } from \"../../error.mjs\";\nimport { EventStream } from \"../EventStream.mjs\";\nimport { maybeParseResponse } from \"../ResponsesParser.mjs\";\nexport class ResponseStream extends EventStream {\n    constructor(params) {\n        super();\n        _ResponseStream_instances.add(this);\n        _ResponseStream_params.set(this, void 0);\n        _ResponseStream_currentResponseSnapshot.set(this, void 0);\n        _ResponseStream_finalResponse.set(this, void 0);\n        __classPrivateFieldSet(this, _ResponseStream_params, params, \"f\");\n    }\n    static createResponse(client, params, options) {\n        const runner = new ResponseStream(params);\n        runner._run(() => runner._createOrRetrieveResponse(client, params, {\n            ...options,\n            headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' },\n        }));\n        return runner;\n    }\n    async _createOrRetrieveResponse(client, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_beginRequest).call(this);\n        let stream;\n        let starting_after = null;\n        if ('response_id' in params) {\n            stream = await client.responses.retrieve(params.response_id, { stream: true }, { ...options, signal: this.controller.signal, stream: true });\n            starting_after = params.starting_after ?? null;\n        }\n        else {\n            stream = await client.responses.create({ ...params, stream: true }, { ...options, signal: this.controller.signal });\n        }\n        this._connected();\n        for await (const event of stream) {\n            __classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_addEvent).call(this, event, starting_after);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return __classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_endRequest).call(this);\n    }\n    [(_ResponseStream_params = new WeakMap(), _ResponseStream_currentResponseSnapshot = new WeakMap(), _ResponseStream_finalResponse = new WeakMap(), _ResponseStream_instances = new WeakSet(), _ResponseStream_beginRequest = function _ResponseStream_beginRequest() {\n        if (this.ended)\n            return;\n        __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, undefined, \"f\");\n    }, _ResponseStream_addEvent = function _ResponseStream_addEvent(event, starting_after) {\n        if (this.ended)\n            return;\n        const maybeEmit = (name, event) => {\n            if (starting_after == null || event.sequence_number > starting_after) {\n                this._emit(name, event);\n            }\n        };\n        const response = __classPrivateFieldGet(this, _ResponseStream_instances, \"m\", _ResponseStream_accumulateResponse).call(this, event);\n        maybeEmit('event', event);\n        switch (event.type) {\n            case 'response.output_text.delta': {\n                const output = response.output[event.output_index];\n                if (!output) {\n                    throw new OpenAIError(`missing output at index ${event.output_index}`);\n                }\n                if (output.type === 'message') {\n                    const content = output.content[event.content_index];\n                    if (!content) {\n                        throw new OpenAIError(`missing content at index ${event.content_index}`);\n                    }\n                    if (content.type !== 'output_text') {\n                        throw new OpenAIError(`expected content to be 'output_text', got ${content.type}`);\n                    }\n                    maybeEmit('response.output_text.delta', {\n                        ...event,\n                        snapshot: content.text,\n                    });\n                }\n                break;\n            }\n            case 'response.function_call_arguments.delta': {\n                const output = response.output[event.output_index];\n                if (!output) {\n                    throw new OpenAIError(`missing output at index ${event.output_index}`);\n                }\n                if (output.type === 'function_call') {\n                    maybeEmit('response.function_call_arguments.delta', {\n                        ...event,\n                        snapshot: output.arguments,\n                    });\n                }\n                break;\n            }\n            default:\n                maybeEmit(event.type, event);\n                break;\n        }\n    }, _ResponseStream_endRequest = function _ResponseStream_endRequest() {\n        if (this.ended) {\n            throw new OpenAIError(`stream has ended, this shouldn't happen`);\n        }\n        const snapshot = __classPrivateFieldGet(this, _ResponseStream_currentResponseSnapshot, \"f\");\n        if (!snapshot) {\n            throw new OpenAIError(`request ended without sending any events`);\n        }\n        __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, undefined, \"f\");\n        const parsedResponse = finalizeResponse(snapshot, __classPrivateFieldGet(this, _ResponseStream_params, \"f\"));\n        __classPrivateFieldSet(this, _ResponseStream_finalResponse, parsedResponse, \"f\");\n        return parsedResponse;\n    }, _ResponseStream_accumulateResponse = function _ResponseStream_accumulateResponse(event) {\n        let snapshot = __classPrivateFieldGet(this, _ResponseStream_currentResponseSnapshot, \"f\");\n        if (!snapshot) {\n            if (event.type !== 'response.created') {\n                throw new OpenAIError(`When snapshot hasn't been set yet, expected 'response.created' event, got ${event.type}`);\n            }\n            snapshot = __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, event.response, \"f\");\n            return snapshot;\n        }\n        switch (event.type) {\n            case 'response.output_item.added': {\n                snapshot.output.push(event.item);\n                break;\n            }\n            case 'response.content_part.added': {\n                const output = snapshot.output[event.output_index];\n                if (!output) {\n                    throw new OpenAIError(`missing output at index ${event.output_index}`);\n                }\n                if (output.type === 'message') {\n                    output.content.push(event.part);\n                }\n                break;\n            }\n            case 'response.output_text.delta': {\n                const output = snapshot.output[event.output_index];\n                if (!output) {\n                    throw new OpenAIError(`missing output at index ${event.output_index}`);\n                }\n                if (output.type === 'message') {\n                    const content = output.content[event.content_index];\n                    if (!content) {\n                        throw new OpenAIError(`missing content at index ${event.content_index}`);\n                    }\n                    if (content.type !== 'output_text') {\n                        throw new OpenAIError(`expected content to be 'output_text', got ${content.type}`);\n                    }\n                    content.text += event.delta;\n                }\n                break;\n            }\n            case 'response.function_call_arguments.delta': {\n                const output = snapshot.output[event.output_index];\n                if (!output) {\n                    throw new OpenAIError(`missing output at index ${event.output_index}`);\n                }\n                if (output.type === 'function_call') {\n                    output.arguments += event.delta;\n                }\n                break;\n            }\n            case 'response.completed': {\n                __classPrivateFieldSet(this, _ResponseStream_currentResponseSnapshot, event.response, \"f\");\n                break;\n            }\n        }\n        return snapshot;\n    }, Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        this.on('event', (event) => {\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(event);\n            }\n            else {\n                pushQueue.push(event);\n            }\n        });\n        this.on('end', () => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on('abort', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on('error', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async () => {\n                if (!pushQueue.length) {\n                    if (done) {\n                        return { value: undefined, done: true };\n                    }\n                    return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((event) => (event ? { value: event, done: false } : { value: undefined, done: true }));\n                }\n                const event = pushQueue.shift();\n                return { value: event, done: false };\n            },\n            return: async () => {\n                this.abort();\n                return { value: undefined, done: true };\n            },\n        };\n    }\n    /**\n     * @returns a promise that resolves with the final Response, or rejects\n     * if an error occurred or the stream ended prematurely without producing a REsponse.\n     */\n    async finalResponse() {\n        await this.done();\n        const response = __classPrivateFieldGet(this, _ResponseStream_finalResponse, \"f\");\n        if (!response)\n            throw new OpenAIError('stream ended without producing a ChatCompletion');\n        return response;\n    }\n}\nfunction finalizeResponse(snapshot, params) {\n    return maybeParseResponse(snapshot, params);\n}\n//# sourceMappingURL=ResponseStream.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _a, _OpenAI_encoder;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"./internal/tslib.mjs\";\nimport { uuid4 } from \"./internal/utils/uuid.mjs\";\nimport { validatePositiveInteger, isAbsoluteURL, safeJSON } from \"./internal/utils/values.mjs\";\nimport { sleep } from \"./internal/utils/sleep.mjs\";\nimport { parseLogLevel } from \"./internal/utils/log.mjs\";\nimport { castToError, isAbortError } from \"./internal/errors.mjs\";\nimport { getPlatformHeaders } from \"./internal/detect-platform.mjs\";\nimport * as Shims from \"./internal/shims.mjs\";\nimport * as Opts from \"./internal/request-options.mjs\";\nimport * as qs from \"./internal/qs/index.mjs\";\nimport { VERSION } from \"./version.mjs\";\nimport * as Errors from \"./core/error.mjs\";\nimport * as Pagination from \"./core/pagination.mjs\";\nimport * as Uploads from \"./core/uploads.mjs\";\nimport * as API from \"./resources/index.mjs\";\nimport { APIPromise } from \"./core/api-promise.mjs\";\nimport { isRunningInBrowser } from \"./internal/detect-platform.mjs\";\nimport { buildHeaders } from \"./internal/headers.mjs\";\nimport { Batches, } from \"./resources/batches.mjs\";\nimport { Completions, } from \"./resources/completions.mjs\";\nimport { Embeddings, } from \"./resources/embeddings.mjs\";\nimport { Files, } from \"./resources/files.mjs\";\nimport { Images, } from \"./resources/images.mjs\";\nimport { Models } from \"./resources/models.mjs\";\nimport { Moderations, } from \"./resources/moderations.mjs\";\nimport { readEnv } from \"./internal/utils/env.mjs\";\nimport { formatRequestDetails, loggerFor } from \"./internal/utils/log.mjs\";\nimport { isEmptyObj } from \"./internal/utils/values.mjs\";\nimport { Audio } from \"./resources/audio/audio.mjs\";\nimport { Beta } from \"./resources/beta/beta.mjs\";\nimport { Chat } from \"./resources/chat/chat.mjs\";\nimport { Containers, } from \"./resources/containers/containers.mjs\";\nimport { Evals, } from \"./resources/evals/evals.mjs\";\nimport { FineTuning } from \"./resources/fine-tuning/fine-tuning.mjs\";\nimport { Graders } from \"./resources/graders/graders.mjs\";\nimport { Responses } from \"./resources/responses/responses.mjs\";\nimport { Uploads as UploadsAPIUploads, } from \"./resources/uploads/uploads.mjs\";\nimport { VectorStores, } from \"./resources/vector-stores/vector-stores.mjs\";\n/**\n * API Client for interfacing with the OpenAI API.\n */\nexport class OpenAI {\n    /**\n     * API Client for interfacing with the OpenAI API.\n     *\n     * @param {string | undefined} [opts.apiKey=process.env['OPENAI_API_KEY'] ?? undefined]\n     * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\n     * @param {string | null | undefined} [opts.project=process.env['OPENAI_PROJECT_ID'] ?? null]\n     * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL'] ?? https://api.openai.com/v1] - Override the default base URL for the API.\n     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n     * @param {MergedRequestInit} [opts.fetchOptions] - Additional `RequestInit` options to be passed to `fetch` calls.\n     * @param {Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n     * @param {HeadersLike} opts.defaultHeaders - Default headers to include with every request to the API.\n     * @param {Record<string, string | undefined>} opts.defaultQuery - Default query parameters to include with every request to the API.\n     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n     */\n    constructor({ baseURL = readEnv('OPENAI_BASE_URL'), apiKey = readEnv('OPENAI_API_KEY'), organization = readEnv('OPENAI_ORG_ID') ?? null, project = readEnv('OPENAI_PROJECT_ID') ?? null, ...opts } = {}) {\n        _OpenAI_encoder.set(this, void 0);\n        this.completions = new API.Completions(this);\n        this.chat = new API.Chat(this);\n        this.embeddings = new API.Embeddings(this);\n        this.files = new API.Files(this);\n        this.images = new API.Images(this);\n        this.audio = new API.Audio(this);\n        this.moderations = new API.Moderations(this);\n        this.models = new API.Models(this);\n        this.fineTuning = new API.FineTuning(this);\n        this.graders = new API.Graders(this);\n        this.vectorStores = new API.VectorStores(this);\n        this.beta = new API.Beta(this);\n        this.batches = new API.Batches(this);\n        this.uploads = new API.Uploads(this);\n        this.responses = new API.Responses(this);\n        this.evals = new API.Evals(this);\n        this.containers = new API.Containers(this);\n        if (apiKey === undefined) {\n            throw new Errors.OpenAIError(\"The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).\");\n        }\n        const options = {\n            apiKey,\n            organization,\n            project,\n            ...opts,\n            baseURL: baseURL || `https://api.openai.com/v1`,\n        };\n        if (!options.dangerouslyAllowBrowser && isRunningInBrowser()) {\n            throw new Errors.OpenAIError(\"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\\n\\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\\n\");\n        }\n        this.baseURL = options.baseURL;\n        this.timeout = options.timeout ?? _a.DEFAULT_TIMEOUT /* 10 minutes */;\n        this.logger = options.logger ?? console;\n        const defaultLogLevel = 'warn';\n        // Set default logLevel early so that we can log a warning in parseLogLevel.\n        this.logLevel = defaultLogLevel;\n        this.logLevel =\n            parseLogLevel(options.logLevel, 'ClientOptions.logLevel', this) ??\n                parseLogLevel(readEnv('OPENAI_LOG'), \"process.env['OPENAI_LOG']\", this) ??\n                defaultLogLevel;\n        this.fetchOptions = options.fetchOptions;\n        this.maxRetries = options.maxRetries ?? 2;\n        this.fetch = options.fetch ?? Shims.getDefaultFetch();\n        __classPrivateFieldSet(this, _OpenAI_encoder, Opts.FallbackEncoder, \"f\");\n        this._options = options;\n        this.apiKey = apiKey;\n        this.organization = organization;\n        this.project = project;\n    }\n    /**\n     * Create a new client instance re-using the same options given to the current client with optional overriding.\n     */\n    withOptions(options) {\n        return new this.constructor({\n            ...this._options,\n            baseURL: this.baseURL,\n            maxRetries: this.maxRetries,\n            timeout: this.timeout,\n            logger: this.logger,\n            logLevel: this.logLevel,\n            fetchOptions: this.fetchOptions,\n            apiKey: this.apiKey,\n            organization: this.organization,\n            project: this.project,\n            ...options,\n        });\n    }\n    defaultQuery() {\n        return this._options.defaultQuery;\n    }\n    validateHeaders({ values, nulls }) {\n        return;\n    }\n    authHeaders(opts) {\n        return buildHeaders([{ Authorization: `Bearer ${this.apiKey}` }]);\n    }\n    stringifyQuery(query) {\n        return qs.stringify(query, { arrayFormat: 'brackets' });\n    }\n    getUserAgent() {\n        return `${this.constructor.name}/JS ${VERSION}`;\n    }\n    defaultIdempotencyKey() {\n        return `stainless-node-retry-${uuid4()}`;\n    }\n    makeStatusError(status, error, message, headers) {\n        return Errors.APIError.generate(status, error, message, headers);\n    }\n    buildURL(path, query) {\n        const url = isAbsoluteURL(path) ?\n            new URL(path)\n            : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n        const defaultQuery = this.defaultQuery();\n        if (!isEmptyObj(defaultQuery)) {\n            query = { ...defaultQuery, ...query };\n        }\n        if (typeof query === 'object' && query && !Array.isArray(query)) {\n            url.search = this.stringifyQuery(query);\n        }\n        return url.toString();\n    }\n    /**\n     * Used as a callback for mutating the given `FinalRequestOptions` object.\n     */\n    async prepareOptions(options) { }\n    /**\n     * Used as a callback for mutating the given `RequestInit` object.\n     *\n     * This is useful for cases where you want to add certain headers based off of\n     * the request properties, e.g. `method` or `url`.\n     */\n    async prepareRequest(request, { url, options }) { }\n    get(path, opts) {\n        return this.methodRequest('get', path, opts);\n    }\n    post(path, opts) {\n        return this.methodRequest('post', path, opts);\n    }\n    patch(path, opts) {\n        return this.methodRequest('patch', path, opts);\n    }\n    put(path, opts) {\n        return this.methodRequest('put', path, opts);\n    }\n    delete(path, opts) {\n        return this.methodRequest('delete', path, opts);\n    }\n    methodRequest(method, path, opts) {\n        return this.request(Promise.resolve(opts).then((opts) => {\n            return { method, path, ...opts };\n        }));\n    }\n    request(options, remainingRetries = null) {\n        return new APIPromise(this, this.makeRequest(options, remainingRetries, undefined));\n    }\n    async makeRequest(optionsInput, retriesRemaining, retryOfRequestLogID) {\n        const options = await optionsInput;\n        const maxRetries = options.maxRetries ?? this.maxRetries;\n        if (retriesRemaining == null) {\n            retriesRemaining = maxRetries;\n        }\n        await this.prepareOptions(options);\n        const { req, url, timeout } = this.buildRequest(options, { retryCount: maxRetries - retriesRemaining });\n        await this.prepareRequest(req, { url, options });\n        /** Not an API request ID, just for correlating local log entries. */\n        const requestLogID = 'log_' + ((Math.random() * (1 << 24)) | 0).toString(16).padStart(6, '0');\n        const retryLogStr = retryOfRequestLogID === undefined ? '' : `, retryOf: ${retryOfRequestLogID}`;\n        const startTime = Date.now();\n        loggerFor(this).debug(`[${requestLogID}] sending request`, formatRequestDetails({\n            retryOfRequestLogID,\n            method: options.method,\n            url,\n            options,\n            headers: req.headers,\n        }));\n        if (options.signal?.aborted) {\n            throw new Errors.APIUserAbortError();\n        }\n        const controller = new AbortController();\n        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n        const headersTime = Date.now();\n        if (response instanceof Error) {\n            const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n            if (options.signal?.aborted) {\n                throw new Errors.APIUserAbortError();\n            }\n            // detect native connection timeout errors\n            // deno throws \"TypeError: error sending request for url (https://example/): client error (Connect): tcp connect error: Operation timed out (os error 60): Operation timed out (os error 60)\"\n            // undici throws \"TypeError: fetch failed\" with cause \"ConnectTimeoutError: Connect Timeout Error (attempted address: example:443, timeout: 1ms)\"\n            // others do not provide enough information to distinguish timeouts from other connection errors\n            const isTimeout = isAbortError(response) ||\n                /timed? ?out/i.test(String(response) + ('cause' in response ? String(response.cause) : ''));\n            if (retriesRemaining) {\n                loggerFor(this).info(`[${requestLogID}] connection ${isTimeout ? 'timed out' : 'failed'} - ${retryMessage}`);\n                loggerFor(this).debug(`[${requestLogID}] connection ${isTimeout ? 'timed out' : 'failed'} (${retryMessage})`, formatRequestDetails({\n                    retryOfRequestLogID,\n                    url,\n                    durationMs: headersTime - startTime,\n                    message: response.message,\n                }));\n                return this.retryRequest(options, retriesRemaining, retryOfRequestLogID ?? requestLogID);\n            }\n            loggerFor(this).info(`[${requestLogID}] connection ${isTimeout ? 'timed out' : 'failed'} - error; no more retries left`);\n            loggerFor(this).debug(`[${requestLogID}] connection ${isTimeout ? 'timed out' : 'failed'} (error; no more retries left)`, formatRequestDetails({\n                retryOfRequestLogID,\n                url,\n                durationMs: headersTime - startTime,\n                message: response.message,\n            }));\n            if (isTimeout) {\n                throw new Errors.APIConnectionTimeoutError();\n            }\n            throw new Errors.APIConnectionError({ cause: response });\n        }\n        const specialHeaders = [...response.headers.entries()]\n            .filter(([name]) => name === 'x-request-id')\n            .map(([name, value]) => ', ' + name + ': ' + JSON.stringify(value))\n            .join('');\n        const responseInfo = `[${requestLogID}${retryLogStr}${specialHeaders}] ${req.method} ${url} ${response.ok ? 'succeeded' : 'failed'} with status ${response.status} in ${headersTime - startTime}ms`;\n        if (!response.ok) {\n            const shouldRetry = this.shouldRetry(response);\n            if (retriesRemaining && shouldRetry) {\n                const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n                // We don't need the body of this response.\n                await Shims.CancelReadableStream(response.body);\n                loggerFor(this).info(`${responseInfo} - ${retryMessage}`);\n                loggerFor(this).debug(`[${requestLogID}] response error (${retryMessage})`, formatRequestDetails({\n                    retryOfRequestLogID,\n                    url: response.url,\n                    status: response.status,\n                    headers: response.headers,\n                    durationMs: headersTime - startTime,\n                }));\n                return this.retryRequest(options, retriesRemaining, retryOfRequestLogID ?? requestLogID, response.headers);\n            }\n            const retryMessage = shouldRetry ? `error; no more retries left` : `error; not retryable`;\n            loggerFor(this).info(`${responseInfo} - ${retryMessage}`);\n            const errText = await response.text().catch((err) => castToError(err).message);\n            const errJSON = safeJSON(errText);\n            const errMessage = errJSON ? undefined : errText;\n            loggerFor(this).debug(`[${requestLogID}] response error (${retryMessage})`, formatRequestDetails({\n                retryOfRequestLogID,\n                url: response.url,\n                status: response.status,\n                headers: response.headers,\n                message: errMessage,\n                durationMs: Date.now() - startTime,\n            }));\n            const err = this.makeStatusError(response.status, errJSON, errMessage, response.headers);\n            throw err;\n        }\n        loggerFor(this).info(responseInfo);\n        loggerFor(this).debug(`[${requestLogID}] response start`, formatRequestDetails({\n            retryOfRequestLogID,\n            url: response.url,\n            status: response.status,\n            headers: response.headers,\n            durationMs: headersTime - startTime,\n        }));\n        return { response, options, controller, requestLogID, retryOfRequestLogID, startTime };\n    }\n    getAPIList(path, Page, opts) {\n        return this.requestAPIList(Page, { method: 'get', path, ...opts });\n    }\n    requestAPIList(Page, options) {\n        const request = this.makeRequest(options, null, undefined);\n        return new Pagination.PagePromise(this, request, Page);\n    }\n    async fetchWithTimeout(url, init, ms, controller) {\n        const { signal, method, ...options } = init || {};\n        if (signal)\n            signal.addEventListener('abort', () => controller.abort());\n        const timeout = setTimeout(() => controller.abort(), ms);\n        const isReadableBody = (globalThis.ReadableStream && options.body instanceof globalThis.ReadableStream) ||\n            (typeof options.body === 'object' && options.body !== null && Symbol.asyncIterator in options.body);\n        const fetchOptions = {\n            signal: controller.signal,\n            ...(isReadableBody ? { duplex: 'half' } : {}),\n            method: 'GET',\n            ...options,\n        };\n        if (method) {\n            // Custom methods like 'patch' need to be uppercased\n            // See https://github.com/nodejs/undici/issues/2294\n            fetchOptions.method = method.toUpperCase();\n        }\n        try {\n            // use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n            return await this.fetch.call(undefined, url, fetchOptions);\n        }\n        finally {\n            clearTimeout(timeout);\n        }\n    }\n    shouldRetry(response) {\n        // Note this is not a standard header.\n        const shouldRetryHeader = response.headers.get('x-should-retry');\n        // If the server explicitly says whether or not to retry, obey.\n        if (shouldRetryHeader === 'true')\n            return true;\n        if (shouldRetryHeader === 'false')\n            return false;\n        // Retry on request timeouts.\n        if (response.status === 408)\n            return true;\n        // Retry on lock timeouts.\n        if (response.status === 409)\n            return true;\n        // Retry on rate limits.\n        if (response.status === 429)\n            return true;\n        // Retry internal errors.\n        if (response.status >= 500)\n            return true;\n        return false;\n    }\n    async retryRequest(options, retriesRemaining, requestLogID, responseHeaders) {\n        let timeoutMillis;\n        // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\n        const retryAfterMillisHeader = responseHeaders?.get('retry-after-ms');\n        if (retryAfterMillisHeader) {\n            const timeoutMs = parseFloat(retryAfterMillisHeader);\n            if (!Number.isNaN(timeoutMs)) {\n                timeoutMillis = timeoutMs;\n            }\n        }\n        // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n        const retryAfterHeader = responseHeaders?.get('retry-after');\n        if (retryAfterHeader && !timeoutMillis) {\n            const timeoutSeconds = parseFloat(retryAfterHeader);\n            if (!Number.isNaN(timeoutSeconds)) {\n                timeoutMillis = timeoutSeconds * 1000;\n            }\n            else {\n                timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n            }\n        }\n        // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n        // just do what it says, but otherwise calculate a default\n        if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\n            const maxRetries = options.maxRetries ?? this.maxRetries;\n            timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n        }\n        await sleep(timeoutMillis);\n        return this.makeRequest(options, retriesRemaining - 1, requestLogID);\n    }\n    calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {\n        const initialRetryDelay = 0.5;\n        const maxRetryDelay = 8.0;\n        const numRetries = maxRetries - retriesRemaining;\n        // Apply exponential backoff, but not more than the max.\n        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\n        // Apply some jitter, take up to at most 25 percent of the retry time.\n        const jitter = 1 - Math.random() * 0.25;\n        return sleepSeconds * jitter * 1000;\n    }\n    buildRequest(inputOptions, { retryCount = 0 } = {}) {\n        const options = { ...inputOptions };\n        const { method, path, query } = options;\n        const url = this.buildURL(path, query);\n        if ('timeout' in options)\n            validatePositiveInteger('timeout', options.timeout);\n        options.timeout = options.timeout ?? this.timeout;\n        const { bodyHeaders, body } = this.buildBody({ options });\n        const reqHeaders = this.buildHeaders({ options: inputOptions, method, bodyHeaders, retryCount });\n        const req = {\n            method,\n            headers: reqHeaders,\n            ...(options.signal && { signal: options.signal }),\n            ...(globalThis.ReadableStream &&\n                body instanceof globalThis.ReadableStream && { duplex: 'half' }),\n            ...(body && { body }),\n            ...(this.fetchOptions ?? {}),\n            ...(options.fetchOptions ?? {}),\n        };\n        return { req, url, timeout: options.timeout };\n    }\n    buildHeaders({ options, method, bodyHeaders, retryCount, }) {\n        let idempotencyHeaders = {};\n        if (this.idempotencyHeader && method !== 'get') {\n            if (!options.idempotencyKey)\n                options.idempotencyKey = this.defaultIdempotencyKey();\n            idempotencyHeaders[this.idempotencyHeader] = options.idempotencyKey;\n        }\n        const headers = buildHeaders([\n            idempotencyHeaders,\n            {\n                Accept: 'application/json',\n                'User-Agent': this.getUserAgent(),\n                'X-Stainless-Retry-Count': String(retryCount),\n                ...(options.timeout ? { 'X-Stainless-Timeout': String(Math.trunc(options.timeout / 1000)) } : {}),\n                ...getPlatformHeaders(),\n                'OpenAI-Organization': this.organization,\n                'OpenAI-Project': this.project,\n            },\n            this.authHeaders(options),\n            this._options.defaultHeaders,\n            bodyHeaders,\n            options.headers,\n        ]);\n        this.validateHeaders(headers);\n        return headers.values;\n    }\n    buildBody({ options: { body, headers: rawHeaders } }) {\n        if (!body) {\n            return { bodyHeaders: undefined, body: undefined };\n        }\n        const headers = buildHeaders([rawHeaders]);\n        if (\n        // Pass raw type verbatim\n        ArrayBuffer.isView(body) ||\n            body instanceof ArrayBuffer ||\n            body instanceof DataView ||\n            (typeof body === 'string' &&\n                // Preserve legacy string encoding behavior for now\n                headers.values.has('content-type')) ||\n            // `Blob` is superset of `File`\n            body instanceof Blob ||\n            // `FormData` -> `multipart/form-data`\n            body instanceof FormData ||\n            // `URLSearchParams` -> `application/x-www-form-urlencoded`\n            body instanceof URLSearchParams ||\n            // Send chunked stream (each chunk has own `length`)\n            (globalThis.ReadableStream && body instanceof globalThis.ReadableStream)) {\n            return { bodyHeaders: undefined, body: body };\n        }\n        else if (typeof body === 'object' &&\n            (Symbol.asyncIterator in body ||\n                (Symbol.iterator in body && 'next' in body && typeof body.next === 'function'))) {\n            return { bodyHeaders: undefined, body: Shims.ReadableStreamFrom(body) };\n        }\n        else {\n            return __classPrivateFieldGet(this, _OpenAI_encoder, \"f\").call(this, { body, headers });\n        }\n    }\n}\n_a = OpenAI, _OpenAI_encoder = new WeakMap();\nOpenAI.OpenAI = _a;\nOpenAI.DEFAULT_TIMEOUT = 600000; // 10 minutes\nOpenAI.OpenAIError = Errors.OpenAIError;\nOpenAI.APIError = Errors.APIError;\nOpenAI.APIConnectionError = Errors.APIConnectionError;\nOpenAI.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;\nOpenAI.APIUserAbortError = Errors.APIUserAbortError;\nOpenAI.NotFoundError = Errors.NotFoundError;\nOpenAI.ConflictError = Errors.ConflictError;\nOpenAI.RateLimitError = Errors.RateLimitError;\nOpenAI.BadRequestError = Errors.BadRequestError;\nOpenAI.AuthenticationError = Errors.AuthenticationError;\nOpenAI.InternalServerError = Errors.InternalServerError;\nOpenAI.PermissionDeniedError = Errors.PermissionDeniedError;\nOpenAI.UnprocessableEntityError = Errors.UnprocessableEntityError;\nOpenAI.toFile = Uploads.toFile;\nOpenAI.Completions = Completions;\nOpenAI.Chat = Chat;\nOpenAI.Embeddings = Embeddings;\nOpenAI.Files = Files;\nOpenAI.Images = Images;\nOpenAI.Audio = Audio;\nOpenAI.Moderations = Moderations;\nOpenAI.Models = Models;\nOpenAI.FineTuning = FineTuning;\nOpenAI.Graders = Graders;\nOpenAI.VectorStores = VectorStores;\nOpenAI.Beta = Beta;\nOpenAI.Batches = Batches;\nOpenAI.Uploads = UploadsAPIUploads;\nOpenAI.Responses = Responses;\nOpenAI.Evals = Evals;\nOpenAI.Containers = Containers;\n//# sourceMappingURL=client.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../../core/resource.mjs\";\nimport * as StepsAPI from \"./steps.mjs\";\nimport { Steps, } from \"./steps.mjs\";\nimport { CursorPage } from \"../../../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../../../internal/headers.mjs\";\nimport { AssistantStream } from \"../../../../lib/AssistantStream.mjs\";\nimport { sleep } from \"../../../../internal/utils/sleep.mjs\";\nimport { path } from \"../../../../internal/utils/path.mjs\";\n/**\n * @deprecated The Assistants API is deprecated in favor of the Responses API\n */\nexport class Runs extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.steps = new StepsAPI.Steps(this._client);\n    }\n    create(threadID, params, options) {\n        const { include, ...body } = params;\n        return this._client.post(path `/threads/${threadID}/runs`, {\n            query: { include },\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n            stream: params.stream ?? false,\n        });\n    }\n    /**\n     * Retrieves a run.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    retrieve(runID, params, options) {\n        const { thread_id } = params;\n        return this._client.get(path `/threads/${thread_id}/runs/${runID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Modifies a run.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    update(runID, params, options) {\n        const { thread_id, ...body } = params;\n        return this._client.post(path `/threads/${thread_id}/runs/${runID}`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Returns a list of runs belonging to a thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    list(threadID, query = {}, options) {\n        return this._client.getAPIList(path `/threads/${threadID}/runs`, (CursorPage), {\n            query,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Cancels a run that is `in_progress`.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    cancel(runID, params, options) {\n        const { thread_id } = params;\n        return this._client.post(path `/threads/${thread_id}/runs/${runID}/cancel`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * A helper to create a run an poll for a terminal state. More information on Run\n     * lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */\n    async createAndPoll(threadId, body, options) {\n        const run = await this.create(threadId, body, options);\n        return await this.poll(run.id, { thread_id: threadId }, options);\n    }\n    /**\n     * Create a Run stream\n     *\n     * @deprecated use `stream` instead\n     */\n    createAndStream(threadId, body, options) {\n        return AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);\n    }\n    /**\n     * A helper to poll a run status until it reaches a terminal state. More\n     * information on Run lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */\n    async poll(runId, params, options) {\n        const headers = buildHeaders([\n            options?.headers,\n            {\n                'X-Stainless-Poll-Helper': 'true',\n                'X-Stainless-Custom-Poll-Interval': options?.pollIntervalMs?.toString() ?? undefined,\n            },\n        ]);\n        while (true) {\n            const { data: run, response } = await this.retrieve(runId, params, {\n                ...options,\n                headers: { ...options?.headers, ...headers },\n            }).withResponse();\n            switch (run.status) {\n                //If we are in any sort of intermediate state we poll\n                case 'queued':\n                case 'in_progress':\n                case 'cancelling':\n                    let sleepInterval = 5000;\n                    if (options?.pollIntervalMs) {\n                        sleepInterval = options.pollIntervalMs;\n                    }\n                    else {\n                        const headerInterval = response.headers.get('openai-poll-after-ms');\n                        if (headerInterval) {\n                            const headerIntervalMs = parseInt(headerInterval);\n                            if (!isNaN(headerIntervalMs)) {\n                                sleepInterval = headerIntervalMs;\n                            }\n                        }\n                    }\n                    await sleep(sleepInterval);\n                    break;\n                //We return the run in any terminal state.\n                case 'requires_action':\n                case 'incomplete':\n                case 'cancelled':\n                case 'completed':\n                case 'failed':\n                case 'expired':\n                    return run;\n            }\n        }\n    }\n    /**\n     * Create a Run stream\n     */\n    stream(threadId, body, options) {\n        return AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);\n    }\n    submitToolOutputs(runID, params, options) {\n        const { thread_id, ...body } = params;\n        return this._client.post(path `/threads/${thread_id}/runs/${runID}/submit_tool_outputs`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n            stream: params.stream ?? false,\n        });\n    }\n    /**\n     * A helper to submit a tool output to a run and poll for a terminal run state.\n     * More information on Run lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */\n    async submitToolOutputsAndPoll(runId, params, options) {\n        const run = await this.submitToolOutputs(runId, params, options);\n        return await this.poll(run.id, params, options);\n    }\n    /**\n     * Submit the tool outputs from a previous run and stream the run to a terminal\n     * state. More information on Run lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */\n    submitToolOutputsStream(runId, params, options) {\n        return AssistantStream.createToolAssistantStream(runId, this._client.beta.threads.runs, params, options);\n    }\n}\nRuns.Steps = Steps;\n//# sourceMappingURL=runs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport * as MessagesAPI from \"./messages.mjs\";\nimport { Messages, } from \"./messages.mjs\";\nimport * as RunsAPI from \"./runs/runs.mjs\";\nimport { Runs, } from \"./runs/runs.mjs\";\nimport { buildHeaders } from \"../../../internal/headers.mjs\";\nimport { AssistantStream } from \"../../../lib/AssistantStream.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\n/**\n * @deprecated The Assistants API is deprecated in favor of the Responses API\n */\nexport class Threads extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.runs = new RunsAPI.Runs(this._client);\n        this.messages = new MessagesAPI.Messages(this._client);\n    }\n    /**\n     * Create a thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    create(body = {}, options) {\n        return this._client.post('/threads', {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Retrieves a thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    retrieve(threadID, options) {\n        return this._client.get(path `/threads/${threadID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Modifies a thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    update(threadID, body, options) {\n        return this._client.post(path `/threads/${threadID}`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Delete a thread.\n     *\n     * @deprecated The Assistants API is deprecated in favor of the Responses API\n     */\n    delete(threadID, options) {\n        return this._client.delete(path `/threads/${threadID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    createAndRun(body, options) {\n        return this._client.post('/threads/runs', {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n            stream: body.stream ?? false,\n        });\n    }\n    /**\n     * A helper to create a thread, start a run and then poll for a terminal state.\n     * More information on Run lifecycles can be found here:\n     * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps\n     */\n    async createAndRunPoll(body, options) {\n        const run = await this.createAndRun(body, options);\n        return await this.runs.poll(run.id, { thread_id: run.thread_id }, options);\n    }\n    /**\n     * Create a thread and stream the run back\n     */\n    createAndRunStream(body, options) {\n        return AssistantStream.createThreadAssistantStream(body, this._client.beta.threads, options);\n    }\n}\nThreads.Runs = Runs;\nThreads.Messages = Messages;\n//# sourceMappingURL=threads.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as AssistantsAPI from \"./assistants.mjs\";\nimport { Assistants, } from \"./assistants.mjs\";\nimport * as RealtimeAPI from \"./realtime/realtime.mjs\";\nimport { Realtime, } from \"./realtime/realtime.mjs\";\nimport * as ThreadsAPI from \"./threads/threads.mjs\";\nimport { Threads, } from \"./threads/threads.mjs\";\nexport class Beta extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.realtime = new RealtimeAPI.Realtime(this._client);\n        this.assistants = new AssistantsAPI.Assistants(this._client);\n        this.threads = new ThreadsAPI.Threads(this._client);\n    }\n}\nBeta.Realtime = Realtime;\nBeta.Assistants = Assistants;\nBeta.Threads = Threads;\n//# sourceMappingURL=beta.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../core/resource.mjs\";\nexport class Completions extends APIResource {\n    create(body, options) {\n        return this._client.post('/completions', { body, ...options, stream: body.stream ?? false });\n    }\n}\n//# sourceMappingURL=completions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { buildHeaders } from \"../../../internal/headers.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class Content extends APIResource {\n    /**\n     * Retrieve Container File Content\n     */\n    retrieve(fileID, params, options) {\n        const { container_id } = params;\n        return this._client.get(path `/containers/${container_id}/files/${fileID}/content`, {\n            ...options,\n            headers: buildHeaders([{ Accept: 'application/binary' }, options?.headers]),\n            __binaryResponse: true,\n        });\n    }\n}\n//# sourceMappingURL=content.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport * as ContentAPI from \"./content.mjs\";\nimport { Content } from \"./content.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../../internal/headers.mjs\";\nimport { multipartFormRequestOptions } from \"../../../internal/uploads.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class Files extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.content = new ContentAPI.Content(this._client);\n    }\n    /**\n     * Create a Container File\n     *\n     * You can send either a multipart/form-data request with the raw file content, or\n     * a JSON request with a file ID.\n     */\n    create(containerID, body, options) {\n        return this._client.post(path `/containers/${containerID}/files`, multipartFormRequestOptions({ body, ...options }, this._client));\n    }\n    /**\n     * Retrieve Container File\n     */\n    retrieve(fileID, params, options) {\n        const { container_id } = params;\n        return this._client.get(path `/containers/${container_id}/files/${fileID}`, options);\n    }\n    /**\n     * List Container files\n     */\n    list(containerID, query = {}, options) {\n        return this._client.getAPIList(path `/containers/${containerID}/files`, (CursorPage), {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Delete Container File\n     */\n    delete(fileID, params, options) {\n        const { container_id } = params;\n        return this._client.delete(path `/containers/${container_id}/files/${fileID}`, {\n            ...options,\n            headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),\n        });\n    }\n}\nFiles.Content = Content;\n//# sourceMappingURL=files.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as FilesAPI from \"./files/files.mjs\";\nimport { Files, } from \"./files/files.mjs\";\nimport { CursorPage } from \"../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../internal/headers.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class Containers extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.files = new FilesAPI.Files(this._client);\n    }\n    /**\n     * Create Container\n     */\n    create(body, options) {\n        return this._client.post('/containers', { body, ...options });\n    }\n    /**\n     * Retrieve Container\n     */\n    retrieve(containerID, options) {\n        return this._client.get(path `/containers/${containerID}`, options);\n    }\n    /**\n     * List Containers\n     */\n    list(query = {}, options) {\n        return this._client.getAPIList('/containers', (CursorPage), { query, ...options });\n    }\n    /**\n     * Delete Container\n     */\n    delete(containerID, options) {\n        return this._client.delete(path `/containers/${containerID}`, {\n            ...options,\n            headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),\n        });\n    }\n}\nContainers.Files = Files;\n//# sourceMappingURL=containers.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../core/resource.mjs\";\nimport { loggerFor, toFloat32Array } from \"../internal/utils.mjs\";\nexport class Embeddings extends APIResource {\n    /**\n     * Creates an embedding vector representing the input text.\n     *\n     * @example\n     * ```ts\n     * const createEmbeddingResponse =\n     *   await client.embeddings.create({\n     *     input: 'The quick brown fox jumped over the lazy dog',\n     *     model: 'text-embedding-3-small',\n     *   });\n     * ```\n     */\n    create(body, options) {\n        const hasUserProvidedEncodingFormat = !!body.encoding_format;\n        // No encoding_format specified, defaulting to base64 for performance reasons\n        // See https://github.com/openai/openai-node/pull/1312\n        let encoding_format = hasUserProvidedEncodingFormat ? body.encoding_format : 'base64';\n        if (hasUserProvidedEncodingFormat) {\n            loggerFor(this._client).debug('embeddings/user defined encoding_format:', body.encoding_format);\n        }\n        const response = this._client.post('/embeddings', {\n            body: {\n                ...body,\n                encoding_format: encoding_format,\n            },\n            ...options,\n        });\n        // if the user specified an encoding_format, return the response as-is\n        if (hasUserProvidedEncodingFormat) {\n            return response;\n        }\n        // in this stage, we are sure the user did not specify an encoding_format\n        // and we defaulted to base64 for performance reasons\n        // we are sure then that the response is base64 encoded, let's decode it\n        // the returned result will be a float32 array since this is OpenAI API's default encoding\n        loggerFor(this._client).debug('embeddings/decoding base64 embeddings from base64');\n        return response._thenUnwrap((response) => {\n            if (response && response.data) {\n                response.data.forEach((embeddingBase64Obj) => {\n                    const embeddingBase64Str = embeddingBase64Obj.embedding;\n                    embeddingBase64Obj.embedding = toFloat32Array(embeddingBase64Str);\n                });\n            }\n            return response;\n        });\n    }\n}\n//# sourceMappingURL=embeddings.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class OutputItems extends APIResource {\n    /**\n     * Get an evaluation run output item by ID.\n     */\n    retrieve(outputItemID, params, options) {\n        const { eval_id, run_id } = params;\n        return this._client.get(path `/evals/${eval_id}/runs/${run_id}/output_items/${outputItemID}`, options);\n    }\n    /**\n     * Get a list of output items for an evaluation run.\n     */\n    list(runID, params, options) {\n        const { eval_id, ...query } = params;\n        return this._client.getAPIList(path `/evals/${eval_id}/runs/${runID}/output_items`, (CursorPage), { query, ...options });\n    }\n}\n//# sourceMappingURL=output-items.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport * as OutputItemsAPI from \"./output-items.mjs\";\nimport { OutputItems, } from \"./output-items.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class Runs extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.outputItems = new OutputItemsAPI.OutputItems(this._client);\n    }\n    /**\n     * Kicks off a new run for a given evaluation, specifying the data source, and what\n     * model configuration to use to test. The datasource will be validated against the\n     * schema specified in the config of the evaluation.\n     */\n    create(evalID, body, options) {\n        return this._client.post(path `/evals/${evalID}/runs`, { body, ...options });\n    }\n    /**\n     * Get an evaluation run by ID.\n     */\n    retrieve(runID, params, options) {\n        const { eval_id } = params;\n        return this._client.get(path `/evals/${eval_id}/runs/${runID}`, options);\n    }\n    /**\n     * Get a list of runs for an evaluation.\n     */\n    list(evalID, query = {}, options) {\n        return this._client.getAPIList(path `/evals/${evalID}/runs`, (CursorPage), {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * Delete an eval run.\n     */\n    delete(runID, params, options) {\n        const { eval_id } = params;\n        return this._client.delete(path `/evals/${eval_id}/runs/${runID}`, options);\n    }\n    /**\n     * Cancel an ongoing evaluation run.\n     */\n    cancel(runID, params, options) {\n        const { eval_id } = params;\n        return this._client.post(path `/evals/${eval_id}/runs/${runID}`, options);\n    }\n}\nRuns.OutputItems = OutputItems;\n//# sourceMappingURL=runs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as RunsAPI from \"./runs/runs.mjs\";\nimport { Runs, } from \"./runs/runs.mjs\";\nimport { CursorPage } from \"../../core/pagination.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class Evals extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.runs = new RunsAPI.Runs(this._client);\n    }\n    /**\n     * Create the structure of an evaluation that can be used to test a model's\n     * performance. An evaluation is a set of testing criteria and the config for a\n     * data source, which dictates the schema of the data used in the evaluation. After\n     * creating an evaluation, you can run it on different models and model parameters.\n     * We support several types of graders and datasources. For more information, see\n     * the [Evals guide](https://platform.openai.com/docs/guides/evals).\n     */\n    create(body, options) {\n        return this._client.post('/evals', { body, ...options });\n    }\n    /**\n     * Get an evaluation by ID.\n     */\n    retrieve(evalID, options) {\n        return this._client.get(path `/evals/${evalID}`, options);\n    }\n    /**\n     * Update certain properties of an evaluation.\n     */\n    update(evalID, body, options) {\n        return this._client.post(path `/evals/${evalID}`, { body, ...options });\n    }\n    /**\n     * List evaluations for a project.\n     */\n    list(query = {}, options) {\n        return this._client.getAPIList('/evals', (CursorPage), { query, ...options });\n    }\n    /**\n     * Delete an evaluation.\n     */\n    delete(evalID, options) {\n        return this._client.delete(path `/evals/${evalID}`, options);\n    }\n}\nEvals.Runs = Runs;\n//# sourceMappingURL=evals.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../core/resource.mjs\";\nimport { CursorPage } from \"../core/pagination.mjs\";\nimport { buildHeaders } from \"../internal/headers.mjs\";\nimport { sleep } from \"../internal/utils/sleep.mjs\";\nimport { APIConnectionTimeoutError } from \"../error.mjs\";\nimport { multipartFormRequestOptions } from \"../internal/uploads.mjs\";\nimport { path } from \"../internal/utils/path.mjs\";\nexport class Files extends APIResource {\n    /**\n     * Upload a file that can be used across various endpoints. Individual files can be\n     * up to 512 MB, and the size of all files uploaded by one organization can be up\n     * to 100 GB.\n     *\n     * The Assistants API supports files up to 2 million tokens and of specific file\n     * types. See the\n     * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for\n     * details.\n     *\n     * The Fine-tuning API only supports `.jsonl` files. The input also has certain\n     * required formats for fine-tuning\n     * [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or\n     * [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n     * models.\n     *\n     * The Batch API only supports `.jsonl` files up to 200 MB in size. The input also\n     * has a specific required\n     * [format](https://platform.openai.com/docs/api-reference/batch/request-input).\n     *\n     * Please [contact us](https://help.openai.com/) if you need to increase these\n     * storage limits.\n     */\n    create(body, options) {\n        return this._client.post('/files', multipartFormRequestOptions({ body, ...options }, this._client));\n    }\n    /**\n     * Returns information about a specific file.\n     */\n    retrieve(fileID, options) {\n        return this._client.get(path `/files/${fileID}`, options);\n    }\n    /**\n     * Returns a list of files.\n     */\n    list(query = {}, options) {\n        return this._client.getAPIList('/files', (CursorPage), { query, ...options });\n    }\n    /**\n     * Delete a file.\n     */\n    delete(fileID, options) {\n        return this._client.delete(path `/files/${fileID}`, options);\n    }\n    /**\n     * Returns the contents of the specified file.\n     */\n    content(fileID, options) {\n        return this._client.get(path `/files/${fileID}/content`, {\n            ...options,\n            headers: buildHeaders([{ Accept: 'application/binary' }, options?.headers]),\n            __binaryResponse: true,\n        });\n    }\n    /**\n     * Waits for the given file to be processed, default timeout is 30 mins.\n     */\n    async waitForProcessing(id, { pollInterval = 5000, maxWait = 30 * 60 * 1000 } = {}) {\n        const TERMINAL_STATES = new Set(['processed', 'error', 'deleted']);\n        const start = Date.now();\n        let file = await this.retrieve(id);\n        while (!file.status || !TERMINAL_STATES.has(file.status)) {\n            await sleep(pollInterval);\n            file = await this.retrieve(id);\n            if (Date.now() - start > maxWait) {\n                throw new APIConnectionTimeoutError({\n                    message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`,\n                });\n            }\n        }\n        return file;\n    }\n}\n//# sourceMappingURL=files.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nexport class Methods extends APIResource {\n}\n//# sourceMappingURL=methods.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nexport class Graders extends APIResource {\n    /**\n     * Run a grader.\n     *\n     * @example\n     * ```ts\n     * const response = await client.fineTuning.alpha.graders.run({\n     *   grader: {\n     *     input: 'input',\n     *     name: 'name',\n     *     operation: 'eq',\n     *     reference: 'reference',\n     *     type: 'string_check',\n     *   },\n     *   model_sample: 'model_sample',\n     * });\n     * ```\n     */\n    run(body, options) {\n        return this._client.post('/fine_tuning/alpha/graders/run', { body, ...options });\n    }\n    /**\n     * Validate a grader.\n     *\n     * @example\n     * ```ts\n     * const response =\n     *   await client.fineTuning.alpha.graders.validate({\n     *     grader: {\n     *       input: 'input',\n     *       name: 'name',\n     *       operation: 'eq',\n     *       reference: 'reference',\n     *       type: 'string_check',\n     *     },\n     *   });\n     * ```\n     */\n    validate(body, options) {\n        return this._client.post('/fine_tuning/alpha/graders/validate', { body, ...options });\n    }\n}\n//# sourceMappingURL=graders.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport * as GradersAPI from \"./graders.mjs\";\nimport { Graders, } from \"./graders.mjs\";\nexport class Alpha extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.graders = new GradersAPI.Graders(this._client);\n    }\n}\nAlpha.Graders = Graders;\n//# sourceMappingURL=alpha.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { Page } from \"../../../core/pagination.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class Permissions extends APIResource {\n    /**\n     * **NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).\n     *\n     * This enables organization owners to share fine-tuned models with other projects\n     * in their organization.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const permissionCreateResponse of client.fineTuning.checkpoints.permissions.create(\n     *   'ft:gpt-4o-mini-2024-07-18:org:weather:B7R9VjQd',\n     *   { project_ids: ['string'] },\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    create(fineTunedModelCheckpoint, body, options) {\n        return this._client.getAPIList(path `/fine_tuning/checkpoints/${fineTunedModelCheckpoint}/permissions`, (Page), { body, method: 'post', ...options });\n    }\n    /**\n     * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).\n     *\n     * Organization owners can use this endpoint to view all permissions for a\n     * fine-tuned model checkpoint.\n     *\n     * @example\n     * ```ts\n     * const permission =\n     *   await client.fineTuning.checkpoints.permissions.retrieve(\n     *     'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     *   );\n     * ```\n     */\n    retrieve(fineTunedModelCheckpoint, query = {}, options) {\n        return this._client.get(path `/fine_tuning/checkpoints/${fineTunedModelCheckpoint}/permissions`, {\n            query,\n            ...options,\n        });\n    }\n    /**\n     * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).\n     *\n     * Organization owners can use this endpoint to delete a permission for a\n     * fine-tuned model checkpoint.\n     *\n     * @example\n     * ```ts\n     * const permission =\n     *   await client.fineTuning.checkpoints.permissions.delete(\n     *     'cp_zc4Q7MP6XxulcVzj4MZdwsAB',\n     *     {\n     *       fine_tuned_model_checkpoint:\n     *         'ft:gpt-4o-mini-2024-07-18:org:weather:B7R9VjQd',\n     *     },\n     *   );\n     * ```\n     */\n    delete(permissionID, params, options) {\n        const { fine_tuned_model_checkpoint } = params;\n        return this._client.delete(path `/fine_tuning/checkpoints/${fine_tuned_model_checkpoint}/permissions/${permissionID}`, options);\n    }\n}\n//# sourceMappingURL=permissions.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport * as PermissionsAPI from \"./permissions.mjs\";\nimport { Permissions, } from \"./permissions.mjs\";\nexport class Checkpoints extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.permissions = new PermissionsAPI.Permissions(this._client);\n    }\n}\nCheckpoints.Permissions = Permissions;\n//# sourceMappingURL=checkpoints.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class Checkpoints extends APIResource {\n    /**\n     * List checkpoints for a fine-tuning job.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const fineTuningJobCheckpoint of client.fineTuning.jobs.checkpoints.list(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(fineTuningJobID, query = {}, options) {\n        return this._client.getAPIList(path `/fine_tuning/jobs/${fineTuningJobID}/checkpoints`, (CursorPage), { query, ...options });\n    }\n}\n//# sourceMappingURL=checkpoints.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport * as CheckpointsAPI from \"./checkpoints.mjs\";\nimport { Checkpoints, } from \"./checkpoints.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class Jobs extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.checkpoints = new CheckpointsAPI.Checkpoints(this._client);\n    }\n    /**\n     * Creates a fine-tuning job which begins the process of creating a new model from\n     * a given dataset.\n     *\n     * Response includes details of the enqueued job including job status and the name\n     * of the fine-tuned models once complete.\n     *\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n     *\n     * @example\n     * ```ts\n     * const fineTuningJob = await client.fineTuning.jobs.create({\n     *   model: 'gpt-4o-mini',\n     *   training_file: 'file-abc123',\n     * });\n     * ```\n     */\n    create(body, options) {\n        return this._client.post('/fine_tuning/jobs', { body, ...options });\n    }\n    /**\n     * Get info about a fine-tuning job.\n     *\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n     *\n     * @example\n     * ```ts\n     * const fineTuningJob = await client.fineTuning.jobs.retrieve(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * );\n     * ```\n     */\n    retrieve(fineTuningJobID, options) {\n        return this._client.get(path `/fine_tuning/jobs/${fineTuningJobID}`, options);\n    }\n    /**\n     * List your organization's fine-tuning jobs\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const fineTuningJob of client.fineTuning.jobs.list()) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(query = {}, options) {\n        return this._client.getAPIList('/fine_tuning/jobs', (CursorPage), { query, ...options });\n    }\n    /**\n     * Immediately cancel a fine-tune job.\n     *\n     * @example\n     * ```ts\n     * const fineTuningJob = await client.fineTuning.jobs.cancel(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * );\n     * ```\n     */\n    cancel(fineTuningJobID, options) {\n        return this._client.post(path `/fine_tuning/jobs/${fineTuningJobID}/cancel`, options);\n    }\n    /**\n     * Get status updates for a fine-tuning job.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const fineTuningJobEvent of client.fineTuning.jobs.listEvents(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    listEvents(fineTuningJobID, query = {}, options) {\n        return this._client.getAPIList(path `/fine_tuning/jobs/${fineTuningJobID}/events`, (CursorPage), { query, ...options });\n    }\n    /**\n     * Pause a fine-tune job.\n     *\n     * @example\n     * ```ts\n     * const fineTuningJob = await client.fineTuning.jobs.pause(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * );\n     * ```\n     */\n    pause(fineTuningJobID, options) {\n        return this._client.post(path `/fine_tuning/jobs/${fineTuningJobID}/pause`, options);\n    }\n    /**\n     * Resume a fine-tune job.\n     *\n     * @example\n     * ```ts\n     * const fineTuningJob = await client.fineTuning.jobs.resume(\n     *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',\n     * );\n     * ```\n     */\n    resume(fineTuningJobID, options) {\n        return this._client.post(path `/fine_tuning/jobs/${fineTuningJobID}/resume`, options);\n    }\n}\nJobs.Checkpoints = Checkpoints;\n//# sourceMappingURL=jobs.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as MethodsAPI from \"./methods.mjs\";\nimport { Methods, } from \"./methods.mjs\";\nimport * as AlphaAPI from \"./alpha/alpha.mjs\";\nimport { Alpha } from \"./alpha/alpha.mjs\";\nimport * as CheckpointsAPI from \"./checkpoints/checkpoints.mjs\";\nimport { Checkpoints } from \"./checkpoints/checkpoints.mjs\";\nimport * as JobsAPI from \"./jobs/jobs.mjs\";\nimport { Jobs, } from \"./jobs/jobs.mjs\";\nexport class FineTuning extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.methods = new MethodsAPI.Methods(this._client);\n        this.jobs = new JobsAPI.Jobs(this._client);\n        this.checkpoints = new CheckpointsAPI.Checkpoints(this._client);\n        this.alpha = new AlphaAPI.Alpha(this._client);\n    }\n}\nFineTuning.Methods = Methods;\nFineTuning.Jobs = Jobs;\nFineTuning.Checkpoints = Checkpoints;\nFineTuning.Alpha = Alpha;\n//# sourceMappingURL=fine-tuning.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nexport class GraderModels extends APIResource {\n}\n//# sourceMappingURL=grader-models.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as GraderModelsAPI from \"./grader-models.mjs\";\nimport { GraderModels, } from \"./grader-models.mjs\";\nexport class Graders extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.graderModels = new GraderModelsAPI.GraderModels(this._client);\n    }\n}\nGraders.GraderModels = GraderModels;\n//# sourceMappingURL=graders.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../core/resource.mjs\";\nimport { multipartFormRequestOptions } from \"../internal/uploads.mjs\";\nexport class Images extends APIResource {\n    /**\n     * Creates a variation of a given image. This endpoint only supports `dall-e-2`.\n     *\n     * @example\n     * ```ts\n     * const imagesResponse = await client.images.createVariation({\n     *   image: fs.createReadStream('otter.png'),\n     * });\n     * ```\n     */\n    createVariation(body, options) {\n        return this._client.post('/images/variations', multipartFormRequestOptions({ body, ...options }, this._client));\n    }\n    /**\n     * Creates an edited or extended image given one or more source images and a\n     * prompt. This endpoint only supports `gpt-image-1` and `dall-e-2`.\n     *\n     * @example\n     * ```ts\n     * const imagesResponse = await client.images.edit({\n     *   image: fs.createReadStream('path/to/file'),\n     *   prompt: 'A cute baby sea otter wearing a beret',\n     * });\n     * ```\n     */\n    edit(body, options) {\n        return this._client.post('/images/edits', multipartFormRequestOptions({ body, ...options }, this._client));\n    }\n    /**\n     * Creates an image given a prompt.\n     * [Learn more](https://platform.openai.com/docs/guides/images).\n     *\n     * @example\n     * ```ts\n     * const imagesResponse = await client.images.generate({\n     *   prompt: 'A cute baby sea otter',\n     * });\n     * ```\n     */\n    generate(body, options) {\n        return this._client.post('/images/generations', { body, ...options });\n    }\n}\n//# sourceMappingURL=images.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../core/resource.mjs\";\nimport { Page } from \"../core/pagination.mjs\";\nimport { path } from \"../internal/utils/path.mjs\";\nexport class Models extends APIResource {\n    /**\n     * Retrieves a model instance, providing basic information about the model such as\n     * the owner and permissioning.\n     */\n    retrieve(model, options) {\n        return this._client.get(path `/models/${model}`, options);\n    }\n    /**\n     * Lists the currently available models, and provides basic information about each\n     * one such as the owner and availability.\n     */\n    list(options) {\n        return this._client.getAPIList('/models', (Page), options);\n    }\n    /**\n     * Delete a fine-tuned model. You must have the Owner role in your organization to\n     * delete a model.\n     */\n    delete(model, options) {\n        return this._client.delete(path `/models/${model}`, options);\n    }\n}\n//# sourceMappingURL=models.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../core/resource.mjs\";\nexport class Moderations extends APIResource {\n    /**\n     * Classifies if text and/or image inputs are potentially harmful. Learn more in\n     * the [moderation guide](https://platform.openai.com/docs/guides/moderation).\n     */\n    create(body, options) {\n        return this._client.post('/moderations', { body, ...options });\n    }\n}\n//# sourceMappingURL=moderations.mjs.map","import { OpenAIError } from \"../error.mjs\";\nimport { isAutoParsableResponseFormat } from \"../lib/parser.mjs\";\nexport function maybeParseResponse(response, params) {\n    if (!params || !hasAutoParseableInput(params)) {\n        return {\n            ...response,\n            output_parsed: null,\n            output: response.output.map((item) => {\n                if (item.type === 'function_call') {\n                    return {\n                        ...item,\n                        parsed_arguments: null,\n                    };\n                }\n                if (item.type === 'message') {\n                    return {\n                        ...item,\n                        content: item.content.map((content) => ({\n                            ...content,\n                            parsed: null,\n                        })),\n                    };\n                }\n                else {\n                    return item;\n                }\n            }),\n        };\n    }\n    return parseResponse(response, params);\n}\nexport function parseResponse(response, params) {\n    const output = response.output.map((item) => {\n        if (item.type === 'function_call') {\n            return {\n                ...item,\n                parsed_arguments: parseToolCall(params, item),\n            };\n        }\n        if (item.type === 'message') {\n            const content = item.content.map((content) => {\n                if (content.type === 'output_text') {\n                    return {\n                        ...content,\n                        parsed: parseTextFormat(params, content.text),\n                    };\n                }\n                return content;\n            });\n            return {\n                ...item,\n                content,\n            };\n        }\n        return item;\n    });\n    const parsed = Object.assign({}, response, { output });\n    if (!Object.getOwnPropertyDescriptor(response, 'output_text')) {\n        addOutputText(parsed);\n    }\n    Object.defineProperty(parsed, 'output_parsed', {\n        enumerable: true,\n        get() {\n            for (const output of parsed.output) {\n                if (output.type !== 'message') {\n                    continue;\n                }\n                for (const content of output.content) {\n                    if (content.type === 'output_text' && content.parsed !== null) {\n                        return content.parsed;\n                    }\n                }\n            }\n            return null;\n        },\n    });\n    return parsed;\n}\nfunction parseTextFormat(params, content) {\n    if (params.text?.format?.type !== 'json_schema') {\n        return null;\n    }\n    if ('$parseRaw' in params.text?.format) {\n        const text_format = params.text?.format;\n        return text_format.$parseRaw(content);\n    }\n    return JSON.parse(content);\n}\nexport function hasAutoParseableInput(params) {\n    if (isAutoParsableResponseFormat(params.text?.format)) {\n        return true;\n    }\n    return false;\n}\nexport function makeParseableResponseTool(tool, { parser, callback, }) {\n    const obj = { ...tool };\n    Object.defineProperties(obj, {\n        $brand: {\n            value: 'auto-parseable-tool',\n            enumerable: false,\n        },\n        $parseRaw: {\n            value: parser,\n            enumerable: false,\n        },\n        $callback: {\n            value: callback,\n            enumerable: false,\n        },\n    });\n    return obj;\n}\nexport function isAutoParsableTool(tool) {\n    return tool?.['$brand'] === 'auto-parseable-tool';\n}\nfunction getInputToolByName(input_tools, name) {\n    return input_tools.find((tool) => tool.type === 'function' && tool.name === name);\n}\nfunction parseToolCall(params, toolCall) {\n    const inputTool = getInputToolByName(params.tools ?? [], toolCall.name);\n    return {\n        ...toolCall,\n        ...toolCall,\n        parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.arguments)\n            : inputTool?.strict ? JSON.parse(toolCall.arguments)\n                : null,\n    };\n}\nexport function shouldParseToolCall(params, toolCall) {\n    if (!params) {\n        return false;\n    }\n    const inputTool = getInputToolByName(params.tools ?? [], toolCall.name);\n    return isAutoParsableTool(inputTool) || inputTool?.strict || false;\n}\nexport function validateInputTools(tools) {\n    for (const tool of tools ?? []) {\n        if (tool.type !== 'function') {\n            throw new OpenAIError(`Currently only \\`function\\` tool types support auto-parsing; Received \\`${tool.type}\\``);\n        }\n        if (tool.function.strict !== true) {\n            throw new OpenAIError(`The \\`${tool.function.name}\\` tool is not marked with \\`strict: true\\`. Only strict function tools can be auto-parsed`);\n        }\n    }\n}\nexport function addOutputText(rsp) {\n    const texts = [];\n    for (const output of rsp.output) {\n        if (output.type !== 'message') {\n            continue;\n        }\n        for (const content of output.content) {\n            if (content.type === 'output_text') {\n                texts.push(content.text);\n            }\n        }\n    }\n    rsp.output_text = texts.join('');\n}\n//# sourceMappingURL=ResponsesParser.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { CursorPage } from \"../../core/pagination.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class InputItems extends APIResource {\n    /**\n     * Returns a list of input items for a given response.\n     *\n     * @example\n     * ```ts\n     * // Automatically fetches more pages as needed.\n     * for await (const responseItem of client.responses.inputItems.list(\n     *   'response_id',\n     * )) {\n     *   // ...\n     * }\n     * ```\n     */\n    list(responseID, query = {}, options) {\n        return this._client.getAPIList(path `/responses/${responseID}/input_items`, (CursorPage), { query, ...options });\n    }\n}\n//# sourceMappingURL=input-items.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { parseResponse, addOutputText, } from \"../../lib/ResponsesParser.mjs\";\nimport { ResponseStream } from \"../../lib/responses/ResponseStream.mjs\";\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as InputItemsAPI from \"./input-items.mjs\";\nimport { InputItems } from \"./input-items.mjs\";\nimport { buildHeaders } from \"../../internal/headers.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class Responses extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.inputItems = new InputItemsAPI.InputItems(this._client);\n    }\n    create(body, options) {\n        return this._client.post('/responses', { body, ...options, stream: body.stream ?? false })._thenUnwrap((rsp) => {\n            if ('object' in rsp && rsp.object === 'response') {\n                addOutputText(rsp);\n            }\n            return rsp;\n        });\n    }\n    retrieve(responseID, query = {}, options) {\n        return this._client.get(path `/responses/${responseID}`, {\n            query,\n            ...options,\n            stream: query?.stream ?? false,\n        });\n    }\n    /**\n     * Deletes a model response with the given ID.\n     *\n     * @example\n     * ```ts\n     * await client.responses.delete(\n     *   'resp_677efb5139a88190b512bc3fef8e535d',\n     * );\n     * ```\n     */\n    delete(responseID, options) {\n        return this._client.delete(path `/responses/${responseID}`, {\n            ...options,\n            headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),\n        });\n    }\n    parse(body, options) {\n        return this._client.responses\n            .create(body, options)\n            ._thenUnwrap((response) => parseResponse(response, body));\n    }\n    /**\n     * Creates a model response stream\n     */\n    stream(body, options) {\n        return ResponseStream.createResponse(this._client, body, options);\n    }\n    /**\n     * Cancels a model response with the given ID. Only responses created with the\n     * `background` parameter set to `true` can be cancelled.\n     * [Learn more](https://platform.openai.com/docs/guides/background).\n     *\n     * @example\n     * ```ts\n     * const response = await client.responses.cancel(\n     *   'resp_677efb5139a88190b512bc3fef8e535d',\n     * );\n     * ```\n     */\n    cancel(responseID, options) {\n        return this._client.post(path `/responses/${responseID}/cancel`, options);\n    }\n}\nResponses.InputItems = InputItems;\n//# sourceMappingURL=responses.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { multipartFormRequestOptions } from \"../../internal/uploads.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class Parts extends APIResource {\n    /**\n     * Adds a\n     * [Part](https://platform.openai.com/docs/api-reference/uploads/part-object) to an\n     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object.\n     * A Part represents a chunk of bytes from the file you are trying to upload.\n     *\n     * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload\n     * maximum of 8 GB.\n     *\n     * It is possible to add multiple Parts in parallel. You can decide the intended\n     * order of the Parts when you\n     * [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).\n     */\n    create(uploadID, body, options) {\n        return this._client.post(path `/uploads/${uploadID}/parts`, multipartFormRequestOptions({ body, ...options }, this._client));\n    }\n}\n//# sourceMappingURL=parts.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as PartsAPI from \"./parts.mjs\";\nimport { Parts } from \"./parts.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class Uploads extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.parts = new PartsAPI.Parts(this._client);\n    }\n    /**\n     * Creates an intermediate\n     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object\n     * that you can add\n     * [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.\n     * Currently, an Upload can accept at most 8 GB in total and expires after an hour\n     * after you create it.\n     *\n     * Once you complete the Upload, we will create a\n     * [File](https://platform.openai.com/docs/api-reference/files/object) object that\n     * contains all the parts you uploaded. This File is usable in the rest of our\n     * platform as a regular File object.\n     *\n     * For certain `purpose` values, the correct `mime_type` must be specified. Please\n     * refer to documentation for the\n     * [supported MIME types for your use case](https://platform.openai.com/docs/assistants/tools/file-search#supported-files).\n     *\n     * For guidance on the proper filename extensions for each purpose, please follow\n     * the documentation on\n     * [creating a File](https://platform.openai.com/docs/api-reference/files/create).\n     */\n    create(body, options) {\n        return this._client.post('/uploads', { body, ...options });\n    }\n    /**\n     * Cancels the Upload. No Parts may be added after an Upload is cancelled.\n     */\n    cancel(uploadID, options) {\n        return this._client.post(path `/uploads/${uploadID}/cancel`, options);\n    }\n    /**\n     * Completes the\n     * [Upload](https://platform.openai.com/docs/api-reference/uploads/object).\n     *\n     * Within the returned Upload object, there is a nested\n     * [File](https://platform.openai.com/docs/api-reference/files/object) object that\n     * is ready to use in the rest of the platform.\n     *\n     * You can specify the order of the Parts by passing in an ordered list of the Part\n     * IDs.\n     *\n     * The number of bytes uploaded upon completion must match the number of bytes\n     * initially specified when creating the Upload object. No Parts may be added after\n     * an Upload is completed.\n     */\n    complete(uploadID, body, options) {\n        return this._client.post(path `/uploads/${uploadID}/complete`, { body, ...options });\n    }\n}\nUploads.Parts = Parts;\n//# sourceMappingURL=uploads.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { CursorPage } from \"../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../internal/headers.mjs\";\nimport { sleep } from \"../../internal/utils/sleep.mjs\";\nimport { allSettledWithThrow } from \"../../lib/Util.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class FileBatches extends APIResource {\n    /**\n     * Create a vector store file batch.\n     */\n    create(vectorStoreID, body, options) {\n        return this._client.post(path `/vector_stores/${vectorStoreID}/file_batches`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Retrieves a vector store file batch.\n     */\n    retrieve(batchID, params, options) {\n        const { vector_store_id } = params;\n        return this._client.get(path `/vector_stores/${vector_store_id}/file_batches/${batchID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Cancel a vector store file batch. This attempts to cancel the processing of\n     * files in this batch as soon as possible.\n     */\n    cancel(batchID, params, options) {\n        const { vector_store_id } = params;\n        return this._client.post(path `/vector_stores/${vector_store_id}/file_batches/${batchID}/cancel`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Create a vector store batch and poll until all files have been processed.\n     */\n    async createAndPoll(vectorStoreId, body, options) {\n        const batch = await this.create(vectorStoreId, body);\n        return await this.poll(vectorStoreId, batch.id, options);\n    }\n    /**\n     * Returns a list of vector store files in a batch.\n     */\n    listFiles(batchID, params, options) {\n        const { vector_store_id, ...query } = params;\n        return this._client.getAPIList(path `/vector_stores/${vector_store_id}/file_batches/${batchID}/files`, (CursorPage), { query, ...options, headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]) });\n    }\n    /**\n     * Wait for the given file batch to be processed.\n     *\n     * Note: this will return even if one of the files failed to process, you need to\n     * check batch.file_counts.failed_count to handle this case.\n     */\n    async poll(vectorStoreID, batchID, options) {\n        const headers = buildHeaders([\n            options?.headers,\n            {\n                'X-Stainless-Poll-Helper': 'true',\n                'X-Stainless-Custom-Poll-Interval': options?.pollIntervalMs?.toString() ?? undefined,\n            },\n        ]);\n        while (true) {\n            const { data: batch, response } = await this.retrieve(batchID, { vector_store_id: vectorStoreID }, {\n                ...options,\n                headers,\n            }).withResponse();\n            switch (batch.status) {\n                case 'in_progress':\n                    let sleepInterval = 5000;\n                    if (options?.pollIntervalMs) {\n                        sleepInterval = options.pollIntervalMs;\n                    }\n                    else {\n                        const headerInterval = response.headers.get('openai-poll-after-ms');\n                        if (headerInterval) {\n                            const headerIntervalMs = parseInt(headerInterval);\n                            if (!isNaN(headerIntervalMs)) {\n                                sleepInterval = headerIntervalMs;\n                            }\n                        }\n                    }\n                    await sleep(sleepInterval);\n                    break;\n                case 'failed':\n                case 'cancelled':\n                case 'completed':\n                    return batch;\n            }\n        }\n    }\n    /**\n     * Uploads the given files concurrently and then creates a vector store file batch.\n     *\n     * The concurrency limit is configurable using the `maxConcurrency` parameter.\n     */\n    async uploadAndPoll(vectorStoreId, { files, fileIds = [] }, options) {\n        if (files == null || files.length == 0) {\n            throw new Error(`No \\`files\\` provided to process. If you've already uploaded files you should use \\`.createAndPoll()\\` instead`);\n        }\n        const configuredConcurrency = options?.maxConcurrency ?? 5;\n        // We cap the number of workers at the number of files (so we don't start any unnecessary workers)\n        const concurrencyLimit = Math.min(configuredConcurrency, files.length);\n        const client = this._client;\n        const fileIterator = files.values();\n        const allFileIds = [...fileIds];\n        // This code is based on this design. The libraries don't accommodate our environment limits.\n        // https://stackoverflow.com/questions/40639432/what-is-the-best-way-to-limit-concurrency-when-using-es6s-promise-all\n        async function processFiles(iterator) {\n            for (let item of iterator) {\n                const fileObj = await client.files.create({ file: item, purpose: 'assistants' }, options);\n                allFileIds.push(fileObj.id);\n            }\n        }\n        // Start workers to process results\n        const workers = Array(concurrencyLimit).fill(fileIterator).map(processFiles);\n        // Wait for all processing to complete.\n        await allSettledWithThrow(workers);\n        return await this.createAndPoll(vectorStoreId, {\n            file_ids: allFileIds,\n        });\n    }\n}\n//# sourceMappingURL=file-batches.mjs.map","/**\n * Like `Promise.allSettled()` but throws an error if any promises are rejected.\n */\nexport const allSettledWithThrow = async (promises) => {\n    const results = await Promise.allSettled(promises);\n    const rejected = results.filter((result) => result.status === 'rejected');\n    if (rejected.length) {\n        for (const result of rejected) {\n            console.error(result.reason);\n        }\n        throw new Error(`${rejected.length} promise(s) failed - see the above errors`);\n    }\n    // Note: TS was complaining about using `.filter().map()` here for some reason\n    const values = [];\n    for (const result of results) {\n        if (result.status === 'fulfilled') {\n            values.push(result.value);\n        }\n    }\n    return values;\n};\n//# sourceMappingURL=Util.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { CursorPage, Page } from \"../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../internal/headers.mjs\";\nimport { sleep } from \"../../internal/utils.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class Files extends APIResource {\n    /**\n     * Create a vector store file by attaching a\n     * [File](https://platform.openai.com/docs/api-reference/files) to a\n     * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).\n     */\n    create(vectorStoreID, body, options) {\n        return this._client.post(path `/vector_stores/${vectorStoreID}/files`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Retrieves a vector store file.\n     */\n    retrieve(fileID, params, options) {\n        const { vector_store_id } = params;\n        return this._client.get(path `/vector_stores/${vector_store_id}/files/${fileID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Update attributes on a vector store file.\n     */\n    update(fileID, params, options) {\n        const { vector_store_id, ...body } = params;\n        return this._client.post(path `/vector_stores/${vector_store_id}/files/${fileID}`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Returns a list of vector store files.\n     */\n    list(vectorStoreID, query = {}, options) {\n        return this._client.getAPIList(path `/vector_stores/${vectorStoreID}/files`, (CursorPage), {\n            query,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Delete a vector store file. This will remove the file from the vector store but\n     * the file itself will not be deleted. To delete the file, use the\n     * [delete file](https://platform.openai.com/docs/api-reference/files/delete)\n     * endpoint.\n     */\n    delete(fileID, params, options) {\n        const { vector_store_id } = params;\n        return this._client.delete(path `/vector_stores/${vector_store_id}/files/${fileID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Attach a file to the given vector store and wait for it to be processed.\n     */\n    async createAndPoll(vectorStoreId, body, options) {\n        const file = await this.create(vectorStoreId, body, options);\n        return await this.poll(vectorStoreId, file.id, options);\n    }\n    /**\n     * Wait for the vector store file to finish processing.\n     *\n     * Note: this will return even if the file failed to process, you need to check\n     * file.last_error and file.status to handle these cases\n     */\n    async poll(vectorStoreID, fileID, options) {\n        const headers = buildHeaders([\n            options?.headers,\n            {\n                'X-Stainless-Poll-Helper': 'true',\n                'X-Stainless-Custom-Poll-Interval': options?.pollIntervalMs?.toString() ?? undefined,\n            },\n        ]);\n        while (true) {\n            const fileResponse = await this.retrieve(fileID, {\n                vector_store_id: vectorStoreID,\n            }, { ...options, headers }).withResponse();\n            const file = fileResponse.data;\n            switch (file.status) {\n                case 'in_progress':\n                    let sleepInterval = 5000;\n                    if (options?.pollIntervalMs) {\n                        sleepInterval = options.pollIntervalMs;\n                    }\n                    else {\n                        const headerInterval = fileResponse.response.headers.get('openai-poll-after-ms');\n                        if (headerInterval) {\n                            const headerIntervalMs = parseInt(headerInterval);\n                            if (!isNaN(headerIntervalMs)) {\n                                sleepInterval = headerIntervalMs;\n                            }\n                        }\n                    }\n                    await sleep(sleepInterval);\n                    break;\n                case 'failed':\n                case 'completed':\n                    return file;\n            }\n        }\n    }\n    /**\n     * Upload a file to the `files` API and then attach it to the given vector store.\n     *\n     * Note the file will be asynchronously processed (you can use the alternative\n     * polling helper method to wait for processing to complete).\n     */\n    async upload(vectorStoreId, file, options) {\n        const fileInfo = await this._client.files.create({ file: file, purpose: 'assistants' }, options);\n        return this.create(vectorStoreId, { file_id: fileInfo.id }, options);\n    }\n    /**\n     * Add a file to a vector store and poll until processing is complete.\n     */\n    async uploadAndPoll(vectorStoreId, file, options) {\n        const fileInfo = await this.upload(vectorStoreId, file, options);\n        return await this.poll(vectorStoreId, fileInfo.id, options);\n    }\n    /**\n     * Retrieve the parsed contents of a vector store file.\n     */\n    content(fileID, params, options) {\n        const { vector_store_id } = params;\n        return this._client.getAPIList(path `/vector_stores/${vector_store_id}/files/${fileID}/content`, (Page), { ...options, headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]) });\n    }\n}\n//# sourceMappingURL=files.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as FileBatchesAPI from \"./file-batches.mjs\";\nimport { FileBatches, } from \"./file-batches.mjs\";\nimport * as FilesAPI from \"./files.mjs\";\nimport { Files, } from \"./files.mjs\";\nimport { CursorPage, Page } from \"../../core/pagination.mjs\";\nimport { buildHeaders } from \"../../internal/headers.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class VectorStores extends APIResource {\n    constructor() {\n        super(...arguments);\n        this.files = new FilesAPI.Files(this._client);\n        this.fileBatches = new FileBatchesAPI.FileBatches(this._client);\n    }\n    /**\n     * Create a vector store.\n     */\n    create(body, options) {\n        return this._client.post('/vector_stores', {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Retrieves a vector store.\n     */\n    retrieve(vectorStoreID, options) {\n        return this._client.get(path `/vector_stores/${vectorStoreID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Modifies a vector store.\n     */\n    update(vectorStoreID, body, options) {\n        return this._client.post(path `/vector_stores/${vectorStoreID}`, {\n            body,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Returns a list of vector stores.\n     */\n    list(query = {}, options) {\n        return this._client.getAPIList('/vector_stores', (CursorPage), {\n            query,\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Delete a vector store.\n     */\n    delete(vectorStoreID, options) {\n        return this._client.delete(path `/vector_stores/${vectorStoreID}`, {\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n    /**\n     * Search a vector store for relevant chunks based on a query and file attributes\n     * filter.\n     */\n    search(vectorStoreID, body, options) {\n        return this._client.getAPIList(path `/vector_stores/${vectorStoreID}/search`, (Page), {\n            body,\n            method: 'post',\n            ...options,\n            headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\n        });\n    }\n}\nVectorStores.Files = Files;\nVectorStores.FileBatches = FileBatches;\n//# sourceMappingURL=vector-stores.mjs.map","import * as Errors from \"./error.mjs\";\nimport { isObj, readEnv } from \"./internal/utils.mjs\";\nimport { OpenAI } from \"./client.mjs\";\nimport { buildHeaders } from \"./internal/headers.mjs\";\n/** API Client for interfacing with the Azure OpenAI API. */\nexport class AzureOpenAI extends OpenAI {\n    /**\n     * API Client for interfacing with the Azure OpenAI API.\n     *\n     * @param {string | undefined} [opts.apiVersion=process.env['OPENAI_API_VERSION'] ?? undefined]\n     * @param {string | undefined} [opts.endpoint=process.env['AZURE_OPENAI_ENDPOINT'] ?? undefined] - Your Azure endpoint, including the resource, e.g. `https://example-resource.azure.openai.com/`\n     * @param {string | undefined} [opts.apiKey=process.env['AZURE_OPENAI_API_KEY'] ?? undefined]\n     * @param {string | undefined} opts.deployment - A model deployment, if given, sets the base client URL to include `/deployments/{deployment}`.\n     * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\n     * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL']] - Sets the base URL for the API, e.g. `https://example-resource.azure.openai.com/openai/`.\n     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n     * @param {Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n     * @param {Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n     * @param {DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n     */\n    constructor({ baseURL = readEnv('OPENAI_BASE_URL'), apiKey = readEnv('AZURE_OPENAI_API_KEY'), apiVersion = readEnv('OPENAI_API_VERSION'), endpoint, deployment, azureADTokenProvider, dangerouslyAllowBrowser, ...opts } = {}) {\n        if (!apiVersion) {\n            throw new Errors.OpenAIError(\"The OPENAI_API_VERSION environment variable is missing or empty; either provide it, or instantiate the AzureOpenAI client with an apiVersion option, like new AzureOpenAI({ apiVersion: 'My API Version' }).\");\n        }\n        if (typeof azureADTokenProvider === 'function') {\n            dangerouslyAllowBrowser = true;\n        }\n        if (!azureADTokenProvider && !apiKey) {\n            throw new Errors.OpenAIError('Missing credentials. Please pass one of `apiKey` and `azureADTokenProvider`, or set the `AZURE_OPENAI_API_KEY` environment variable.');\n        }\n        if (azureADTokenProvider && apiKey) {\n            throw new Errors.OpenAIError('The `apiKey` and `azureADTokenProvider` arguments are mutually exclusive; only one can be passed at a time.');\n        }\n        // define a sentinel value to avoid any typing issues\n        apiKey ?? (apiKey = API_KEY_SENTINEL);\n        opts.defaultQuery = { ...opts.defaultQuery, 'api-version': apiVersion };\n        if (!baseURL) {\n            if (!endpoint) {\n                endpoint = process.env['AZURE_OPENAI_ENDPOINT'];\n            }\n            if (!endpoint) {\n                throw new Errors.OpenAIError('Must provide one of the `baseURL` or `endpoint` arguments, or the `AZURE_OPENAI_ENDPOINT` environment variable');\n            }\n            baseURL = `${endpoint}/openai`;\n        }\n        else {\n            if (endpoint) {\n                throw new Errors.OpenAIError('baseURL and endpoint are mutually exclusive');\n            }\n        }\n        super({\n            apiKey,\n            baseURL,\n            ...opts,\n            ...(dangerouslyAllowBrowser !== undefined ? { dangerouslyAllowBrowser } : {}),\n        });\n        this.apiVersion = '';\n        this._azureADTokenProvider = azureADTokenProvider;\n        this.apiVersion = apiVersion;\n        this.deploymentName = deployment;\n    }\n    buildRequest(options, props = {}) {\n        if (_deployments_endpoints.has(options.path) && options.method === 'post' && options.body !== undefined) {\n            if (!isObj(options.body)) {\n                throw new Error('Expected request body to be an object');\n            }\n            const model = this.deploymentName || options.body['model'] || options.__metadata?.['model'];\n            if (model !== undefined && !this.baseURL.includes('/deployments')) {\n                options.path = `/deployments/${model}${options.path}`;\n            }\n        }\n        return super.buildRequest(options, props);\n    }\n    async _getAzureADToken() {\n        if (typeof this._azureADTokenProvider === 'function') {\n            const token = await this._azureADTokenProvider();\n            if (!token || typeof token !== 'string') {\n                throw new Errors.OpenAIError(`Expected 'azureADTokenProvider' argument to return a string but it returned ${token}`);\n            }\n            return token;\n        }\n        return undefined;\n    }\n    authHeaders(opts) {\n        return;\n    }\n    async prepareOptions(opts) {\n        opts.headers = buildHeaders([opts.headers]);\n        /**\n         * The user should provide a bearer token provider if they want\n         * to use Azure AD authentication. The user shouldn't set the\n         * Authorization header manually because the header is overwritten\n         * with the Azure AD token if a bearer token provider is provided.\n         */\n        if (opts.headers.values.get('Authorization') || opts.headers.values.get('api-key')) {\n            return super.prepareOptions(opts);\n        }\n        const token = await this._getAzureADToken();\n        if (token) {\n            opts.headers.values.set('Authorization', `Bearer ${token}`);\n        }\n        else if (this.apiKey !== API_KEY_SENTINEL) {\n            opts.headers.values.set('api-key', this.apiKey);\n        }\n        else {\n            throw new Errors.OpenAIError('Unable to handle auth');\n        }\n        return super.prepareOptions(opts);\n    }\n}\nconst _deployments_endpoints = new Set([\n    '/completions',\n    '/chat/completions',\n    '/embeddings',\n    '/audio/transcriptions',\n    '/audio/translations',\n    '/audio/speech',\n    '/images/generations',\n    '/batches',\n    '/images/edits',\n]);\nconst API_KEY_SENTINEL = '<Missing Key>';\n//# sourceMappingURL=azure.mjs.map"],"names":["__classPrivateFieldSet","receiver","state","value","kind","f","TypeError","has","call","set","__classPrivateFieldGet","get","uuid4","crypto","globalThis","randomUUID","bind","u8","Uint8Array","randomByte","getRandomValues","Math","random","replace","c","toString","isAbortError","err","name","String","message","includes","castToError","Error","Object","prototype","error","cause","stack","JSON","stringify","APIError","constructor","status","headers","super","makeMessage","this","requestID","data","code","param","type","msg","generate","errorResponse","APIConnectionError","BadRequestError","AuthenticationError","PermissionDeniedError","NotFoundError","ConflictError","UnprocessableEntityError","RateLimitError","InternalServerError","APIUserAbortError","undefined","APIConnectionTimeoutError","LengthFinishReasonError","ContentFilterFinishReasonError","startsWithSchemeRegexp","isObj","obj","Array","isArray","sleep","ms","Promise","resolve","setTimeout","levelNumbers","off","warn","info","debug","parseLogLevel","maybeLevel","sourceName","client","key","hasOwnProperty","loggerFor","keys","noop","makeLogFn","fnLevel","logger","logLevel","noopLogger","cachedLoggers","WeakMap","cachedLogger","levelLogger","formatRequestDetails","details","options","fromEntries","Headers","entries","map","toLowerCase","retryOfRequestLogID","retryOf","VERSION","getPlatformProperties","detectedPlatform","Deno","build","EdgeRuntime","process","normalizePlatform","os","normalizeArch","arch","version","deno","platform","browserInfo","navigator","browserPatterns","pattern","match","exec","userAgent","browser","getBrowserInfo","_platformHeaders","makeReadableStream","args","ReadableStream","ReadableStreamFrom","iterable","iter","Symbol","asyncIterator","iterator","start","pull","controller","done","next","close","enqueue","cancel","return","ReadableStreamToAsyncIterable","stream","reader","getReader","result","read","releaseLock","e","cancelPromise","FallbackEncoder","body","bodyHeaders","default_format","formatters","RFC1738","v","RFC3986","is_array","hex_table","array","i","push","toUpperCase","limit","maybe_map","val","fn","mapped","length","array_prefix_generators","brackets","prefix","comma","indices","repeat","push_to_array","arr","value_or_array","apply","to_ISO","Date","toISOString","defaults","addQueryPrefix","allowDots","allowEmptyArrays","arrayFormat","charset","charsetSentinel","delimiter","encode","encodeDotInKeys","encoder","str","_defaultEncoder","_kind","format","string","escape","$0","parseInt","slice","out","j","segment","charCodeAt","charAt","join","encodeValuesOnly","formatter","serializeDate","date","skipNulls","strictNullHandling","sentinel","inner_stringify","object","generateArrayPrefix","commaRoundTrip","filter","sort","sideChannel","tmp_sc","step","find_flag","pos","RangeError","isBuffer","is_buffer","key_value","values","obj_keys","encoded_prefix","adjusted_prefix","encoded_key","key_prefix","valueSideChannel","encodeUTF8_","decodeUTF8_","TextEncoder","decodeUTF8","bytes","decoder","TextDecoder","decode","_LineDecoder_buffer","_LineDecoder_carriageReturnIndex","_APIPromise_client","_AbstractPage_client","LineDecoder","chunk","binaryChunk","ArrayBuffer","buffers","buffer","output","index","concatBytes","lines","patternIndex","findNewlineIndex","carriage","subarray","endIndex","preceding","line","flush","startIndex","findDoubleNewlineIndex","NEWLINE_CHARS","Set","NEWLINE_REGEXP","Stream","fromSSEResponse","response","consumed","async","sse","abort","product","sseDecoder","SSEDecoder","lineDecoder","sseChunk","newData","iterSSEChunks","_iterSSEMessages","startsWith","event","parse","console","raw","fromReadableStream","readableStream","iterLines","tee","left","right","teeIterator","queue","shift","toReadableStream","self","ctrl","chunks","endsWith","substring","fieldname","_","indexOf","partition","defaultParseResponse","props","requestLogID","startTime","url","__streamClass","__binaryResponse","contentType","mediaType","split","trim","addRequestID","json","text","durationMs","now","defineProperty","enumerable","APIPromise","responsePromise","parseResponse","_thenUnwrap","transform","asResponse","then","p","withResponse","all","request_id","parsedPromise","onfulfilled","onrejected","catch","onfinally","finally","AbstractPage","hasNextPage","getPaginatedItems","nextPageRequestOptions","getNextPage","nextOptions","requestAPIList","iterPages","page","item","PagePromise","request","Page","CursorPage","has_more","id","query","x","after","checkFileSupport","File","isOldNode","versions","node","makeFile","fileBits","fileName","getName","filename","path","pop","isAsyncIterable","multipartFormRequestOptions","opts","fetch","createForm","supportsFormDataMap","fetchObject","cached","promise","FetchResponse","Response","FormData","supportsFormData","form","addFormValue","append","blob","Blob","isNamedBlob","entry","prop","isBlobLike","size","arrayBuffer","isFileLike","lastModified","isResponseLike","toFile","URL","pathname","getBytes","parts","find","part","isView","getOwnPropertyNames","propsForError","APIResource","_client","encodeURIPath","encodeURIComponent","pathEncoder","statics","params","postPath","reduce","previousValue","currentValue","test","pathOnly","invalidSegments","invalidSegmentPattern","lastEnd","underline","acc","spaces","arrows","createPathTagFunction","Messages","list","completionID","getAPIList","isRunnableFunctionWithParse","isAssistantMessage","role","isToolMessage","_EventStream_instances","_EventStream_connectedPromise","_EventStream_resolveConnectedPromise","_EventStream_rejectConnectedPromise","_EventStream_endPromise","_EventStream_resolveEndPromise","_EventStream_rejectEndPromise","_EventStream_listeners","_EventStream_ended","_EventStream_errored","_EventStream_aborted","_EventStream_catchingPromiseCreated","_EventStream_handleError","_AbstractChatCompletionRunner_instances","_AbstractChatCompletionRunner_getFinalContent","_AbstractChatCompletionRunner_getFinalMessage","_AbstractChatCompletionRunner_getFinalFunctionToolCall","_AbstractChatCompletionRunner_getFinalFunctionToolCallResult","_AbstractChatCompletionRunner_calculateTotalUsage","_AbstractChatCompletionRunner_validateParams","_AbstractChatCompletionRunner_stringifyFunctionCallResult","EventStream","add","AbortController","reject","_run","executor","_emitFinal","_emit","_connected","ended","errored","aborted","on","listener","listeners","findIndex","l","splice","once","emitted","forEach","isAutoParsableResponseFormat","response_format","isAutoParsableTool","tool","parseChatCompletion","completion","choices","choice","finish_reason","tool_calls","toolCall","inputTool","tools","function","parsed_arguments","$parseRaw","arguments","strict","parseToolCall","parsed","content","refusal","parseResponseFormat","shouldParseToolCall","hasAutoParseableInput","some","t","WeakSet","openAIError","DEFAULT_MAX_CHAT_COMPLETIONS","AbstractChatCompletionRunner","_chatCompletions","messages","_addChatCompletion","chatCompletion","_addMessage","emit","tool_call","finalChatCompletion","finalContent","finalMessage","finalFunctionToolCall","finalFunctionToolCallResult","totalUsage","allChatCompletions","finalFunctionCall","finalFunctionCallResult","usage","_createChatCompletion","signal","addEventListener","chat","completions","create","_runChatCompletion","_runTools","tool_choice","restParams","singleFunctionToCall","maxChatCompletions","inputTools","$callback","description","parameters","functionsByName","tool_call_id","rawContent","at","y","total","completion_tokens","prompt_tokens","total_tokens","n","ChatCompletionRunner","runTools","runner","PartialJSON","MalformedJSON","partialParse","input","jsonString","allowPartial","ATOM","allow","markPartialJSON","throwMalformedError","parseAny","skipBlank","parseStr","parseObj","parseArr","Infinity","NaN","parseNum","Number","lastIndexOf","writable","configurable","_parseJSON","parseJSON","Allow","_ChatCompletionStream_instances","_ChatCompletionStream_params","_ChatCompletionStream_choiceEventStates","_ChatCompletionStream_currentChatCompletionSnapshot","_ChatCompletionStream_beginRequest","_ChatCompletionStream_getChoiceEventState","_ChatCompletionStream_addChunk","_ChatCompletionStream_emitToolCallDoneEvent","_ChatCompletionStream_emitContentDoneEvents","_ChatCompletionStream_endRequest","_ChatCompletionStream_getAutoParseableResponseFormat","_ChatCompletionStream_accumulateChatCompletion","ChatCompletionStream","currentChatCompletionSnapshot","_fromReadableStream","createChatCompletion","chatId","content_done","refusal_done","logprobs_content_done","logprobs_refusal_done","done_tool_calls","current_tool_call_index","choiceSnapshot","delta","snapshot","logprobs","toolCallDelta","toolCallSnapshot","arguments_delta","toolCallIndex","responseFormat","created","model","system_fingerprint","rest","choiceRest","function_call","messageRest","toolRest","fnRest","maybeParseChatCompletion","finalizeChatCompletion","_a","_b","_c","_d","assign","other","pushQueue","readQueue","ChatCompletionStreamingRunner","Completions","post","retrieve","update","delete","validateInputTools","Chat","brand_privateNullableHeaders","iterateHeaders","nulls","shouldClear","row","didClear","buildHeaders","newHeaders","targetHeaders","nullHeaders","seenHeaders","lowerName","Speech","Accept","Transcriptions","__metadata","Translations","Audio","transcriptions","translations","speech","Batches","batchID","Assistants","assistantID","Sessions","TranscriptionSessions","Realtime","sessions","transcriptionSessions","threadID","messageID","thread_id","Steps","stepID","run_id","runID","readEnv","env","_AssistantStream_instances","_AssistantStream_events","_AssistantStream_runStepSnapshots","_AssistantStream_messageSnapshots","_AssistantStream_messageSnapshot","_AssistantStream_finalRun","_AssistantStream_currentContentIndex","_AssistantStream_currentContent","_AssistantStream_currentToolCallIndex","_AssistantStream_currentToolCall","_AssistantStream_currentEvent","_AssistantStream_currentRunSnapshot","_AssistantStream_currentRunStepSnapshot","_AssistantStream_addEvent","_AssistantStream_endRequest","_AssistantStream_handleMessage","_AssistantStream_handleRunStep","_AssistantStream_handleEvent","_AssistantStream_accumulateRunStep","_AssistantStream_accumulateMessage","_AssistantStream_accumulateContent","_AssistantStream_handleRun","_ResponseStream_instances","_ResponseStream_params","_ResponseStream_currentResponseSnapshot","_ResponseStream_finalResponse","_ResponseStream_beginRequest","_ResponseStream_addEvent","_ResponseStream_endRequest","_ResponseStream_accumulateResponse","_OpenAI_encoder","AssistantStream","_addRun","createToolAssistantStream","runId","runs","_runToolAssistantStream","_createToolAssistantStream","run","submitToolOutputs","createThreadAssistantStream","thread","_threadAssistantStream","createAssistantStream","threadId","_runAssistantStream","currentEvent","currentRun","currentMessageSnapshot","currentRunStepSnapshot","finalRunSteps","finalMessages","finalRun","_createThreadAssistantStream","createAndRun","_createAssistantStream","accumulateDelta","deltaValue","accValue","every","deltaEntry","accEntry","accumulatedMessage","newContent","snapshotContent","textDelta","image_file","currentContent","accumulatedRunStep","step_details","accumulated","contentElement","Runs","steps","include","createAndPoll","poll","createAndStream","beta","threads","pollIntervalMs","sleepInterval","headerInterval","headerIntervalMs","isNaN","submitToolOutputsAndPoll","submitToolOutputsStream","Threads","createAndRunPoll","createAndRunStream","Beta","realtime","assistants","Content","fileID","container_id","Files","containerID","Containers","files","Embeddings","hasUserProvidedEncodingFormat","encoding_format","embeddingBase64Obj","embeddingBase64Str","embedding","base64Str","Buffer","buf","from","Float32Array","byteOffset","BYTES_PER_ELEMENT","binaryStr","atob","len","toFloat32Array","OutputItems","outputItemID","eval_id","outputItems","evalID","Evals","waitForProcessing","pollInterval","maxWait","TERMINAL_STATES","file","Methods","Graders","validate","Alpha","graders","Permissions","fineTunedModelCheckpoint","method","permissionID","fine_tuned_model_checkpoint","Checkpoints","permissions","fineTuningJobID","Jobs","checkpoints","listEvents","pause","resume","FineTuning","methods","jobs","alpha","GraderModels","graderModels","Images","createVariation","edit","Models","Moderations","parseTextFormat","getOwnPropertyDescriptor","addOutputText","text_format","input_tools","rsp","texts","output_text","ResponseStream","createResponse","_createOrRetrieveResponse","starting_after","responses","response_id","maybeEmit","sequence_number","output_index","content_index","parsedResponse","output_parsed","maybeParseResponse","finalizeResponse","finalResponse","InputItems","responseID","Responses","inputItems","Parts","uploadID","Uploads","complete","FileBatches","vectorStoreID","vector_store_id","vectorStoreId","batch","listFiles","uploadAndPoll","fileIds","configuredConcurrency","maxConcurrency","concurrencyLimit","min","fileIterator","allFileIds","workers","fill","fileObj","purpose","promises","results","allSettled","rejected","reason","allSettledWithThrow","file_ids","fileResponse","upload","fileInfo","file_id","VectorStores","fileBatches","search","OpenAI","baseURL","apiKey","organization","project","embeddings","images","audio","moderations","models","fineTuning","vectorStores","batches","uploads","evals","containers","dangerouslyAllowBrowser","window","document","timeout","DEFAULT_TIMEOUT","defaultLogLevel","fetchOptions","maxRetries","_options","withOptions","defaultQuery","validateHeaders","authHeaders","Authorization","stringifyQuery","normalize_stringify_options","joined","getUserAgent","defaultIdempotencyKey","makeStatusError","buildURL","isAbsoluteURL","_k","isEmptyObj","prepareOptions","prepareRequest","methodRequest","patch","put","remainingRetries","makeRequest","optionsInput","retriesRemaining","req","buildRequest","retryCount","padStart","retryLogStr","fetchWithTimeout","headersTime","retryMessage","isTimeout","retryRequest","responseInfo","ok","shouldRetry","errText","errJSON","safeJSON","errMessage","init","isReadableBody","duplex","clearTimeout","shouldRetryHeader","responseHeaders","timeoutMillis","retryAfterMillisHeader","timeoutMs","parseFloat","retryAfterHeader","timeoutSeconds","calculateDefaultRetryTimeoutMillis","numRetries","pow","inputOptions","isInteger","validatePositiveInteger","buildBody","idempotencyHeaders","idempotencyHeader","idempotencyKey","trunc","defaultHeaders","rawHeaders","DataView","URLSearchParams","OpenAIError","AzureOpenAI","apiVersion","endpoint","deployment","azureADTokenProvider","API_KEY_SENTINEL","_azureADTokenProvider","deploymentName","_deployments_endpoints","_getAzureADToken","token"],"sourceRoot":""}